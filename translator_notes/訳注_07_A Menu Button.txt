<分節 1993>
>問題が起きるのは、ユーザー指定のフォントがアイコンに使われている文字をサポートしていない場合で、汎用の「グリフ未定義」のボックスに置き換えられてしまいます。

訳注:
「グリフ未定義」のボックスは白い長方形であることが多く、その見た目から日本では一般的に「豆腐」と呼ばれます。ちなみに、GoogleのNotoフォントの名前は"no more tofu"に由来します。

参考:
Google Noto Fonts
https://www.google.com/get/noto/


<分節 1998>
>Opera Miniは当然ながらWebフォントを読み込みません。

訳注:
Opera Miniは、通信データ量を減らすことに重点を置いたブラウザです。一般のブラウザとは異なり、コンテンツをいったん専用サーバで読み込み、軽量化や圧縮の処理を行ってから端末に送る仕組みになっています。この際、サイト側のフォント指定も消され、端末のデフォルトのフォントが使われるようになるため、「当然ながら」Webフォントにも対応していないということになります。

参考:
その他のプラットフォーム用 Opera Mini に関するよくある質問
http://www.opera.com/ja/help/mini/other


<分節 2008>
>ひとつめは、すべてのデバイスがUnicodeの幅広い文字集合を十分にサポートしているわけではなく、この記号「trigram for heaven」を表示できない可能性があるということです。ふたつめは、Unicodeの符号位置として<g1><g2>私用領域</g2></g1><g3><g4><g5>（脚注109）</g5></g4></g3>にマッピングされるアイコンフォントとは異なり、この文字は支援技術によって解釈されるかもしれないということです。

訳注:
U+2630 TRIGRAM FOR HEAVEN「☰」は「八卦」をあらわす文字の一つです。八卦の他の例としては、U+2633 TRIGRAM FOR THUNDER「☳」などがあります。
なお、2017年8月現在、NVDA2017.3jpでは「☰」を全く読み上げません。iOS10のVoiceOverでは、「☰MENU」という文字列を単に「メニュー」と読み、「☰」単独であれば「トリグラムフォーヘブン」と読み上ます。lang="ja" の場合でも、lang="zh" の場合でも読みは変わりませんでした。おそらく通常はこの文字を読まず、リンクの中で単独で出現するようなケースでは代替のラベルとして文字の名前を読むものと思われます。
「中国語のユーザーであれ」と言っているのは、原著者がこの文字を中国語の文で普通に使われるものと考えたからでしょう。一般に使われる文字は普通に読み上げられるため、別の混乱を招きます。たとえば、「MENU」という単語の前にアイコン代わりに「三」という漢字を置けば、日本語や中国語では「サンメニュー」と読まれてしまいます。


<分節 2031>
>この<g1><symbol></g1>をメニューボタン内で使用するには、<g3><use></g3>要素で<g2>id</g2>を参照します。
※下のコードの下に訳注追加
訳注:
xlink:hrefのようにXLinkの名前空間接頭辞をつけるのはSVG1系の書き方です。SVG2の仕様ではuse要素にhref属性が定義されており、xlink:hrefを使うことは非推奨とされています。

参考:
Scalable Vector Graphics (SVG) 2 - 5.6. The ‘use’ element
http://www.w3.org/TR/2016/CR-SVG2-20160915/struct.html#UseElementHrefAttribute

Scalable Vector Graphics (SVG) 2 - 16.1.6. Deprecated XLink URL reference attributes
https://www.w3.org/TR/2016/CR-SVG2-20160915/linking.html#XLinkRefAttrs



<分節 2068>
><g1>aria-label</g1>のメリットのひとつは、要素にテキストノードがある場合、それを上書きするということです。

訳注:
ある要素にテキストノードが含まれると同時にaria-labelやaria-labelledbyなども指定されている場合、それらのどれもが「アクセシブルな名前((accessible name)」の候補となりますが、どれを採用するかの優先順位は決まっていて、aria-labelledby、aria-label、テキストノード、の順になります。より詳しく知りたい方は、WAI-ARIA 1.1の5.2.7 Accessible Name Calculationと、そこから参照されているAccessible Name and Description: Computation and API Mappings 1.1を参照してください。

参考:
WAI-ARIA 1.1 5.2.7 Accessible Name Calculation
https://www.w3.org/TR/wai-aria-1.1/#namecalculation

Accessible Name and Description: Computation and API Mappings 1.1
https://www.w3.org/TR/accname-aam-1.1/


<分節 2090>
><g4>aria-label</g4>で「メニュー」というラベルが提供されているため、<g5>alt</g5>は不要です。

訳注:
逆に言えば、aria-labelに対応していない環境を想定するならaltが必要になるはずです。インラインSVGに対応していない環境というのは相当古く、aria-labelにも対応していない可能性が高いと考えられます。そう考えると、ここではaltは指定しておくほうが得策かもしれません。なお、少し前に本文で述べられているように、aria-labelに対応している環境ではbuttonの中のテキストよりもaria-labelが優先されるため、この例でaltの値とaria-labelの両方が読まれることはありません。


<分節 2147>
>ここでは、<g3><g4><g5>aria-expanded</g5></g4></g3><g6><g7><g8>（脚注120）</g8></g7></g6>が解決策となるでしょう。スクリーンリーダーに、明示的に「折りたたみ」（false）もしくは「展開」（true）と読み上げさせることができます。

訳注:
2017年8月現在、iOS10のVoiceOverはexpanded="false" の状態を「隠されました」、aria-expanded="true" の状態を「拡大」と読みます。


<分節 2203>
>AppleとAndroidは、タッチターゲットの大きさについて異なるアドバイスをしています。Appleは44pt × 44pt（ピクセル密度とは独立したApple特有の測定単位）、Androidは48px × 48pxを推奨しています。

訳注: 実際にはAndroidのタッチターゲットの推奨値は48×48dpとされており、dp(Density-independent Pixels) という解像度非依存の単位で指定されています。

参考:
Accessibility - Usability - Material design guidelines
https://material.io/guidelines/usability/accessibility.html#accessibility-style

More Resource Types | Android Developers
https://developer.android.com/guide/topics/resources/more-resources.html?hl=ja#Dimension
