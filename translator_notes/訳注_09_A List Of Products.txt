<分節 2431>
>たとえば、<g2>alt</g2>テキストは、テキストしか扱えないブラウザに対して画像を説明してくれますが、これは画像リクエストに対してステータス403、404、500、503が返された場合にも役立ちます。

訳注:
HTTPステータスの番号は403がForbidden、404がNot Found、500がInternal Server Error、503がService Unavailableです。いずれも、期待するリソースが取得できなかったという結果になります。

参考:
Hypertext Transfer Protocol (HTTP) Status Code Registry
http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml



<分節 2443>
><g4><div></g4>を使うことにこだわると、<g5>事後に</g5>ARIAの属性で見出しのアクセシビリティを改善しなければならなくなり、コードはさらに冗長になります。
※この文の下のコードの下に訳注追加
訳注:
aria-level属性は階層内のレベルを指定するもので、見出しに適用すると見出しレベルを指定したことになります。aria-level="3"とrole="heading"を指定することで、<h3>と同じセマンティクスを表現することができます。なお本文にあるように、同様のことを表現するにもかかわらず、タイプしなければならない文字列はとても長くなってしまいます。コード冒頭のコメントは、「こんなに長い文字列を入力するには、人生はあまりに短い」という主旨でしょう。

参考:
Accessible Rich Internet Applications (WAI-ARIA) 1.1 - aria-level (property)
https://www.w3.org/TR/wai-aria-1.1/#aria-level



<分節 2473>
>たとえば、JAWSではショートカットキーの<g4>I</g4>（<g5>item</g5>、項目の意味）を使って、あるリスト項目から次のリスト項目へと移動できます。

訳注:
NVDAでも同様のキー操作で次のリスト項目へ移動することができます。

参考:
NVDA 2017.3jp コマンド一覧表
https://www.nvda.jp/nvda2017.3jp/ja/keyCommands.html



<分節 2484>
>そのため、CSSが（一時的または永続的に）使用できなかったり、ユーザースタイルシートで上書きされた場合でも、視覚的な構造は明確です。

訳注:
ユーザースタイルシートがあっても著者側のスタイルが無効になるわけではなく、ユーザー側で指定した部分がカスケードのルールによって上書きされるだけです。ユーザースタイルシートがあるからと言って、著者側CSSで指定したスタイルがなくなるわけではありません。なお、それとは別に、ブラウザの設定で著者側のCSSを完全に無視することは可能です。

参考: CSS Cascading and Inheritance Level 3 - 6.  Cascading
https://www.w3.org/TR/css3-cascade/#cascading



<分節 2508>、<分節 2509>
><g1>•</g1>番号なしリスト（<g2><ul></g2>）と同様、記述リスト（<g3><dl></g3>）はスクリーンリーダーが項目を数え上げるので、ユーザーは項目がいくつあるかわかります。最初に出くわすと、VoiceOverなどのスクリーンリーダーは「Description List」などと読み上げ、その後にキーと値のペアが続くことをユーザーに知らせます。

訳注:
2017年9月現在、スクリーンリーダーによってはdl要素を十分にサポートしていないものもあります。
OSXのVoiceOverはdlを「Description List」と読みますが、項目数はdtとddの合計となります。この例では「Description List 6 items」と読みます。
NVDAはdlもul同様「リスト」としか読まず、項目数はdtとddの合計となります。この例では「リスト6項目」と読みます。
iOS10のVoiceOverはdlを特に読まないようです (ulの場合は「リストの開始位置です」と読みます)。



<分節 2511>
><g1>•</g1>「90cm × 30cm」は正しいUnicode文字（乗算記号）を使って書かれているので、スクリーンリーダーでは「きゅうじゅっセンチメートルかけるさんじゅっセンチメートル」と読み上げられます。

訳注:
「×」の記号が読み上げられるかどうかはスクリーンリーダーの設定や読ませ方にも依存します。たとえばNVDAでは、標準の設定で文全体を読ませると記号を読みませんが、一文字ずつ読み上げさせた場合は「×」の部分を「かける」と読みます。なお、NVDAには「句読点/記号レベル」という設定があり、常に全ての記号を読むようにすることも可能です (「読まない」「一部読み上げ」「ほとんど読み上げ」「全て読み上げ」から選ぶことができます)。



<分節 2538>
>答えは、「商品のタイトルで既に提供されている以外にも情報を提供するなら、意味を提供できることになる」です。

訳注:
この例を "An alt Decision Tree" に沿って見ていくと、「画像にテキストが含まれているか?」→No、「画像がリンクやボタンで使われていて、取り除くと意味が通じなくなるか?」→No、「この画像は現在のページやコンテキストに意味を提供しているか？」→Yes、「シンプルなグラフィックや写真か?」→Yes、となって「Informative Images」に該当し、この中の「Example 4: Images conveying an impression or emotion」にあてはまります。ここでは写真の印象などを表す簡潔な代替テキストを指定すれば良いことになっています。

参考:
Informative Images 
https://www.w3.org/WAI/tutorials/images/informative/



<分節 2556>
>ネットワークの速度が遅いため画像をオフにしている場合や、画像の読み込みに失敗した場合も、この代替テキストを見ることになります。

訳注:
2017年9月現在、OS XのSafari10.1.2では、画像をオフにしても代替テキストが表示されません。



<分節 2565>
>画面右上のメニューから<g5>Show throttling</g5>を選び、「Regular 3G」を選択します――これは最速でもなければ最遅でもない、標準の速度です。

訳注:
このあたりのUIは頻繁に変更になっているようで、Chrome60では「Show throttling」ではなく「Add network throttling」という名前に変更され、Chrome61ではthrottlingの表示/非表示を切り替えるメニュー自体が削除されて常に表示されるようになりました。また、選択肢についても「Regular 3G」という選択肢がなくなり、「Slow 3G」と「Fast 3G」になったり、「Mid-tier mobile」と「Low-end mobile」になったりと、環境によってさまざまなようです。


<分節 2579>
></g1><g2>遅延読み込み</g2>：画像がまだ見えていないのであれば、読み込む必要はありません。

訳注:
なお、この方法では、何らかの理由でJavaScriptが動作しなかった場合にdummy.jpgがそのまま表示されることになります。JavaScript無効時も想定するなら、本来の画像と無関係のダミーではなく、極低解像度にした画像を置いておくようにする手もあります。


<分節 2630>
>JavaScriptが利用できないとリンクの基本的なふるまいも機能しませんし、利用<g1>できる</g1>場合であっても、その体験は不満が残るものになります。カーソルを合わせてもURLは “javascript:;” と表示されるだけですし、リンクをブラウザのタブリストにドラッグすることもできません。

訳注:
リンクをブラウザのタブリストにドラッグすると、そのリンク先を新しいタブで開くという動作になります。



<分節 2632>
>ブラウザは、<g2><a></g2>要素を普通に使っている場合にだけ、これらの機能を提供します。

訳注:
通常、リンクを右クリックすると「新しいタブで開く」「新しいウィンドウで開く」といったメニューが表示されます。右クリックしたリンクがjavascript:スキームのものだった場合、Firefoxではこれらのメニューが消え、Internet Explorerではグレーアウトします。なお、Chromeはいつもと同じように「新しいタブで開く」が選択できますが、選択すると新しいタブで空白のページが開いてしまいます。Edgeの場合は「新しいタブで開く」が選択でき、選択しても何も起きないという挙動になります。
なお、これらの動作はそれぞれCtrlキー、Shiftキーを押しながらクリックすることで呼び出すこともできます。この場合も、押しても何も起きない、空白ページのタブが開く、といったユーザーの期待を裏切る動作になります。



<分節 2641>
>この商品のタイトルは、既に<g1><h3></g1>で視覚的に表示されており、リンクの目的を示すものになっています。これをリンク内に非表示のテキストとして配置しましょう。

訳注: この例では、リンクラベルに追加したい文字列が既に見出しとして存在するため、見出しにidをつけて、aria-labelledbyで参照するという方法もあります。ただし、idはページ内でユニークでなければならないため、商品がリストとして列挙される場合、商品ごとに異なるidをつけなければなりません。それが難しい場合には、この方法は採用しづらいでしょう。

参考:
ARIA7: リンクの目的を示すために aria-labelledby を使用する
http://waic.jp/docs/WCAG-TECHS/ARIA7.html



<分節 2654>
>その代わり、今回の例では写真家ページへの子リンクは削除することになります。

訳注:
HTML5ではa要素にさまざまな要素を入れることができるようになりましたが、依然としてa要素の子孫にa要素を入れることはできません。そのため、商品全体をa要素に入れると、その子孫要素となる写真家の名前部分をa要素にすることができなくなります。

参考:
HTML Living Standard - 4.5.1 The a element
https://html.spec.whatwg.org/multipage/text-level-semantics.html#the-a-element



<分節 2674>
>たとえばVoiceOverの場合、<g2>Ctrl</g2> + <g3>Alt</g3> + <g4>Cmd</g4> + <g5>H</g5>を使用して商品の見出しへ移動しようとすると、見出しを囲むリンクにフォーカスされ、見出しのセマンティクス（「見出しレベル3」）は読み上げられません。

訳注:
これはOS XのVoiceOverに固有の問題かもしれません。iOSのVoiceOverでは、見出し読みモードにしてジャンプしてきた場合、「ガソリンスタンドにたたずむ裸の男、見出しレベル3、リンク」のように読まれます。また、NVDAでも見出しジャンプで同様に読みます。
なお、iOSのVoiceOverでは、行読みモードでa要素内の各行を読もうとした際、行を移動するたびにa要素の先頭から読みなおしてしまうという問題があるようです。



<分節 2676>
></g1>ほとんどの支援技術は、リンクにフォーカスするとリンク内の全てのテキストを読み上げ始めるため、かなり冗長です。

訳注:
iOSのVoiceOverは1行ずつしか読まず、リンク読みモードで飛んでも「ガソリンスタンドにたたずむ裸の男、見出しレベル3、リンク」のように先頭の行だけを読んでいったん切れるようです。
他のほとんどのスクリーンリーダーでは、a要素内の全ての単語を読み上げた後で「リンク」と通知するため、長大なテキストが入っていると、それがリンクであることがなかなかわからない可能性があります。



<分節 2699>
>たとえば、検索結果に列挙されるページの<g1><title></g1>は、個々の検索結果の中でリンクになっている<g2><h3></g2>要素に使われます。

訳注:
2017年9月現在、Googleの検索結果ページでは、検索結果のページタイトルが<h3>でマークアップされています。
