<分節 2865>
><g1>•</g1><g3><form></g3>に<g2>form</g2>というARIA roleを指定しているのは意外に思うかもしれませんが、これによってウィジェットがひとつの領域になり、スクリーンリーダーでショートカットを使ってナビゲーションできるようになります。

訳注:
ARIA in HTMLでは、form要素は暗黙のformロールを持ち、明示的にrole="form"を指定すべきではないとされています。しかし実際には、多くのスクリーンリーダーの実装は、role属性のないform要素をランドマークとしては扱いません。そのため、role属性を明示的に指定するとランドマークとして扱われ、ランドマークにジャンプする機能で移動できるようになります。
なお、ほとんどのスクリーンリーダーは、フォームコントロールにジャンプする機能を備えています。role="form"の指定がない場合でも、フォームに飛ぶ機能を利用すれば比較的容易に戻ることができるでしょう。

参考:
ARIA in HTML - 2. Document conformance requirements for use of ARIA attributes in HTML
http://www.w3.org/TR/html-aria/#docconformance


<分節 2866>
>このウィジェットの基本機能はJavaScriptなしでも動作しますが、その場合はページが再読み込みされ、ユーザーはページの先頭に戻されてしまいます。この指定があれば、フォームにすぐに戻ってくることができます。

訳注:
JavaScriptが無効の場合にはGETメソッドでフォームを送信する動作となるため、別URLへの遷移となり、ページが再読み込みされます。するとスクリーンリーダーのユーザーは、またページの先頭から読み始めることになります。


<分節 2896>
>これで、インタラクションや視覚的なフィードバックをすべてラベルに引き受けてもらうことができたので、融通の利かない見苦しいラジオボタンを安心して隠すことができます。
※下のコードの下に訳注追加



<分節 2943>
><g1>•</g1><g2><g3><g4>aria-live="polite"</g4></g3></g2><g5><g6><g7>（脚注163）</g7></g6></g5>プロパティと<g8><g9><g10>status</g10></g9></g8><g11><g12><g13>（脚注164）</g13></g12></g11>ロールは同じ機能を提供します。



<分節 3003>
>ハンドルがマウスカーソルの場所から移動したことに気付かずに、再度ドラッグしようとして、スクロールバーのトラック部分をクリックしてしまうことがあります。すると、ページが現在位置から急に下に飛ぶことになります。これは非常に直観に反する不快な体験ですし、まだ見ていないコンテンツを見逃してしまうこともあります。



<分節 3062>
>クリックされた際、読み込み中の状態であることを検出したら（たとえば、ボタンの<g3>textContent</g3>に「読み込み中」が含まれていたら）、何もせずに<g2>return</g2>する。



<分節 3174>
>シンメトリーのため、センターライン上にコンテンツをまとめるのが私の好みです。そのため、flexコンテナで<g2>justify-content: center;</g2>と宣言しています。



<分節 3206>
>ドキュメントが右から左の方向設定にもかかわらず、グリッドを左から右の設定で配置したい場合は、flexコンテナに対してCSSのdirectionプロパティを指定することで強制的に左寄せにできます。
