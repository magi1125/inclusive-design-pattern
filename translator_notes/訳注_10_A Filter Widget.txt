<分節 2865>
><g1>•</g1><g3><form></g3>に<g2>form</g2>というARIA roleを指定しているのは意外に思うかもしれませんが、これによってウィジェットがひとつの領域になり、スクリーンリーダーでショートカットを使ってナビゲーションできるようになります。

訳注:
ARIA in HTMLでは、form要素は暗黙のformロールを持ち、明示的にrole="form"を指定すべきではないとされています。しかし実際には、多くのスクリーンリーダーの実装は、role属性のないform要素をランドマークとしては扱いません。そのため、role属性を明示的に指定するとランドマークとして扱われ、ランドマークにジャンプする機能で移動できるようになります。
なお、ほとんどのスクリーンリーダーは、フォームコントロールにジャンプする機能を備えています。role="form"の指定がない場合でも、フォームに飛ぶ機能を利用すれば比較的容易に戻ることができるでしょう。

参考:
ARIA in HTML - 2. Document conformance requirements for use of ARIA attributes in HTML
https://www.w3.org/TR/html-aria/#docconformance


<分節 2866>
>このウィジェットの基本機能はJavaScriptなしでも動作しますが、その場合はページが再読み込みされ、ユーザーはページの先頭に戻されてしまいます。この指定があれば、フォームにすぐに戻ってくることができます。

訳注:
JavaScriptが無効の場合にはGETメソッドでフォームを送信する動作となるため、別URLへの遷移となり、ページが再読み込みされます。するとスクリーンリーダーのユーザーは、またページの先頭から読み始めることになります。


<分節 2896>
>これで、インタラクションや視覚的なフィードバックをすべてラベルに引き受けてもらうことができたので、融通の利かない見苦しいラジオボタンを安心して隠すことができます。
※下のコードの下に訳注追加
訳注:
通常、著者側のCSSで !important を指定することは避けるべきです。このコードにある大量の !important は、「見苦しいラジオボタン」を徹底的に隠してやろうという著者のジョークでしょう。
なお、CSS Basic User Interface Module Level 4ではappearance: noneの指定でOSやブラウザ側のルールに沿ったUIのスタイリングを抑制する仕様が検討されており、将来的にはこちらを使うのが主流になるかもしれません。

参考:
CSS Basic User Interface Module Level 4 - 8.1. Switching appearance
https://www.w3.org/TR/2015/WD-css-ui-4-20150922/#appearance-switching


<分節 2943>
><g1>•</g1><g2><g3><g4>aria-live="polite"</g4></g3></g2><g5><g6><g7>（脚注163）</g7></g6></g5>プロパティと<g8><g9><g10>status</g10></g9></g8><g11><g12><g13>（脚注164）</g13></g12></g11>ロールは同じ機能を提供します。
※訳注削除



<分節 3003>
>ハンドルがマウスカーソルの場所から移動したことに気付かずに、再度ドラッグしようとして、スクロールバーのトラック部分をクリックしてしまうことがあります。すると、ページが現在位置から急に下に飛ぶことになります。これは非常に直観に反する不快な体験ですし、まだ見ていないコンテンツを見逃してしまうこともあります。

訳注:
ここで言うトラック部分とは、スクロールバー本体の中の、ハンドル (ノブ、ボックス) でもアローでもない部分です。ここをクリックすると1ページ分スクロールするという挙動になります。


<分節 3062>
>クリックされた際、読み込み中の状態であることを検出したら（たとえば、ボタンの<g3>textContent</g3>に「読み込み中」が含まれていたら）、何もせずに<g2>return</g2>する。

訳注:
読み込み中であるかどうかをボタンのテキストで判定すると、ボタンのテキストが変更されたときに問題が生じます。本書でも何度か自動翻訳の話題が出ていますが、翻訳によってテキストが差し替えられることもありえますので、ボタンのテキストを見る実装は望ましくないでしょう。


<分節 3087>
>ユーザーのための判断の例として、<g2><meta></g2>タグのviewportに<g1>user-scalable=no</g1>を指定してズームを無効にするというものがあります。

訳注:
W3CのHTML5.2の仕様には、user-scalable=noの指定はアクセシビリティ、ユーザビリティの問題を起こすため、避けるべきであるという旨の注意書きがあります。近年ではブラウザ側で対応する動きも進んでおり、iOS10以降のSafariではuser-scalable=noの指定を無視するようになりました。

HTML 5.2 - 4.2.5. The meta element
http://www.w3.org/TR/2017/CR-html52-20170808/document-metadata.html#the-meta-element

iOS SDK Release Notes for iOS 10.0
https://developer.apple.com/library/content/releasenotes/General/RN-iOSSDK-10.0/index.html


<分節 3174>
>シンメトリーのため、センターライン上にコンテンツをまとめるのが私の好みです。そのため、flexコンテナで<g2>justify-content: center;</g2>と宣言しています。

訳注:
この場合、最終行の要素だけ幅が異なるため、要素を左寄せにすると、単に幅がそろっていないように見えてしまいます。flex-growを指定して伸びるようにしつつ、最終行の要素を他の行の要素と同じ幅にするというのは簡単ではありません。そのため、シンプルに中央寄せにするという方法をおすすめしているのでしょう。


<分節 3206>
>ドキュメントが右から左の方向設定にもかかわらず、グリッドを左から右の設定で配置したい場合は、flexコンテナに対してCSSのdirectionプロパティを指定することで強制的に左寄せにできます。

訳注:
flex-direcionをrow-reverseにした場合と、directionにltrを指定した場合とでは挙動が異なる場合があります。たとえば、text-alignの初期値はdirectionの影響を受けるため、directionで指定した場合にはテキストの配置も変化することがあります。

