<分節 1546>
>それどころか、<g1><g2>世界で初めて作られたWebページ</g2></g1><g3><g4><g5>（脚注85）</g5></g4></g3>にさえ、定義リスト（<g6><dl></g6>）内の一連のリンクによって構成された原始的なナビゲーション領域が存在しました。

訳注:
dl要素は現在ではassociation listもしくはdescription listとされていますが、これはHTML5で再定義されたものです。最初期にはA glossary (or definition list)と定義されており、当時の呼び名としては「定義リスト」でも間違いではありません。

参考:
Hypertext Markup Language (HTML)
https://www.w3.org/MarkUp/draft-ietf-iiir-html-01.txt


<分節 1635>
>ベストなのは他の装飾と併用することで、テキストに下線を引くといった代替手段でも区別できるようにします。
※CSSのコードの下に追加
訳注:
このCSSで指定されている $highlight-color は、おそらくこのコードの外で定義されたSassの変数と思われます。


<分節 1662>
>今のところ、現在のページのリンクを視覚以外で区別する標準的なやり方はありません。

訳注:
現在では、WAI-ARIA1.1で追加されたaria-current属性を使うのが標準的な方法と言えるでしょう。スクリーンリーダーの対応も最近になって進んできており、2017年5月にリリースされたNVDA 2017.2では、aria-current="page"を「現在のページ」、aria-current="location"を「現在の位置」と読みあげるようになりました。すぐ下で紹介されている「The Accessible Current Page Link Conundrum」という記事では、aria-currentが提案中である旨が書かれています。原著のこの箇所が書かれた時点では、まだaria-currentは正式採用されていなかったものと思われます。

参考:
Accessible Rich Internet Applications (WAI-ARIA) 1.1 - aria-current (state)
http://www.w3.org/TR/2016/CR-wai-aria-1.1-20161027/#aria-current

What's New in NVDA
https://www.nvaccess.org/files/nvda/releases/2017.2/nvda_2017.2_changes.html


<分節 1679>
>例では<g1><span></g1>を前に付け加えたので、スクリーンリーダーは「企業情報 現在のページ」ではなく「現在のページ 企業情報」と読み上げます。この「企業情報 現在のページ」は意味があいまいです。現在のページに<g2>関する</g2>説明へのリンクであるという誤解を与えます。

訳注:
「企業情報」は原文では"About"です。"About Current Page"と読まれると「現在のページについて」と言っているように誤解されるということです。


><分節 1698>
（本書の執筆時現在、Internet Explorerでは<g5>hidden</g5>はサポートされていませんが、スタイルシートに<g6>[hidden] { display: none; }</g6>を追加すれば無理やり使うことができます）。

訳注:
Internet Explorer11ではhiddenがサポートされており、このようなスタイルシートの定義がなくてもhidden属性の指定された要素は非表示になります。


<分節 1730>
>次に「企業情報」のリンクにフォーカスを移すと、「企業情報、ページ内リンク」と読み上げられます。この時点で「ページ内リンク」と読み上げられているため、「現在のページ」という非表示の<g2><span></g2>は廃止してもよいと言えます。

訳注:
2017年8月現在、NVDAにはページ内リンクを区別して読み上げる機能はありません。JAWSでは、ここで書かれているように「ページ内リンク」 (英語版では "same page") と読みます。


<分節 1797>
>また、インフォメーションアーキテクトにとっては、共通ページのセクションや階層構造に属さない独立ページを大量生産してしまいがちな状況になります。
訳注:
目次が表示されていれば項目の階層構造やグルーピングがはっきり見えますが、折りたたんで隠してしまうと目につかなくなくなるため、階層構造やグルーピングにこだわらない設計をしてしまいやすくなる、という話と思われます。


<分節 1821>
>これらのターゲット（たいていは<g1><section></g1>や見出し）はフォーカスできない要素であることが多いのですが、ブラウザが採用している<g2>シーケンシャルフォーカスナビゲーション</g2>の仕組みでは、ターゲットの中または直後にある要素を<g3>次の</g3>フォーカス可能な要素と見なします。

訳注:
「シーケンシャルフォーカスナビゲーション」は特別なものではなく、どのブラウザでも実装されている、Tabキーによるフォーカス移動のアルゴリズムを指します。

参考:
Sequential focus navigation
https://html.spec.whatwg.org/multipage/interaction.html#sequential-focus-navigation


<分節 1825>
>Internet Explorerでシーケンシャルフォーカスナビゲーションを正しく動作させるためには、長年続く<g6>hasLayout</g6>バグを乗り越えなければなりません。

(訳注削除)



<分節 1865>
>window.location.hashで始まる行に注目してください。フォーカスを移した後に、このページのURLをハッシュフラグメントのついた形で更新しています。

訳注:
この実装には、ブラウザの「戻る」を押しても元の場所に戻れないという問題があります。戻れるようにするためには、pushStateを使うなどの追加の処理が必要です。


><分節 1867>
このようにサブセクションを記録・再生する機能はWebの体験において不可欠であり、これがないと困るというユーザーもいるでしょう。

訳注:
サブセクションをブックマークできると、途中まで読んだときにブックマークしておき、あとで続きから読むということができます。そういう使い方をする人もいて、それができないと困ることがあるという話です。


<分節 1875>
>サイトナビゲーションは<g1><main></g1>の上に、目次は中にあるでしょう（ドキュメントの主要な <g2><h1></g2>見出しのすぐ下が好ましいでしょう。Microsoft Word文書でよく見かけるような感じです）。

訳注:
実際には、Microsoft Wordの目次機能では好きな位置に目次を挿入することができます。Microsoft Wordで作ったかどうかに関係なく、文書一般の話として、最初の大見出しの下に目次が来ることが多いということでしょう。


<分節 1910>
>また、JavaScriptを使ってスクロールのふるまいを変更する例では、キーボードユーザーも利用できるようにすること、グレイスフルデグラデーションによってスクリプトが使えない場合でも利用できるようにすることを担保しています。

訳注:
この点については本文中に説明がありません。ここで紹介されているサンプルコードではまず、<a href="#history">沿革</a> のような通常のページ内リンクを用意し、そこにJavaScriptで機能を追加するというやり方をしています。そのため、スクリプト無効時には通常のページ内リンクとして機能します。
しばしば以下のような実装を見かけることがありますが、

<a href="javascript:scrollTo('history')">沿革</a>

このようにhrefに直接JavaScriptを書くと、スクリプト無効時にはこのリンクを押しても何も起こらなくなってしまいます。

