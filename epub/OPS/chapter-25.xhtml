<?xml version='1.0' encoding='UTF-8' ?>
<html xml:lang="ja" xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><title>11章：登録フォーム</title><link rel="stylesheet" href="css/book.css" type="text/css"/><meta name="EPB-UUID" content="f9202370-6e5d-44d5-b924-02b34d51163d"/></head><body><div class="body"><h1>11章：登録フォーム</h1><p>私がWebデザインに参戦した世紀末のころは、画像を使ったり、イメージマップで画像の一部から画像ページにリンクしたり、<code>&lt;table&gt;</code>要素を入れ子にしたりして、全体が崩れないように固めることが仕事でした。当時は低いパフォーマンス、レスポンシブ性の欠如、ブラウザ間の非互換が前提でしたから、責められないところも多いでしょう。</p><p>今でも完璧とはいえませんが、とはいえ、Webページは単に画像を貼り付けたコルクボードである、という認識が改められたのは良いことです。実際、Webページはターミナルです。情報を受け取り（入力）、情報を表示します（出力）。</p><p>Webフォームは入力を担います。フォームをインクルーシブにして、すべての人がWebをただ消費するだけでなく、参加できるようにすることはきわめて重要です。そのために何が必要でしょうか？まず、フォームの各要素が必要です。OSの機能を利用し、標準でキーボードやスクリーンリーダーでアクセスできるものです──少なくとも適切にマークアップされている場合には。ここまではよいでしょう。その一方で、フォームはユーザビリティの問題を引き寄せる1万ボルトの電磁石でもあります。</p><p>このシンプルな登録フォームパターンでは、標準を取り入れつつ潜在的なユーザビリティ問題を避けています。インクルージョンは標準とユーザビリティとの関係の中にあります。</p><h2 id="section1">コンテキストに応じたフォーム</h2><p>登録フォームを構築する前に、ユーザーがフォームに遭遇するコンテキストを理解しましょう。モジュール化にはメリットがありますが、パターンもコンテキストの影響を受けることがあり、コンテキストを考慮することでより良いデザインになることがあります。</p><p>一般的に登録フォームは、既にアカウントを持っているユーザーのためのログインフォームと対になって使われます。たいていログインフォームが最初に表示され、登録フォームにアクセスするオプションが提示されます。この登録オプションは、たいてい「アカウントをお持ちでない方」などと小さく書かれたリンクで、ログインフォームのsubmitボタンの<em>後に</em>配置されています。</p><p><img src="images/forms_register_link.png" alt="フォームの下部にログインボタンがあり、そのすぐ下に、登録のための小さなテキストリンクが置かれている。"/></p><p>アカウント登録のオプションを大きく扱う必要はないと考える人も多いでしょう。<em>大半の</em>新規ユーザーはまずトップページにアクセスし、アプリケーションのセールスポイントをすべて読んだ上でサインアップの行動喚起のリンクを押すものと考えられているからです。
</p><p>ユーザーがどこから来てどのように移動するかを決めつけるのは危険ですが、それはさておき、ここには特定のユーザーをいらだたせるユーザビリティの問題があります。スクリーンリーダーでページを上から順に読むユーザーは、ログインフォームを通り過ぎない限り、登録オプションの存在を知ることができません。また、別のページの登録フォームにリンクで飛ぶため、新たにロードされたページをまた上から読み進める必要があります。</p><p>これが、4章「ブログ記事」で述べたスキップリンク、見出し、ランドマーク領域を使ってブロックスキップ機能を作成する理由のひとつです。ブロックスキップについては、WCAG 2.0の達成基準<a href="https://www.w3.org/TR/WCAG20/#navigation-mechanisms"><span class="link">2.4.1「ブロックスキップ」</span></a>を参照してください。</p><p>しかし、<em>すべての</em>ユーザーにとってより明確なのは、最初からログインと登録の両方を表示して、いずれかを選択できるようにする方法でしょう。下の図では、デフォルトで「ログイン」が選択されていますが、登録オプションとの関係性は一目瞭然です。</p><p><img src="images/forms_login_register_tabs.png" alt="フォームの上端に「ログイン」タブがあり、その右どなりには未選択の「登録」タブがある。"/></p><h3>ログイン／登録ツールバー</h3><p>選択肢は、視覚的にも非視覚的にもユーザーにわかりやすく表示することが重要です。音声によるアクセシビリティの専門家は違うことを言っているかもしれませんが、実際のところ、このやり方は間違っている、このやり方でなければならない、というようなことは言えません。何が最も効果的なソリューションなのか考えることは、みなさんのデザイナーとしての判断になります。</p><p>本格的なWAI-ARIAのタブインターフェイスを使って、ログインオプションと登録オプションをタブとしてデザインするという選択肢も考えられます。こうしたインターフェイスについては、私の著書『<a href="https://shop.smashingmagazine.com/products/apps-for-all"><span class="link">Apps For All: Coding Accessible Web Applications</span></a>』（日本語版：『コーディングWebアクセシビリティ - WAI-ARIAで実現するマルチデバイス環境のWebアプリケーション』ボーンデジタル刊）で詳しく説明しています。また、<a href="http://heydonworks.com/practical_aria_examples/#tab-interface"><span class="link">付随のデモ</span></a>も利用できます。</p><p>ここではオプション（タブ）を2つ扱うだけですので、この複雑なウィジェットはやり過ぎのように思います。もっと簡単にオプションと現在の選択状況を伝えるには、以下のようなちょっとした<a href="http://w3c.github.io/aria/#toolbar"><span class="link">ツールバー</span></a>を使うこともできます。</p><pre><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>ようこそ<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span>"toolbar"</span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation">=</span>"ログイン / 登録"</span> <span class="token attr-name">aria-controls</span><span class="token attr-value"><span class="token punctuation">=</span>"forms"</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">aria-pressed</span><span class="token attr-value"><span class="token punctuation">=</span>"true"</span><span class="token punctuation">&gt;</span></span>ログイン<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">aria-pressed</span><span class="token attr-value"><span class="token punctuation">=</span>"false"</span><span class="token punctuation">&gt;</span></span>登録<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"forms"</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"login"</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!-- ログインフォーム --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"register"</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!-- 登録フォーム --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></code></pre><h4>コードの補足</h4><ul><li>ボタンを押すと、そのボタンが<a href="https://www.w3.org/TR/wai-aria-1.1/#aria-pressed"><span class="link"><code>aria-pressed="true"</code></span></a>に変更され、対応するフォームが表示されます。CSSでこのボタンが選択されていることを示す際は、<code>［aria-pressed="true"］</code>の属性セレクタを使うことができます。</li><li>スクリーンリーダーユーザーが最初のボタンにフォーカスすると、「ログイン/登録 ツールバー、ログイン トグルボタン、押されています」などと読み上げられます（内容はスクリーンリーダーによって若干異なります）。これによりユーザーは、自分が「ログイン/登録」という選択肢を提示するツールバーウィジェットを操作していて、現在は「ログイン」オプションがアクティブになっていると知ることができます。</li><li>ツールバーと対応するコンテナである<code>#forms</code>とのリレーションシップについては、<code>aria-controls</code>属性も使って表現しています。ただし、これに対応するスクリーンリーダーはJAWSなどに限られます。これはエンハンスメントにすぎません。対応するフォームはフォーカス順のすぐ後に配置し、いずれにせよキーボードで簡単に到達できるようにしています。</li></ul><h2 id="section2">基本のフォーム</h2><p>登録フォームそのものに焦点を移しましょう。フォームコントロールの扱いについては、既に10章「フィルターウィジェット」で取り上げました。ここで扱うフォームは、親しみのある典型的な<em>フォーム</em>で、ユーザーにテキストの入力をうながします。</p><pre><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"register"</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span>"email"</span><span class="token punctuation">&gt;</span></span>メールアドレス<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>"text"</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"email"</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>"email"</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span>"username"</span><span class="token punctuation">&gt;</span></span>ユーザー名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>"text"</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"username"</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>"username"</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span>"例:HotStuff666"</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span>"password"</span><span class="token punctuation">&gt;</span></span>パスワード<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>"password"</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"password"</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>"password"</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>"submit"</span><span class="token punctuation">&gt;</span></span>登録する<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span></code></pre><h3>ラベルづけ</h3><p>インクルーシブなフォームの基本として、すべてのインタラクティブ要素にアクセシブルなラベルを関連づける必要があります。この例のsubmitボタンの場合は、ボタンの中のテキストノードがアクセシブルなラベルとなります。つまり、このボタンにフォーカスを合わせると、「登録する」というラベルが読み上げられます。</p><p>テキスト入力などのユーザー入力を受け取る要素に対しては、付属するラベルを関連づける必要があります。標準的な方法は、<code>&lt;label&gt;</code>要素を使って<code>for</code>属性を指定することです。<code>for</code>属性に入力欄の<code>id</code>の値を指定して、ラベルを関連づけます。これが、<code>id</code>を確実にユニークなものにしなければならない理由のひとつです。また、そうでないと、WCAG 2.0の<a href="https://www.w3.org/TR/WCAG20/#ensure-compat"><span class="link">4.1.1「構文解析」</span></a>のルールを破ることにもなってしまいます。</p><p>この例のパスワード入力欄の場合、共通のカギ――<code>for</code>と<code>id</code>の一致した値――は、単に「password」です。</p><pre><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span>"password"</span><span class="token punctuation">&gt;</span></span>パスワード<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>"password"</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"password"</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>"password"</span><span class="token punctuation">&gt;</span></span></code></pre><p>このようにラベルとコントロールを明示的に関連づける理由を理解するには、スクリーンリーダーユーザーがどのようにフォーム内を移動するかを理解する必要があります。散文的なコンテンツでは、ユーザーは下矢印キーを使って要素間を順に移動しますが、フォームでは異なり、あるフィールドから次のフィールドへ直接移動する操作が行われます。このとき、ラベル要素は飛び越されてしまいます。ラベル要素とインタラクティブ要素が明示的に関連づけられていない場合、そのラベル要素は見逃されてしまうのです。</p><p>この例では、スクリーンリーダーユーザーがパスワードフィールドにフォーカスを合わせると、「パスワード エディット、保護つき」などと読み上げられます。</p><p>シニアアクセシビリティエンジニアの<a href="http://tink.uk/proposed-aria-password-role/"><span class="link">レオニー・ワトソン（Léonie Watson）は、<code>password</code>のロールの追加をWAI-ARIA（2.0）の仕様に追加する議論に注目しています</span></a>。これが実現すれば、開発者はセキュリティ（入力された文字列のマスキング）が実際には存在しなくても、そのカスタムフィールドを安全であると伝達できるようになるでしょう。ただし、WAI-ARIAが影響するのはセマンティクスのみで、動作全般には影響しません。<code>type="password"</code>のような標準的な要素や属性が使えるなら、その方が安全です。セマンティクスと標準的な動作が、自動的に組み合わされます。</p><h4><code>placeholder</code>属性</h4><p><code>placeholder</code>属性は、比較的最近になってHTML仕様に追加されたものです。ユーザーが入力すべき内容についてヒントを提供したい、という開発者の要望に応えてできた属性です。ここで重要なのは、<em>ヒント</em>という言葉です。<code>placeholder</code>自体はラベルづけをする手段ではなく、<em>補助的な情報</em>を提供するためだけに使うべきなのです。</p><p>この例の<code>#username</code>の箇所では、「ユーザー名」が（アクセシブルな）ラベルであり、「例：HotStuff666」は、単にユーザーの想像力を刺激するだけのヒントにすぎません。</p><pre><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span>"username"</span><span class="token punctuation">&gt;</span></span>ユーザー名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>"text"</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"username"</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>"username"</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span>"例:HotStuff666"</span><span class="token punctuation">&gt;</span></span></code></pre><p>デフォルトでは、<code>placeholder</code>属性はグレーのテキストで表示されますが、これはコントラストの問題を起こすことがあります。特に入力欄に背景色が適用されている場合には顕著です。コントラストを抑えてプレースホルダーを区別するのではなく、イタリックにするなど、他の方法を用いることをおすすめします。</p>
<div class="translator_note" id="translator_note3379"><h5>訳註</h5><p>日本語の文字の場合はイタリックにすると読みにくくなることがあるため、なんらか他の方法で区別するほうがよいでしょう。</p></div>
<p><img src="images/forms_placeholder_contrast2.png" alt="左の例は、プレースホルダーテキストをデフォルトのグレーで表示している。右の例は、濃い色で、カスタムのイタリックスタイルを使用している。"/></p><p>標準および独自のプロパティを使用すると、ほとんどのブラウザでプレースホルダーのスタイル設定を行うことが可能です。</p>
<div class="translator_note" id="translator_note3383"><h5>訳註</h5><p>Internet ExplorerやEdgeにも対応させたければ、::-ms-input-placeholderも追加すると良いでしょう。また、ベンダープリフィクスのつかないセレクタは、ベンダープリフィクスのついたものよりも後ろに記述するのが通例です。そうしておけば、ブラウザの対応が進んだ際に、ベンダープリフィクスなしの指定のほうを有効にすることができます。</p></div>
<pre><code class=" language-css"><span class="token selector">::placeholder </span><span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>
    <span class="token property">font-style</span><span class="token punctuation">:</span> italic<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">::-webkit-input-placeholder </span><span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>
    <span class="token property">font-style</span><span class="token punctuation">:</span> italic<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">::-moz-placeholder </span><span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>
    <span class="token property">font-style</span><span class="token punctuation">:</span> italic<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre><p><strong>【MEMO】</strong>セレクタをカンマ区切りのリストでまとめて宣言するのではなく、それぞれ個別の宣言ブロックに分けています。ブラウザが認識できない独自のセレクタが含まれている場合、その宣言ブロックがまるごと無視されることがあるためです。</p><p>スクリーンリーダーやブラウザの中には、<code>placeholder</code>をサポートしないものもあります。そのため、適切なラベルのかわりにプレースホルダーを使って代用すると、情報が失われることになってしまいます。問題はそれだけではありません。目が見えているユーザーが入力する際、文字を打ち始めた瞬間に、この代用ラベルは消えてしまいます。これは、認知アクセシビリティの問題の原因となるうえ、インターフェイスパターンとしても明らかにインクルーシブとは言えません。そしてもちろん、ブラウザのオートコンプリート機能で複数のフィールドが一気に埋められることもあるでしょう。この場合もラベルが表示されないため、自動入力された値がそのフィールドに沿った適切なものかどうか、確認することが困難になります。</p><blockquote><p>プレースホルダーをラベルの代わりとして使っていると、自動入力と組み合わさった際に、特にひどいことになります。フォーム全体が自動で埋められて、その項目がいったい何なのかを知る手がかりが全くないのですからね。— <a href="https://twitter.com/LeaVerou/status/758386597012185088"><span class="link">リア・ヴェルー（Lea Verou）、Twitter</span></a></p></blockquote><p>ときには、スペースの節約（もしくは、<em>画面の土地</em>に限りがあると言ったほうが良いでしょうか）のため、ラベルを表示せずに<code>placeholder</code>属性で代用したいという誘惑に駆られることもありますが、フォームのユーザビリティを犠牲にする理由としては、相当苦しいでしょう。</p><p><img src="images/forms_placeholder_disappear.png" alt="左では、テキストフィールドがフォーカスされておらず、プレースホルダーが表示されている。右では、テキストフィールドにフォーカスを合わせた結果プレースホルダーが消え、何を入力するフィールドなのかわからない。"/></p><p>モックアップやプロトタイプの段階から、ラベルが入るスペースを優先的に確保してください。とはいえ、ラベルをプレースホルダー<em>として</em>使用するという革新的なソリューションも存在します。<a href="https://twitter.com/mds"><span class="link">マット・D・スミス（Matt D.Smith）</span></a>による<a href="http://bradfrost.com/blog/post/float-label-pattern/"><span class="link">float label pattern</span></a>では、フォーカスを合わせると、ユーザーのカーソルのじゃまにならないように、ラベルがアニメーションしながら外側に移動します。ただし、ラベルとプレースホルダーをまとめて1つのものとして扱うため、ラベルとは別にヒントや入力例を表示することはできません。</p><h4>グループ化の注意点</h4><p><code>&lt;fieldset&gt;</code>は、フォームフィールドをグループ化して、共通のラベルをつける要素です。ラベルは<code>&lt;legend&gt;</code>で提供します。いくつかのスクリーンリーダーでは、<code>&lt;legend&gt;</code>の内容が各フィールドの<code>&lt;label&gt;</code>と連結されて読み上げられます。</p><p>それをこのフォームにも適用して、以下のようにグループ化構造を含めることも<em>できました</em>。</p><pre><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"register"</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">&gt;</span></span>新規登録<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span>"email"</span><span class="token punctuation">&gt;</span></span>メールアドレス<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>"text"</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"email"</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>"email"</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span>"username"</span><span class="token punctuation">&gt;</span></span>ユーザー名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>"text"</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"username"</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>"username"</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span>"例:HotStuff666"</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span>"password"</span><span class="token punctuation">&gt;</span></span>パスワード<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>"password"</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"password"</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>"password"</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>"submit"</span><span class="token punctuation">&gt;</span></span>登録する<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span></code></pre><p>これは技術的には妥当なものですが、不要なノイズが大量に生まれてしまいます。つまり、それぞれの入力欄に順にフォーカスを合わせていくと、「新規登録：メールアドレス」、「新規登録：ユーザー名を選択」、という具合に補われたラベルが読み上げられます。</p><p>日々の業務でプログラミングのコードを書いていると、正しいか間違っているか、真か偽かで物ごとを考えるのに慣れてしまいます。今回の<code>&lt;fieldset&gt;</code>についても、技術的に誤りでも不適合でもないということを、逆の見方で考えてしまいがちです。つまり、ぜひとも実施すべきである、さらには<em>義務</em>であるとさえ思う可能性があります。</p><p>HTMLは、命令型プログラミング言語の明快で手続き的なロジックとは異なります。同じようには考えない方がよいでしょう。HTMLの構造は、自然言語の構造と同じように、ニュアンスで判断するべきです。役立つのか、じゃまなのか、少なすぎるのか、多すぎるのかといった観点です。現在のコンテキストでは、<code>&lt;fieldset&gt;</code>と<code>&lt;legend&gt;</code>によって冗長な情報が読み上げられることになり、それに対して得られるものがほとんどないので、おそらく使用すべきではないでしょう。</p><p><code>&lt;fieldset&gt;</code>は<code>&lt;legend&gt;</code>なしでは無意味であることを念頭に置きつつ、おおまかに以下の3点を考えて<code>&lt;fieldset&gt;</code>を使うべきかどうか判断しましょう。</p>
<ol>
<li>同じフォームやコンテキスト内にフィールドが複数あり、明確に異なるものになっていますか？<em>Yesなら、</em><code>&lt;fieldset&gt;</code>を使いましょう。<em>Noなら、</em><code>&lt;fieldset&gt;</code>は使わないでください。</li>
<li>その中に含まれるフィールドは1つだけですか？<em>Yesなら、</em> <code>&lt;fieldset&gt;</code>は必要ありません。<em>Noで、</em> かつ (1) に該当するなら、<code>&lt;fieldset&gt;</code>を使いましょう。</li>
<li><code>&lt;legend&gt;</code>で<code>&lt;fieldset&gt;</code>内の各フィールドのラベルを補うことが合理的で、ユーザーの理解を促すことにつながると思いますか？<em>Yesなら、</em><code>&lt;fieldset&gt;</code>を使いましょう。<em>Noなら、</em><code>&lt;fieldset&gt;</code>は使わないでください。</li>
</ol>
<h2 id="section3">必須フィールド</h2><p>この登録フォームには、空欄のままにすることができない<em>必須の</em>フィールドがあります。実際には、ここでは<em>すべての</em>フィールドが必須となっています。ユーザー体験をシンプルにするため、サインアップにどうしても必要な情報以外は求めないようにしています。</p><p>必須フィールドをインクルーシブに示す方法には、標準のものと、慣習的なものがあります。多くの人になじみがあるのは、フィールドラベルの末尾にアスタリスク（<em>*</em>）記号をつける方法でしょう。もっとわかりやすくしたいと思った場合は、アスタリスクを<code>&lt;strong&gt;</code>要素の中に入れて赤にすることもできます。</p><pre><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span>"email"</span><span class="token punctuation">&gt;</span></span>メールアドレス <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span>"red"</span><span class="token punctuation">&gt;</span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>"text"</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"email"</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>"email"</span><span class="token punctuation">&gt;</span></span></code></pre><p>スクリーンリーダーは、このラベルを通常どおり、アスタリスクを含めて「メールアドレス アスタリスク」のように読み上げます。スクリーンリーダーユーザーは、この文脈の「アスタリスク」という言葉が「必須」を意味することをよく理解しています。しかし、これは必ずしも堅牢というわけではありません。<a href="https://en.wikipedia.org/wiki/Asterix"><span class="link">とある漫画のガリア人のキャラクター</span></a>に関するクイズ問題をマークアップすることを想像してみてください。</p>
<div class="translator_note" id="translator_note3450"><h3>訳註</h3><p>日本語では同じ用途で「※」記号が使われることもあります。これは「こめじるし」などと読まれます。</p></div>
<div class="translator_note" id="translator_note3451"><h3>訳註</h3><p>この正解は "Asterix" です。必須を示す "*" の読み上げと非常に紛らわしく、これが正解のヒントにもなってしまいます。</p></div>
<pre><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span>"quiz-question"</span><span class="token punctuation">&gt;</span></span>ゴシニ（Goscinny）とユデルゾ（Uderzo）が描いた有名な漫画に登場するガリア人の名前は？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span>"red"</span><span class="token punctuation">&gt;</span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>"text"</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"quiz-question"</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>"quiz-question"</span><span class="token punctuation">&gt;</span></span></code></pre><p>より正確を期するなら、input自体に<a href="http://w3c.github.io/aria/#aria-required"><span class="link"><code>aria-required="true"</code></span></a>を指定することで、ページの言語で「必須」と読み上げられるようになります。ただし、このままでは「アスタリスク」も読み上げられてしまうので、<code>aria-hidden</code>を追加しましょう。<code>aria-hidden="true"</code>は、<code>display: none;</code>の読み上げ版と考えてください。</p><pre><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span>"email"</span><span class="token punctuation">&gt;</span></span>メールアドレス <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span>"red"</span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation">=</span>"true"</span><span class="token punctuation">&gt;</span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>"text"</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"email"</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>"email"</span> <span class="token attr-name">aria-required</span><span class="token attr-value"><span class="token punctuation">=</span>"true"</span><span class="token punctuation">&gt;</span></span></code></pre><p><strong>【MEMO】</strong><code>aria-hidden="true"</code>と<code>aria-required="true"</code>は、いずれも<a href="http://html5doctor.com/html5-forms-introduction-and-new-attributes/"><span class="link">特定のHTML5の属性で可能なブール型の記法</span></a>ではなく、明示的に値を指定しています。ARIA属性としてはこのほうが正確な書き方であり、信頼性がより高くなります。</p>
<div class="translator_note" id="translator_note3458"><h3>訳註</h3><p>HTML5のブール型属性にはいくつかの書き方が許されており、たとえばinput要素のhidden属性をtrueに設定したい場合は以下のように書くことができます。</p><pre class="HTML">&lt;input hidden&gt;
&lt;input hidden=""&gt;
&lt;input hidden="hidden"&gt;
</pre><p>逆にfalseにしたい場合は、属性そのものを省略します。</p><p>しかし、WAI-ARIAのブール型属性の場合はこの書き方とは異なり、"true" "false"という属性値を明示的に指定することになっています。</p><h4>参考</h4><ul><li><a href="https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes">HTML Living Standard - 2.3.2 Boolean attributes</a></li><li><a href="https://www.w3.org/TR/wai-aria-1.1/#typemapping">Accessible Rich Internet Applications (WAI-ARIA) 1.1 - B. Mapping WAI-ARIA Value types to languages</a></li></ul></div>
<h3><code>required</code>属性の注意点</h3><p>ご存じかもしれませんが、HTML5には<code>required</code>属性があります。なぜこれを使用しないのでしょうか？通常は、WAI-ARIAで拡張するよりも、HTML5ベースのセマンティクスを使用することが望ましいのですが、これはベンダー（言い換えれば、ブラウザとスクリーンリーダー）によってサポートされている場合に限ります。<a href="http://caniuse.com/#feat=form-validation"><span class="link"><code>required</code>属性は、すべてのブラウザで実装されているわけではありません</span></a>。また、望ましくない挙動になることもあります。初期状態で空になっている必須フィールドをエラーとして扱ってしまう、といった動作です。今回の用途としては、これはやや冗長で、アグレッシブすぎます。</p>
<div class="translator_note" id="translator_note3464"><h4>訳註</h4><p>ブラウザの対応は進んでおり、2017年10月現在では、Opera Miniを除いたほとんどすべてのブラウザがrequired属性に対応している状況になっています。</p></div>
<h2 id="section4">パスワードを表示する</h2><p>先ほど、<code>placeholder</code>属性が消えた際、特に適切なラベルをともなわない場合に、認知ストレスが高まるという話をしました。パスワード入力の際にも、正しいキーを押したかどうか確認できないため、同じような問題が起きます。</p><p>インターフェイスの中には、<code>id</code>属性以外のすべてがそっくり同じ入力欄を2つ提供して、パスワードを<em>2回</em>入力させ、2つのパスワードを比較するものがあります。面倒で不愉快な話です。</p><p>セキュリティを確保しつつ、ユーザーが入力したパスワードを確認できるようにするために、パスワードを表示するチェックボックスを提供することもできます。</p><pre><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span>"password"</span><span class="token punctuation">&gt;</span></span>パスワード<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>"password"</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"password"</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>"password"</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>"checkbox"</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"showPassword"</span><span class="token punctuation">&gt;</span></span>パスワードを表示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span></code></pre><p><img src="images/forms_show_password.png" alt="パスワード入力欄の右下に、「パスワードを表示」チェックボックスが追加されている。"/></p><p>短い簡単なスクリプトで、フィールドのtypeを<code>password</code>から<code>text</code>に切り替えたり、戻したりします。</p><pre><code class=" language-javascript"><span class="token keyword">var</span> password <span class="token operator">=</span> document<span class="token punctuation">.</span>getElementById<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> showPassword <span class="token operator">=</span> document<span class="token punctuation">.</span>getElementById<span class="token punctuation">(</span><span class="token string">'showPassword'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

showPassword<span class="token punctuation">.</span>addEventListener<span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> type <span class="token operator">=</span> this<span class="token punctuation">.</span>checked <span class="token operator">?</span> <span class="token string">'text'</span> <span class="token punctuation">:</span> <span class="token string">'password'</span><span class="token punctuation">;</span>
    password<span class="token punctuation">.</span>setAttribute<span class="token punctuation">(</span><span class="token string">'type'</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Internet ExplorerとMicrosoft Edgeはこの機能をネイティブで提供しており、目のアイコンを押すと表示が切り替えられるようになっています。目のアイコンは<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::-ms-reveal"><span class="link"><code>::ms-reveal</code>疑似クラス</span></a>で制御できます。ここでは、独自の（クロスブラウザ）ソリューションを提供しているので、この機能は抑制した方が賢明かもしれません。</p><pre><code class=" language-css"><span class="token selector">input[type=password]::-ms-reveal </span><span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<div class="translator_note" id="translator_note3476"><h3>訳註</h3><p>パスワード入力欄と通常のテキスト入力欄ではブラウザの扱いが異なるため、単にパスワード入力欄のtypeをtextに変更する実装では問題が起きる可能性があります。たとえば、ブラウザには入力補完の機能やパスワードを記憶する機能などがありますが、これはtype="password"であるか否かで動作が変わってきます。</p><p>基本的には、サイト側ではtype="password"で提供し、ブラウザ側のネイティブの機能でパスワードを確認できるようにすることが望ましいでしょう。</p></div>
<p>ここまでくると、インクルーシブデザイナーとして、インターフェイスのユーザー体験を向上するだけでなく、例外的な状況にいるユーザーや補助ソフトウェアを使用しているユーザーもサポートすることが、もう習慣として身についていることでしょう。このちょっとした、スクリーンリーダーでアクセス可能なパスワード表示機能も、再利用可能なマイクロパターンになっています。パターンを再利用すれば、アクセシビリティの側面について考え、取り組むのは、ただ一度だけで済みます。</p><h2 id="section5">フォーム検証</h2><p>最大の課題となるのは、インクルーシブなフォーム検証の体験を提供することです。これは動的な処理を多くともなうため、注意深く扱わないと、一部のユーザーに対して不快な、使いにくい体験を提供してしまうことがあります。ポイントは、フォーム検証で出てきた個々の問題について、2つのカギとなるメッセージを伝えることです。</p>
<ol>
<li>なんらか破綻している（フォームにエラーがある）</li>
<li>何を修正する必要があるのか（どうすれば有効な入力になるのか）</li>
</ol>
<p>HTML5の<code>required</code>属性と同様、HTML5の<code>url</code>のような入力欄に対するフォーム検証はブラウザの実装に依存しており、サポートと一貫性に懸念があります。また、HTML5にはパスワード入力欄を検証するための機能はありません。そのため、入力が無効であることを示すためにWAI-ARIAを使用しながら、実際のフォーム検証（パターンマッチング）にはJavaScriptを使うことになるでしょう。</p>
<div class="translator_note" id="translator_note3496"><h3>訳註</h3><p>pattern属性を使えば、JavaScriptを使わずに検証することも可能です。たとえば、以下のようにすれば半角英数6文字以上として検証されます。</p><pre class="HTML">&lt;input type="password" pattern="[0-9A-Za-z]{6,}" title="半角英数6文字以上" required="required"&gt;
</pre><p>ただ、この方法ではメッセージの出方などがブラウザの実装に依存し、自由度が低いため、実際にはJavaScriptで処理することのほうが多いでしょう。</p><h4>参考</h4><ul><li><a href="https://html.spec.whatwg.org/multipage/input.html#the-pattern-attribute">HTML Living Standard - 4.10.5.3.6 The pattern attribute</a></li></ul></div>
<h3>なんらか破綻している</h3><p>ユーザーがフォームを送信しようとしたとき、エラーの有無をチェックする必要があります。エラーがある場合は、フォームの送信を一時的に止めなければなりません。submitボタンのクリック操作を抑制しているのではなく、フォームの送信そのものを止めている点に注意してください。</p><pre><code class=" language-javascript"><span class="token keyword">var</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span>getElementById<span class="token punctuation">(</span><span class="token string">'register'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
form<span class="token punctuation">.</span>addEventListener<span class="token punctuation">(</span><span class="token string">'submit'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>errors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        event<span class="token punctuation">.</span>preventDefault<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 送信させない
</span>    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>この処理はこれで問題ないのですが、現時点では、（フォームエラーがある場合に）ユーザーが送信しようとしても、文字通り何も起きません。送信を試みたタイミングで、エラーメッセージの形でユーザーにフィードバックを提供する必要があります。まずは、エラーがあるので注意が必要だ、ということだけユーザーに伝わるようにしてみましょう。単純なライブリージョンに、エラーメッセージを含めれば十分です。</p><p>ひとまず以下のようにマークアップします。submitボタンの<em>すぐ上に</em>ライブリージョンを配置している点に注目してください。送信の操作の際、ユーザーはsubmitボタンに注目しているはずなので、エラーに注意を促すにはこの場所が最適です。ユーザーはコンテンツを拡大できる（そして、実際に拡大するでしょう！）ということを忘れないでください。そのため、エラーがフォームの上に表示されると、現在のビューポート内に表示されない可能性があります。</p><pre><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"error"</span> <span class="token attr-name">aria-live</span><span class="token attr-value"><span class="token punctuation">=</span>"assertive"</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span>"alert"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>"submit"</span><span class="token punctuation">&gt;</span></span>登録する<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></code></pre><p>以下のようなスクリプトでライブリージョンにエラーメッセージを入れます。</p><pre><code class=" language-javascript"><span class="token keyword">var</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span>getElementById<span class="token punctuation">(</span><span class="token string">'register'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
form<span class="token punctuation">.</span>addEventListener<span class="token punctuation">(</span><span class="token string">'submit'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>errors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        event<span class="token punctuation">.</span>preventDefault<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 送信させない
</span>        document<span class="token punctuation">.</span>getElementById<span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">'登録情報が正しいことを確認してください。'</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4>ビジュアルデザイン</h4><p>この<code>#error</code>ライブリージョンは、エラーメッセージが入れられた場合のみ表示されるようにする必要があります。初期状態で空のボックスが表示されない（そしてフォームのレイアウトに影響を与えない）ようにするには、<code>:empty</code>疑似クラスを使用します。</p><pre><code class=" language-css"><span class="token selector">#error:empty </span><span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre><p>一般的にエラーは赤で表示されるので、メッセージボックスに赤い枠をつけるか、背景を赤にするとよいでしょう。ただし、赤という色が、エラーであることを示す唯一の視覚的特徴にならないように注意してください。スクリーンリーダーユーザーや、色を見分けられない環境の人々も同時にサポートするために、メッセージの頭に警告アイコンを追加して、代替テキストを含めます。</p><pre><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"error"</span> <span class="token attr-name">aria-live</span><span class="token attr-value"><span class="token punctuation">=</span>"assertive"</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span>"alert"</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span>"img"</span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation">=</span>"エラー:"</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>use</span> <span class="token attr-name"><span class="token namespace">xlink:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span>"#error"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>use</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">&gt;</span></span>
        登録情報が正しいことを確認してください。
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></code></pre><p><img src="images/forms_error.png" alt="色が着いた背景の上に白文字で書かれた「登録情報が正しいことを確認してください。」というエラーメッセージがあり、その頭に、感嘆符を三角形で囲んだ警告アイコンが表示されている。"/></p><p>フォームの送信イベントが抑止され、ライブリージョンにエラーメッセージが入ると、<code>:empty</code>疑似クラスにマッチしなくなり、displayの状態が<code>none</code>から<code>block</code>に切り替わります。ライブリージョンにDOMコンテンツが入ることは、同時に、スクリーンリーダーがコンテンツを読み上げるトリガーにもなり、アイコンの代替テキストも含めて、「エラー：登録情報が正しいことを確認してください」とアナウンスされます。<a href="https://www.w3.org/TR/wai-aria-1.1/#img"><span class="link"><code>img</code></span></a>というARIAロールと<code>aria-label</code>により、この<code>&lt;svg&gt;</code>要素は、「エラー：」という<code>alt</code>属性が指定された<code>&lt;img/&gt;</code>要素のようにふるまいます。</p><p>ライブリージョンでエラーの存在を宣言することのメリットは、ユーザーに移動してもらわなくてもエラー情報に注意を促せる点です。エラーになっている入力欄にフォーカスを移すことで、フォームエラーをユーザーに警告するという方法もよく見られます。しかし、このお節介とも言える唐突なアプリケーション内での位置移動は、ユーザーを混乱させる恐れがあります。今回のようにライブリージョンを利用すると、ユーザーはsubmitボタンにフォーカスを合わせた状態を維持でき、自分のペースで自由にフォームに戻ってエラーを修正することができます。</p><h3>何を修正する必要があるのか</h3><p>これで安心してエラーのあるフィールドを扱うことができるようになります。各フィールドについて、すべての（といっても常識の範囲内で）ユーザーに利用できる形で、以下の2つの情報を提供する必要があります。</p>
<ol>
<li>そのフィールドがエラーになっていること</li>
<li>何をすれば有効な入力になるか</li>
</ol>
<p>このパターンは、エラーになっている入力欄それぞれに対し、エラーの説明文言が異なる以外は共通のものを適用します。パスワード入力欄を例にしてみましょう。(1) については、広くサポートされている<a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-invalid_attribute"><span class="link"><code>aria-invalid</code></span></a>属性を使うことができます。</p><pre><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span>"password"</span><span class="token punctuation">&gt;</span></span>パスワード<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>"password"</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"password"</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>"password"</span> <span class="token attr-name">aria-invalid</span><span class="token attr-value"><span class="token punctuation">=</span>"true"</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>"checkbox"</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"showPassword"</span><span class="token punctuation">&gt;</span></span>パスワードを表示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span></code></pre><p>これだけです。ユーザーがフォームに戻ってこの入力欄にフォーカスを合わせると、スクリーンリーダーは「正しくない入力内容」などと読み上げます。</p><p>この<code>aria-invalid</code>属性を、視覚表示の提示に利用することもできます。<code>aria-invalid="true"</code>を視覚的なスタイルに結びつけることで、スタイルと状態を別々に管理する必要がなくなります。多くの場合、それらの関係を分離するのは有益なことですが、フィールドがエラーとマークされている場合は、常にエラーであるように<em>見える</em>べきです。状態（state）に対して属性セレクタを使用すると、インターフェイスの基本機能と見た目を確実に同期させることができます。</p><pre><code class=" language-css"><span class="token selector">[aria-invalid="true"] </span><span class="token punctuation">{</span>
    <span class="token property">border-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
    <span class="token property">background</span><span class="token punctuation">:</span> url('images/warning-icon.svg') center right<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre><p><strong>【MEMO】</strong>色覚異常のユーザーは<code>border-color</code>が赤になったことを知覚できないことがあるため、背景画像としてアイコンを含めています。</p><p>フィールドがエラーであるとわかっても、その修正方法がわからなければ、ほとんど意味がありません。そうならないように、説明を付け加えてみましょう。このケースでは、パスワードが6文字に満たないために無効とされています。</p><pre><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span>"password"</span><span class="token punctuation">&gt;</span></span>パスワード<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>"password"</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"password"</span> <span class="token attr-name">aria-invalid</span><span class="token attr-value"><span class="token punctuation">=</span>"true"</span> <span class="token attr-name">aria-describedby</span><span class="token attr-value"><span class="token punctuation">=</span>"password-hint"</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"password-hint"</span><span class="token punctuation">&gt;</span></span>パスワードは6文字以上にしてください。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>"checkbox"</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"showPassword"</span><span class="token punctuation">&gt;</span></span> パスワードを表示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span></code></pre><p><img src="images/forms_field_error.png" alt="パスワード入力欄のすぐ下に色付きの文字のエラーメッセージが表示されており、その頭には警告マークかついている。"/></p><p>この<code>#password-hint</code>要素は、<a href="https://www.w3.org/TR/wai-aria-1.1/#aria-describedby"><span class="link"><code>aria-describedby</code></span></a>属性に<code>password-hint</code>という<code>id</code>を指定することによって、入力欄に結びつけられています。この説明文を結びつける方法は、ラベルとそっくりです。ラベルとの唯一の違いは、読まれる順番です。この説明文は最後に読まれます。スクリーンリーダーユーザーが入力欄にフォーカスを合わせると、ラベル、現在入力されている値、入力欄のタイプ、状態についての情報（エラーであること）が読まれた後に、アクセシブルな説明文が読み上げられることになります。すべてのピースがしかるべき場所に収まりました。</p><h3>ルーチンの再実行</h3><p>しゃれたフォーム検証スクリプトの中には、テキストを入力している時にリアルタイムでフィードバックを提供し、入力している内容が有効かどうか、入力している<em>最中に</em>知らせてくれるものもあります。しかし、こうしたスクリプトは管理が非常に難しくなることがあります。特定の文字数が必要なエントリーでは、最初の何回かのキーストロークの間は<em>常に</em>無効なエントリーとみなされてしまうからです。では、いつ、どの程度の頻度でユーザーにフィードバックを提供すればよいのでしょうか？</p><p>ここでは、ひっきりなしにお客様の元に行ってじゃまをするような横暴なウェイターにはなりたくないので、入力時点ではエラーを出さないようにしました。そのかわり、<em>送信しようとした後に</em>エラーが存在した場合のみ、ユーザーに知らせるようにしています。</p><p>ユーザーがいったんエラーの<em>修正作業</em>に積極的に取り組みはじめたら、この情報がきっと役に立つことでしょう。エラーとマークされたフィールドについて、<code>input</code>イベントが発生するたびに検証ルーチンを実行し、<code>aria-invalid</code>を適宜<code>true</code>から<code>false</code>に切り替えます。</p><pre><code class=" language-javascript"><span class="token keyword">var</span> password <span class="token operator">=</span> document<span class="token punctuation">.</span>getElementById<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
password<span class="token punctuation">.</span>addEventListener<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    validate<span class="token punctuation">(</span>this<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4>debounceを使用する</h4><p>タイピングの速いユーザーの場合、先ほどの<code>validate()</code>関数が頻繁に実行されることになります。これはパフォーマンスの問題を引き起こすだけでなく、ライブリージョンのエラーメッセージが繰り返し更新される実装になっている場合、スクリーンリーダーは80年代のリミックスモードに入ります。「パ、パス、パ、パスワード、パスワードは6文字以上にしてください」などと読み上げられることになります。</p><p><code>validate()</code>関数は、ユーザーが何もしていないときだけ呼び出されるようにしましょう。debounceによって、一連のkeypressイベントのかたまりをブロックに割り当て、ブロックごとに<code>validate()</code>を実行することができます。</p><p>Lodashの<a href="https://lodash.com/docs#debounce"><span class="link"><code>_.debounce</code></span></a>ユーティリティには、<code>wait</code>パラメーターを渡すことができます。今回は、一連のキーストロークから次のキーストロークまでの平均的な休止間隔として想定される時間よりも、わずかに短くなるように設定しましょう。debounceを使うと、単一の関数をブロックの開始時（<code>leading</code>）や終了時（<code>trailing</code>）に実行することができます。ここでは、ユーザーが入力をやめたときにのみ検証が行われるようにしましょう。そのためには、<code>options</code>に渡すオブジェクトの中で、<code>options.leading</code>を<code>false</code>、<code>options.trailing</code>を<code>true</code>に設定します。</p><pre><code class=" language-javascript"><span class="token keyword">var</span> password <span class="token operator">=</span> document<span class="token punctuation">.</span>getElementById<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> handleInput <span class="token operator">=</span> _<span class="token punctuation">.</span>debounce<span class="token punctuation">(</span>validate<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> this<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    leading<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    trailing<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
password<span class="token punctuation">.</span>addEventListener<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> handleInput<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>実際にフィールドごとにライブリージョンを実装してフィードバックを提供すべきかどうかは、考え方次第です。確かに、フィードバックがなければ、入力されている内容が有効なものなのか、エラーなのかを即座に知ることはできません。しかし、それとは別に<code>aria-invalid</code>属性も<code>true</code>に設定されるでしょうから、ユーザーがフィールドから離れて再度フォーカスを合わせれば、入力内容がエラーかどうか知ることができます。また、大半のスクリーンリーダーには、要素の情報を再度読み上げるためのショートカットが用意されています。たとえばNVDAでは、<em>Insert</em>+<em>Tab</em>キーを押すと、フォーカスのあるパスワード入力欄の情報が再度が読み上げられます。</p><h2 id="section6">マイクロコピーライティング</h2><p>これまでと同様、コードとビジュアルデザインだけでなく、言葉の選択にも配慮する必要があります。ラベルや操作指示の出来によって、フォームを最後まで入力してもらえるか、離脱されてしまうかが大きく左右されます。特に、投票に必要な登録など重大なサービスを開発している場合は、十分に注意しなければなりません。</p><p>ビル・ビアード（Bill Beard）による記事「<a href="https://www.smashingmagazine.com/2013/06/five-ways-prevent-bad-microcopy/"><span class="link">Five Ways To Prevent Bad Microcopy</span></a>」に記されたキーポイントを紹介します。</p><blockquote>
<ol>
<li>自分自身で考えるのではなく、ユーザーのことを知るようにしましょう。</li>
<li>ユーザーは人間です。それを前提に語り掛けましょう。</li>
<li>コピーはあくまでガイドとして使用し、頼りすぎないようにしましょう。</li>
<li>あらゆる機会をブランディングの機会ととらえましょう。</li>
<li>コンテンツが王であるなら、コンテキストは女王です。</li>
</ol>
</blockquote>
<p>どれも優れたアドバイスで、この記事の全文を読むことをおすすめします。しかし、私が強調したいのは、ビルが唱える4つめのポイントです。</p><blockquote><p>「ブランドのトーンや声は、コピーを書くときに必ず考慮する必要がありますが、ユーザーが行動を起こそうとしているときは、<strong>じゃまをすべきではありません</strong>。」</p></blockquote><p>言い換えれば、<em>ユーザビリティよりもブランドを優先させてはいけない</em>ということです。WCAGは、<a href="https://www.w3.org/TR/UNDERSTANDING-WCAG20/navigation-mechanisms-descriptive.html"><span class="link">達成基準2.4.6「見出し及びラベル」</span></a>で「見出し及びラベルは、主題又は目的を説明している」と述べており、公式にビルの意見に同調しています。奇抜なブランディングのコピーは、率直で分かりやすい言い回しからかけ離れ、ユーザーを混乱させたり憤慨させたりすることがあります。</p><p>たとえば、さきほどの登録フォームのパスワードのラベルを例に考えてみましょう。もしこのフォームが、オンラインファンタジーRPGのものだったなら、このフィールドを「秘密の合言葉」「解錠の呪文」「神秘の祝詞」などとラベルづけしたくなるかもしれません。どれも「パスワード」より示唆に富んだラベルですが、ユーザーには実際に何を聞かれているのかわからず、さまよい続けることになる危険性があります。</p><h2 id="section7">まとめ</h2><p>この章ではフォームのパターンを検討し、インクルーシブなフォーム開発に必要な一般的なことを説明しました。できるだけ多くのユーザーがWebサイトやアプリケーションにアクセスし、参加できるようにするには、標準のフォーム要素を使用し、効果的なラベルづけを行い、エラーの修正をしやすくする必要があります。フォームをシンプルに保ち、不快な体験――消えてしまうラベルや、確認することができないパスワードなど――を避けることで、ただ使えるというだけでなく、多少なりとも快適に入力できるフォームにすることができました。まあ少なくとも、<em>不</em>快なだけのフォームにはなっていないでしょう！</p><h3>避けるべきこと</h3><ul><li><em>最初</em>に読む必要のあるコンテンツを、ソースの最後に配置する。</li><li>非常にわかりにくい入力フォーカススタイル。</li><li>欠けていたり、非表示になっていたり、関連づけされていないラベルや説明。</li><li>フォームフィールドと関連づけられていない、<code>&lt;form&gt;</code>コンテキストの非インタラクティブなコンテンツ。<div class="translator_note" id="translator_note3634"><h4>訳註</h4><p>スクリーンリーダーでフォームを利用する際、フォームフィールドから次のフィールドへ直接ジャンプして入力していくことがあります。この際、インタラクティブ要素にはフォーカスが当たり、関連づけられている要素も読まれますが、関連づけされていない要素は見逃されてしまうことがあります。</p></div></li></ul>
</div>

</body></html>