<?xml version='1.0' encoding='UTF-8' ?>
<html xml:lang="ja" xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><title>3章：パラグラフ</title><link rel="stylesheet" href="css/book.css" type="text/css"/><meta name="EPB-UUID" content="f9202370-6e5d-44d5-b924-02b34d51163d"/></head><body><div class="body"><h1>3章：パラグラフ</h1><p>まずは小さなところから。ブラッド・フロスト（Brad Frost）の<a href="http://bradfrost.com/blog/post/atomic-web-design/#atoms"><span class="link">アトミックデザイン</span></a>では、パラグラフ（段落）は<em>原子</em>にあたります。複雑なパターン（<em>分子</em>、<em>有機体</em>、<em>ページ</em>）を作成するための、これ以上分割できない基本単位です。</p><p>「一枚の絵は千の言葉に値する」と言う人もいますが、私はその反対の「絵に言葉の仕事をさせてはならない」という表現の方が好きです。テキストは、情報を伝えるのに最も直接的で効果的な方法であり――ただし、学習障害のある人や読み書きが困難な人にとっては、画像やその他の媒体にはテキストにない価値がありますが――、<em>第一の</em>手段として扱うべきです。これは、美辞麗句の多い長文を公開する場合にも、アプリケーションが出す個々の説明やメッセージを各所に記述する場合にも当てはまります。</p><p>インタラクティブな仕組みを構築するという楽しい機会がたくさんあると、本文テキストのデザインをおろそかにしてしまいがちです。また、読みやすければそれだけでインクルーシブだというわけではなく、ズーム機能やインラインハイパーリンクといったインタラクティブな機能についても考える必要があります。
</p><h2 id="section1">書体</h2><p>本文テキストをどのような書体にすると読みやすいかについては、相反する多数の意見があります。よく支持されている意見のひとつは、セリフ書体よりサンセリフ書体の方が読みやすいというものです。とはいえ、形式上はサンセリフであっても、耐えがたいほど読みにくいフォントをデザインすることも十分可能です。</p><p>書体を検討する際は、従来からの知恵に頼るのではなく、以下について考えるべきです。</p><ul><li> 理解の邪魔になる装飾がないか？</li><li> 各種の文字のメトリクス（<a href="https://en.wikipedia.org/wiki/X-height"><span class="link">x-height</span></a>など）に一貫性があるか？</li><li> 個々の文字の形がはっきり区別でき、他の文字と紛らわしくないか？</li><li> その書体は、必要とされるすべての文字とフォントスタイルをサポートしているか？</li></ul><p><a href="http://bdatech.org/what-technology/typefaces-for-dyslexia/"><span class="link">英国ディスレクシア協会（British Dyslexia Association）は、読みやすさを向上できるいくつかの特徴に言及しています。</span></a>彼らの研究では、アセンダ（<em>d</em>の縦線など）とディセンダ（<em>y</em>の下向きの線など）が大きい方が、ディスレクシア（難読症）の人たちにとって読みやすいことがわかりました。また、<em>d</em>と<em>b</em>が完璧な鏡文字では<em>ない</em>こと、<em>I</em>（大文字のI）と<em>l</em>（小文字のl）と<em>1</em>（数字の1）がはっきりと区別されていることも読みやすさにつながります。カーニング（文字間のスペース）は適度に空けた方が読みやすくなり、特に<em>r</em>と<em>n</em>の間隔については顕著です。間隔が狭すぎると「modern」は「modem」と読めてしまいます。</p><p><img src="images/paragraph_db.png" alt="dとbの文字のセットが2つ並んでいる。1つめのセットはセリフ体であり、dとbは鏡文字ではなく区別がつく。"/><br/><em>サンセリフフォントは一般に読みやすいと考えられていますが、簡素であるため、似た字形になりやすいという特徴があります。</em></p><p>これらを考慮すると、理解できるようにするためは、十分かつ過剰ではない情報を提供することが重要です。複雑すぎるとみなされているセリフ書体も、文字を区別するために意図的に使えば、実際に読みやすくなることがあります。</p><p>ディスレクシアなど、読むことに障害がある人に<em>読みやすい</em>テキストは、障害がない人にも<em>好ましい</em>テキストです。このことに注目するのは重要です。平均的なユーザーなら読めそうな書体を選ぶということは、ユーザーの一部を意識的に疎外するということです。そうではなく、<em>読むことに困難を抱える人</em>にも読みやすい書体を選ぶことで、すべての人が読みやすくなります。これが効果的で効率的なインクルーシブデザインです。</p><blockquote><p>平均的ユーザーは、すべてのユーザーを組み合わせて作られます。実際に出会うユーザーとはまったく異なります。平均的ユーザーのようなユーザーなど存在しません。この作り物の個体に合わせてデザインするということは、誰のニーズにも合わないものを作っているということです。
—「Designing for the extremes」、スサーナ・ゴンザレス・ルイス（Susana Gonzalez Ruiz）</p></blockquote><p>「<a href="http://sugoru.com/2013/07/14/designing-for-the-extremes/"><span class="link">Designing for the extremes</span></a>」というすばらしい記事で指摘されているように、極端な状況のユーザーを想定したデザインは、すべての人により良いサービスを提供できます。この記事では帯域幅の例も取り上げ、信頼性が低いモバイルネットワークで高い性能を発揮できるWebアプリケーションは、どこでも高い性能を発揮できるとしています。</p><p><img src="images/extremes_venns.png" alt="2つのベン図。1つめのベン図は、低質なネットワークを利用している人が、高性能Webサイトのメリットを享受する人の部分集合であることを示している。2つめのベン図は、ディスレクシアの人が、読みやすいフォントのメリットを享受する人の部分集合であることを示している。"/></p><p>ただし、極端なケースを分けて考えたり、特定のグループをターゲットにしたりしないことが重要です。<a href="http://dyslexiahelp.umich.edu/sites/default/files/good_fonts_for_dyslexia_study.pdf"><span class="link">スペインで実施された、ディスレクシアの人々に対してフォントの読みやすさを調査した研究</span></a>では、ディスレクシアの読者<em>専用に</em>デザインされた書体の成績が非常に悪い結果になりました。書体デザイナーが、良かれと思ってターゲットの読者を少し一般化しすぎたと考えられます。この結果、彼らはディスレクシアの読者の大部分を疎外しただけではなく、誰にとっても「不格好で読みにくい」フォントを作ってしまったのです。「<a href="http://www.fastcodesign.com/3038596/fast-feed/a-typeface-for-dyslexics-dont-buy-into-the-hype"><span class="link">A Typeface For Dyslexics? Don’t Buy Into The Hype</span></a>」では、Lucidaフォントの作
者であるチャック・ビゲロウ（Chuck Bigelow）の調査でこの説が裏づけられています。</p><h2 id="section2">組版</h2><p>インクルーシブな書体を選択したら、優れた文字組みでその良さを発揮させる必要があります。インクルーシブな組版は、読みやすさを向上します。これは、使用している書体に合ったカラム幅、均等割り付けの有無、行送りを選択する作業です。ビゲロウなどによると、これらの対策はフォントの選択よりもさらに大切であるようです（もちろん涙が出るほど読みにくいフォントでなければの話です）。</p><h3>カラム幅</h3><p>パラグラフのカラム幅とは、1行の長さ、文字数のことです。均等割り付けされていないテキスト（後述の「均等割り付け」を参照）では、これはバラバラになります。このため、サンプルパラグラフにおける最も長い行を測るようにします。行が長すぎると、行末まで読んだ後、次の行の行頭を探すのが大変になるため、読みにくくなります。また、行が短すぎると、視線を頻繁に素早く往復させなくてはならなくなります――読む人はすぐに疲れてしまいます。</p><p>ロバート・ブリングハースト（Robert Bringhurst）は著書『<em>The Elements of Typographic Style</em>』の中で、カラム幅を45～75文字にすることを推奨しています。CSSでは、1remが書体の小文字<em>m</em>の幅にほぼ該当します。このため、幅が60remのパラグラフはカラム幅が60字分であると言うことができ、ちょうど読みやすい幅に収まります。</p>
<div class="translator_note" id="translator_note0617"><h4>訳註</h4><p>WCAG 2.0の達成基準「1.4.8 視覚的提示」では、幅が80字を越えないようにすることを求めており、ここではWCAG 2.0の基準よりも少しだけ厳しい基準を推奨していることになります。なお、WCAG 2.0では、全角文字の場合には40字を基準としています。全角文字の場合には、ここで挙げられている数字を半分にして考えてください。</p><h5>参考</h5><ul><li><a href="http://waic.jp/docs/UNDERSTANDING-WCAG20/visual-audio-contrast-visual-presentation.html">視覚的提示: 達成基準 1.4.8 を理解する</a></li></ul></div>
<div class="translator_note" id="translator_note0618"><h4>訳註</h4><p>欧文組版における"em"の元々の意味は、小文字ではなく大文字"M"の文字幅です。</p><p>CSSの定義では、1emはその要素のfont-sizeと同じ値、1remはルート要素（html要素）のfont-sizeと同じ値になります。html要素のfont-sizeが16pxであれば、1remは16pxです。これは行の高さに等しく、ほとんどのフォントでは、小文字mよりも大文字Mの幅に近いものになるでしょう。</p><h5>参考</h5><ul><li><a href="https://www.w3.org/TR/css3-values/#font-relative-lengths">CSS Values and Units Module Level 3 - 5.1.1. Font-relative lengths: the ‘em’, ‘ex’, ‘ch’, ‘rem’ unit</a></li></ul></div>
<p>パラグラフの幅を直接設定するのはかしこい方法ではありません。レスポンシブなモジュール式のレイアウトでは、コンテナ要素の幅に応じた改行が必要だからです。これを念頭に置いて、コンテナが想定した幅を超えないようにレイアウトを調整しましょう。たとえば、<code>&lt;main&gt;</code>要素に適切な<code>max-width</code>を指定すると良いでしょう。</p><pre><code class=" language-css"><span class="token selector">main </span><span class="token punctuation">{</span>
    <span class="token property">max-width</span><span class="token punctuation">:</span> 60rem<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre><p>こうしておけば、ルートのフォントサイズを大きくするメディアクエリを適用した場合にも有効です。カラム幅がフォントサイズに比例して調整されるためです。例として、幅が広いデスクトップの画面でフォントサイズを大きくしたい場合、このカラム幅――フォントサイズに相対的な単位（rem）で定義された値――がいっしょに大きくなってくれます。</p><pre><code class=" language-css"><span class="token selector">html </span><span class="token punctuation">{</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">main </span><span class="token punctuation">{</span>
    <span class="token property">max-width</span><span class="token punctuation">:</span> 60rem<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token atrule">@media (min-width: 120rem) </span><span class="token punctuation">{</span>
    <span class="token selector">html </span><span class="token punctuation">{</span>
        <span class="token property">font-size</span><span class="token punctuation">:</span> 150%<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<div class="translator_note" id="translator_note0625"><h4>訳註</h4><p>この例は、横幅1920px以上のワイドディスプレイでは文字サイズを大きくする、という意図のメディアクエリを追加したものです（文字サイズが16pxのとき、120remは1920pxになります）。mainの横幅をremで指定しておけば、このようなメディアクエリを後から追加しても整合性を保つことができます。しかし実際にこのスタイルをそのまま使うと、ユーザーが文字サイズを変更する際、文字を大きくすると逆に小さくなってしまうという不可解な現象が発生してしまいます。このままでは使いにくいでしょう。</p><p>なお、ここではメディアクエリの幅指定にremを使っていますが、本書の「ドキュメント全体」の章ではremではなくemを使うべきだという話も出ていますので、あわせて参照してください。</p></div>
<p>このような美しい相対化によって、インクルーシブなカラム幅を設定した上で、さらにレスポンシブなレイアウト内に<em>確実に</em>収めることもできます。</p><h3>均等割り付け</h3><p>CSSで<code>text-align:justify;</code>を設定することで可能となる均等割り付けは、一般にWebコンテンツには推奨されない慣習です。均等割り付けとは、それぞれの行を同じ長さにすることを意味します。これによりパラグラフの見た目はすっきりしますが、読みやすさは大きく損なわれる可能性があります。ダジャレのようで申し訳ありませんが、私は均等割り付け（justification）の見た目が好きで、これを何度も正当化（justify）しようと試みてきました。私自身が、インクルーシブより見た目の美しさを優先しようとしていたのです。悪いやつですね！</p><p>テキストの均等割り付けを行うと、各行を同じ長さにするために、その行内で単語を再割り付けする必要があるため、単語間のスペースが不均一になって読みにくくなります。</p><p><img src="images/justification.png" alt="均等割り付けされた3段組のテキストの中で、単語間のスペースが大きい2箇所がハイライトされている。"/><br/><em>均等割り付けされたテキストは、図のようなカラムベースのレイアウトを行う場合など、カラム幅が狭いときに最悪の結果をもたらします。</em></p><p>デスクトップパブリッシングでは、ハイフネーションでこの問題を軽減できます。長い単語を分割し、より均等に再割り付けするのです。残念ながら、<a href="https://developer.mozilla.org/en/docs/Web/CSS/hyphens"><span class="link"><code>hyphens</code></span></a>で指定できるはずのCSSのハイフネーションは、ブラウザの実装がかなり貧弱な状況です。最も普及しているブラウザのひとつであるChromeは、ハイフネーションをまったくサポートしていません。さらに悪いことに、ハイフネーションを行う<a href="https://github.com/mnater/Hyphenator"><span class="link">JavaScriptのポリフィル</span></a>は、膨大なハイフネーションパターンの定義を参照する必要があるため、極度に重くなりがちです。ブラウザの中には、英語以外の言語でのハイフネーションをサポートしていないものもあります。</p>
<div class="translator_note" id="translator_note0644"><h4>訳註</h4><p>現在ではChromeはハイフネーションをサポートしています。2016年11月のChrome 55から、AndroidとMac上でハイフネーションをサポートするようになりました。残念ながらWindows上ではサポートされていません（2017年5月現在）。</p><h5>参考</h5><ul><li><a href="https://developers-jp.googleblog.com/2016/11/chrome-55-beta-input-handling.html">Chrome 55 ベータ版: 入力ハンドリングの改善と async / await 関数</a></li></ul></div>
<p>JavaScriptへの依存や、それに付随するパフォーマンス問題を避けつつ読みやすくするためには、<code>text-align</code>のデフォルトの値である<code>left</code>を使用することが好ましいでしょう。この結果、パラグラフの右側は不揃いになりますが、ユーザーは気にしないでしょう。彼らはコンテンツから情報を得るのに忙しいはずですから。</p>
<div class="translator_note" id="translator_note0647"><h4>訳註</h4><p>正確にいえば、text-alignの初期値はleftではありません。右から左に書く言語では、text-align: leftを初期値としてしまうと都合が悪いことになります。CSS1ではtext-alignの初期値は「UAに依存」とされており、CSS2では「書字方向が左から右ならleft、右から左ならrightとしてふるまう無名の値」という趣のある定義でした。CSS Text Module Level 3ではtext-align: startという値が指定できるようになり、これが初期値とされています。</p><h5>参考</h5><ul><li><a href="https://www.w3.org/TR/REC-CSS1/#text-align">Cascading Style Sheets, level 1 - 5.4.6 'text-align'</a></li><li><a href="https://www.w3.org/TR/CSS22/text.html#alignment-prop">Cascading Style Sheets Level 2 Revision 2 (CSS 2.2) Specification - 16.2 Alignment: the 'text-align' property</a></li><li><a href="https://www.w3.org/TR/css-text-3/#text-align-property">CSS Text Module Level 3 - 7.1. Text Alignment: the ‘text-align’ property</a></li></ul></div>
<h3>行送り（<code>line-height</code>）</h3><p>行送りは、各行の高さを決めるものです。ある行のベースラインと次の行のベースラインとの距離に相当します。W3CのWCAG 2.0アクセシビリティガイドライン<a href="https://www.w3.org/TR/WCAG20/#visual-audio-contrast-visual-presentation"><span class="link">1.4.8「視覚的提示」</span></a>では、パラグラフに「1.5文字分」の行送りを適用することを推奨しています。CSSでは、<code>line-height</code>プロパティで指定することができます。たとえば、フォントサイズが16pxだった場合、行送りを24px<em>以上</em>にします。しかし、2章「ドキュメント全体」で説明した通り、通常は、ピクセルなどの固定の単位の使用は推奨されません。読みやすい比率を維持するのが難しくなるからです。代わりに、<code>line-height</code>に単位のない比率の値を設定しましょう。</p><pre><code class=" language-css"><span class="token comment">/* (人生はあまりに短い)
p {
    font-size: 16px;
    line-height: 24px;
}
*/</span>

<span class="token selector">p </span><span class="token punctuation">{</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>
    <span class="token property">line-height</span><span class="token punctuation">:</span> 1.5<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<div class="translator_note" id="translator_note0658"><h4>訳註</h4><p>コード冒頭のコメントは、「フォントサイズごとにline-heightをいちいち計算して指定しなおすには、人生はあまりに短い」という主旨でしょう。</p></div>
<p>これで、パラグラフのフォントサイズが大きくなったり小さくなったりしても（メディアクエリによる変更の場合、ユーザーがフォントサイズの設定を変更した場合のいずれであっても）、読みやすくバランスのとれた行の高さになります。行の高さをピクセルベースで指定していた場合、結果は以下のようになります。</p><p><img src="images/fixed_line-height.png" alt="2つのパラグラフ。左は読みやすい行の高さになっている。右は、行の高さは同じだが文字が大きいため、各行が重なってしまっている。"/><br/><em>フォントサイズに比例しない行の高さは危険です。</em></p><h3>コントラスト</h3><p>なぜこれほど多くのデザイナーが、白の背景上に薄いグレーのテキストを好んで使うのか、私にはわかりません。読みやすさに問題が生じることはさておき、弱々しく見えます。どちらにしても、テキストと背景の色のコントラストを低くするのは避けるべきです。</p><p>プロジェクトの初期段階ではブランドカラーに縛られやすいため、作成後に色のコントラストをテストするのではなく、最初からアクセシブルなカラースキームをデザインすることをおすすめします。これには、フリーツールの<a href="http://www.dasplankton.de/ContrastA/"><span class="link">Contrast-A</span></a>（Flashが必要）や<a href="http://colorsafe.co/"><span class="link">Color Safe</span></a>などが役立ちます。残念ながらコントラストを考慮せずに色が選択されてしまった場合、<a href="https://www.paciellogroup.com/resources/contrastanalyser/"><span class="link">Color Contrast Analyser</span></a>などのツールを使えば問題のある領域を特定するのに役立つでしょう。ブランディングのリーダーに伝えるのが私の役割でなくてよかった！</p><p>あまり知られていませんが、コントラストが非常に高い場合も、一部のユーザーにとって<em>読みにくく</em>なります。<a href="http://irlen.com/what-is-irlen-syndrome/"><span class="link">光感受性症候群</span></a>（アーレン症候群とも呼ばれます）の人はまぶしさに敏感で、コントラストが強いとテキストがぼやけたり、動き回っているように見えることがあります。パラグラフのテキストと背景の色のコントラストは、少しひかえめにすることをおすすめします。</p><pre><code class=" language-css"><span class="token selector">main </span><span class="token punctuation">{</span>
    <span class="token property">background</span><span class="token punctuation">:</span> #eee<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">p </span><span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #222<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<div class="translator_note" id="translator_note0679"><h4>訳註</h4><p>光感受性症候群のユーザーだけでなく、ロービジョンで画面に目を近づけて閲覧するユーザーも、まぶしい画面を苦手とすることがあります。なお、高いコントラストが苦手な人は、モニタの輝度を調整したり、OSの機能で画面を白黒反転することができるため、コントラストが高い分には問題ないという考え方もあります。WCAG 2.0でも、真っ白と真っ黒の組み合わせを避けることは求めていません。Understanding WCAG 2.0では、低いコントラストを必要とするユーザーのためにコントラストを下げる機能を用意しても良いとしていますが、これは必須ではありません。</p><h5>参考</h5><ul><li><a href="http://waic.jp/docs/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html">コントラスト (最低限) : 達成基準 1.4.3 を理解する</a></li></ul></div>
<p>これから本書の中で繰り返し述べますが、一種類のユーザーだけにメリットがあるインクルーシブデザインというものはまずありません。皆さんにはこの機会に、「コントラストを弱めてくれてありがとう」と前もって言っておきますね。私は明るい光を見ると片頭痛になるのです。ご協力に感謝します。</p><h2 id="section3">インラインリンク</h2><p>CSSは祝福でもあり、呪いでもあります。創造力を働かせる自由をくれると同時に、<em>創造力を働かせてしまう自由もくれるのです</em>。あらゆるWebサイトとアプリの見た目が同じでなくてはならないとは言いませんが、根本から生じる慣習を壊そうとするくせが私たちにはあります。つまりこういうことです。技巧と装飾の世界においては、<em>実用性</em>こそが根本なのです。そして実用性は認知に依存しており、認知は慣習に依存します。秘訣は、個性を失わずに、慣習を取り入れることです。</p><p>異なるアフォーダンスのルールで動作する、ボタンのような行動喚起のリンクを除き、リンクにはアンダーラインを付加するのが慣習です。この慣習を取り入れることで、パラグラフテキスト内のリンクが見分けやすくなるだけでなく、インクルーシブデザインで重視すべき色覚異常の問題も軽減されます。色だけでインラインリンクを区別したのでは、一部の読者は周囲のテキストからリンクを見分けることができないので、別の手段が必要になるのです。</p>
<div class="translator_note" id="translator_note0694"><h3>訳註</h3><p>アフォーダンスとは知覚心理学・認知心理学の用語で、ある物に対してある行動ができるときに「アフォーダンスが存在する」という言い方をします。ユーザーがボタンを押すことができるとき、そこにはアフォーダンスが存在します。そこから転じて、その行動ができるということが想起されることを「アフォーダンスが存在する」という言い方をすることがあります。たとえば、ボタンが押せそうな形状になっていて、ユーザーが押せそうだと知覚するとき、押せるというアフォーダンスが存在する、という言い方をすることがあります。ここでは後者の意味で使われています。</p><p>なお、後者はドナルド・ノーマンが著書『誰のためのデザイン？ ―認知科学者のデザイン原論』で使ったことにより広まった用法ですが、元来の使い方からすれば誤用であり、後にノーマン自身が誤用を認め、この用法では「知覚されたアフォーダンス」とするか、あるいは「シグニファイア」という言葉を使うべきだとしています。</p><h4>参考</h4><ul><li><a href="https://ja.wikipedia.org/wiki/アフォーダンス">アフォーダンス - Wikipedia</a></li></ul></div>
<p>この理由から、すべてのブラウザはデフォルトで<code>text-decoration: underline</code>を適用してリンクテキストを表示します。そのため、インラインリンクのデザインは、<em>何もしない</em>のが完璧に良い解決策であるという典型例になります。しかし、<code>text-decoration: underline</code>をさらに改良することもできます。カスタムCSSを使用すれば、アンダーラインの象徴的な役割はそのままに、より優れた方法で実装できます。</p><h3>改良したリンクのアンダーライン</h3><p>アンダーラインは書体のベースラインのすぐ下につくことが多いため、<em>g</em>や<em>j</em>などの文字のディセンダをアンダーラインが横切り、リンクテキストが読みにくくなることがあります。できればアンダーラインはディセンダと交差せず、間隔が空いているのが理想です。<a href="https://medium.com/designing-medium/crafting-link-underlines-on-medium-7c03a9274f9#.hnbr08cjr"><span class="link">Mediumが一部を開発した解決策</span></a>は、CSSの背景グラデーションとテキストシャドウを使用して、まさにそれを実現しています。以下は私が手を加えたバージョンです。</p><pre><code class=" language-css"><span class="token selector">p a </span><span class="token punctuation">{</span>
    <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
    <span class="token property">text-shadow</span><span class="token punctuation">:</span> 0.05em 0 0 #fff, -0.05em 0 0 #fff,
        0 0.05em 0 #fff, 0 -0.05em 0 #fff,
        0.1em 0 0 #fff, -0.1em 0 0 #fff,
        0 0.1em 0 #fff, 0 -0.1em 0 #fff<span class="token punctuation">;</span>
    <span class="token property">background-image</span><span class="token punctuation">:</span> linear-gradient(to right, currentColor 0%, currentColor 100%)<span class="token punctuation">;</span>
    <span class="token property">background-repeat</span><span class="token punctuation">:</span> repeat-x<span class="token punctuation">;</span>
    <span class="token property">background-position</span><span class="token punctuation">:</span> bottom 0.05em center<span class="token punctuation">;</span>
    <span class="token property">background-size</span><span class="token punctuation">:</span> 100% 0.05em<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre><p><img src="images/improved_underline.png" alt="標準的なtext-decorationのアンダーラインと、優れたグラデーションテクニックの比較。グラデーション版は、黒い文字とグレーのアンダーラインの組み合わせになっている。"/><br/><em>カスタムのグラデーションベースのアンダーラインを使用すると、フォントの色とは独立してアンダーラインの色だけを変えることもできます。</em></p><p>この実装では、高さがわずか0.05emの<code>linear-gradient</code>の背景がアンダーラインを形成しています。テキストシャドウのおかげでアンダーラインはディセンダを横切らず、まるで堀が城を護っているかのように文字が保護されています。</p><p><code>text-decoration: underline;</code>とは異なり、このアンダーラインは調整可能です。<code>background-position</code>で垂直位置を調整したり、<code>background-size</code>で太さを調整したりして、書体が最も読みやすくなる方法を見つけることができます。ただし、グラデーション背景をサポートしていない古いブラウザには注意してください。以下のように<code>text-decoration</code>によるフォールバックで対応するべきでしょう。</p><pre><code class=" language-css"><span class="token selector">.ie-lte-9 a </span><span class="token punctuation">{</span>
    <span class="token property">text-decoration</span><span class="token punctuation">:</span> underline<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<div class="translator_note" id="translator_note0723"><h4>訳註</h4><p>これはIE9以下に対応させる場合の話で、&lt;!--[if lte IE 9]&gt;&lt;html class="ie-lte-9"&gt;&lt;![endif]--&gt; のような条件付きコメントが書かれていることを前提としています。これにより、IE9以下でhtml要素に"ie-lte-9"というクラスがつくようになります。</p><p>ここでは背景色を使った実装が紹介されていますが、CSS Text Decoration Module Level 3ではtext-decoration-skipというプロパティが提案されています。text-decoration-skip: inkを指定すると、文字と重ならないように下線が引かれる想定です。つい最近まで対応しているブラウザがほとんどない状況でしたが、2017年2月にChrome 57が対応し、現在のChromeでは使えるようになっています。今後、この指定に対応するブラウザが増えれば、シンプルにtext-decoration-skipを指定する方法が普及していくかもしれません。</p><h5>参考</h5><ul><li><a href="https://www.w3.org/TR/css-text-decor-3/#text-decoration-skip">CSS Text Decoration Module Level 3 - 2.5.  Text Decoration Line Continuity: the ‘text-decoration-skip’ property</a></li><li><a href="https://developers-jp.googleblog.com/2017/02/chrome-57-beta-css-grid-layout-improved.html">Chrome 57 ベータ版: CSS のグリッド レイアウト、ホーム画面に追加の改善、Media Session API</a></li></ul></div>
<h3>フォーカスを示す</h3><p>インクルーシブなインタラクションデザインへのアプローチのひとつに、ヒューマンインターフェイスデバイス（HID）の視点からインターフェイスを見るという方法があります。HIDとは、人間のユーザーが入出力を行えるさまざまな機器のことです。マウスもそのひとつです。その他には、キーボード、タッチディスプレイ、点字端末、<a href="http://www.bltt.org/hardware/joysticks.htm"><span class="link">ジョイスティック</span></a>、<a href="https://en.wikipedia.org/wiki/Switch_access"><span class="link">スイッチ</span></a>などがあります。インクルーシブにデザインするということは、これらをできるだけ広くサポートし、それが不可能な場合には、代替のコンテンツやインタラクションメカニズムを提供することです。</p><p>キーボードで要素にアクセスできるようにするのは、非常に簡単です。</p><ul><li> 要素をフォーカス可能にする。</li><li>フォーカス可能な要素を見えるようにする。</li><li> 要素のフォーカス状態を見えるようにする。</li></ul><p>リンクは、1章「はじめに」で触れた<code>&lt;button&gt;</code>要素と同様に、暗黙的にフォーカス可能です。ブラウザの標準の動作のおかげで、ユーザーが<em>Tab</em>キーを押すと、ドキュメント内で次にフォーカス可能な要素である、<code>href</code>属性を持つ<code>&lt;a&gt;</code>要素にフォーカスが移動します。これでそのリンクが操作可能になり、<em>Enter</em>を押せばリンクをたどることができます。</p><p>とはいえ、リンクにフォーカス状態を示すスタイルが適用されていなければ、ユーザーには現在どの要素がフォーカスされているのかわかりません。そこで登場するのが<em>フォーカスのスタイル</em>です。ブラウザには、点線のアウトラインやぼんやりとした青い光の輪など、それぞれ独自のフォーカススタイルがあります。これらのデフォルトのスタイルは置き換えることができますが、単に削除するのは<em>絶対に</em>避けてください。<code>background-color</code>を使用することで、パラグラフのリンクのフォーカススタイルを強調すると同時に、各ブラウザでの見た目をそろえることができます。</p><pre><code class=" language-css"><span class="token selector">p a:focus </span><span class="token punctuation">{</span>
    <span class="token property">outline</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> #cef<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre><p><img src="images/focus_styles.png" alt="基本的な点線のアウトラインによるフォーカススタイルと、背景色によるフォーカススタイルの比較。"/><br/><em>要素のうしろが背景色で塗りつぶされます。一部のブラウザがデフォルトで提供する点線のアウトラインよりも、要素間でのフォーカスの移動がわかりやすくなります。</em></p><p>この方が、多くのブラウザでデフォルトで使用される薄い点線のアウトラインよりも明確です。これは、イギリス政府の公式Webサイト、<a href="https://www.gov.uk/"><span class="link">GOV.UK</span></a>が実装しているスタイルです。イギリスの全国民に対して利用可能にするという責任を自覚した、インクルーシブなサービスデザインの模範と言えます。</p>
<div class="translator_note" id="translator_note0749"><h4>訳註</h4><p>2017年5月現在、実際にgov.ukが採用している色は#ffbf47で、オレンジに近い色です。また、画像や入力欄では背景色ではなく枠がつくなど、さまざまな処理が追加されています。</p></div>
<p>フォーカススタイルの課題は、インタラクティブな要素の数や種類が増えるにつれ、今後もさまざまな形で現れてくることでしょう。</p><h2 id="section4">自動化されたアイコン</h2><p>Webサイトの更新や運用を行う人々の中には、技術に詳しくなかったり、ビジュアルデザインに自信がない（そもそも興味がない）人もいます。インクルーシブな編集システムを整備して、編集者がフォーマットを考えたり、コードを書いたりしないで済むようにする必要があります。そうすれば、編集者は何かを壊すのではないかと恐れることなく、自分の得意とする作業を進めることができます。</p><p>高度なCSSを少し取り入れると、次の2点においてインクルーシブな形で、パラグラフテキスト内にアイコンを入れることが可能になります。</p><ul><li> 編集プロセスを複雑にしない。</li><li>アクセシブルな情報をユーザーに提供する。</li></ul><p>別のドメインにある外部リソースにリンクする場合、そのリンクをたどると現在のコンテキストから外れることをユーザーに伝えた方が親切です。特に、現在のサイトの機能やレイアウトに慣れているであろうスクリーンリーダーユーザーにとっては役に立ちます。つまり、「いったい今どこにいるんだ？」という状態を避けるということです。</p><h3>外部リンクを特定する</h3><p>最初のステップは、どのリンクが外部リンクかを特定することです。<code>href</code>の値が<em>http</em>で始まり（つまり相対リンクではない）、<em>かつ</em>、現在のドメインにリンクしていないすべてのリンクが対象になります。私のブログのドメインは<em>heydonworks.com</em>なので、セレクタを次のように組み立てます。</p><pre><code class=" language-css">[href^=<span class="token string">"http"</span>]<span class="token punctuation">:</span>not([href*=<span class="token string">"heydonworks.com"</span>])</code></pre><p>説明すると、このセレクタは「<code>href</code>の値が<em>http</em>で始まり、<em>heydonworks.com</em>という文字列を含まないリンク」と言っています。</p><h3>アイコンの提供</h3><p>先ほど述べたように、インクルーシブな編集体験とは、編集者がよくわからないことを考えたり作業したりすることを求められないということです。その場合、編集者にアイコン画像をアップロードしてリンクするよう頼むのは避けたいですし、ましてや、ソースを編集して各外部リンクに<code>class</code>属性を追加してもらうことなど頼めません。代わりに、CSSの疑似要素を使用して、セレクタにマッチしたものにアイコンを自動的に追加することができます。</p><pre><code class=" language-css"><span class="token selector">[href^="http"]:not([href*="heydonworks.com"])::after </span><span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span>
    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url('path/to/external-icon.svg')</span><span class="token punctuation">;</span>
    <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>
    <span class="token property">background-position</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
    <span class="token property">background-size</span><span class="token punctuation">:</span> 75% auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre><p>ユーザーによって、またはメディアクエリでテキストのサイズが変更されたときに、これに合わせてアイコンのサイズが変更されるよう、相対的な単位による<code>width</code>と<code>height</code>、およびパーセンテージに基づく<code>background-size</code>が使用されていることに注目してください。</p><h3>代替テキスト</h3><p>あとは、リンクが外部であることをスクリーンリーダーのユーザーに知らせる、隠しテキストを追加するだけです。<code>content</code>プロパティを使い、レイアウトに影響せずに視界から消すためのルールを追加することで実装できます。</p><pre><code class=" language-css"><span class="token selector">[href^="http"]:not([href*="heydonworks.com"])::after </span><span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span>
    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url('path/to/external-icon.svg')</span><span class="token punctuation">;</span>
    <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>
    <span class="token property">background-position</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
    <span class="token property">background-size</span><span class="token punctuation">:</span> 75% auto<span class="token punctuation">;</span>
    <span class="token comment">/* 代替テキスト */</span>
    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'(外部リンク)'</span><span class="token punctuation">;</span>
    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
    <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>
    <span class="token property">text-indent</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span> <span class="token comment">/* アイコンの幅 */</span>
<span class="token punctuation">}</span></code></pre><p><a href="http://tink.uk/accessibility-support-for-css-generated-content/"><span class="link">疑似コンテンツ（ここでは「(外部リンク)」）はスクリーンリーダーで読み上げられないというのは、よくある誤解です。</span></a>すべてのスクリーンリーダーとブラウザの組み合わせが疑似コンテンツをサポートしているわけではありませんが、ほとんどはサポートしています。サポートしていない組み合わせでは、得られる情報量は少なくなりますが、破綻するわけではありません。</p>
<div class="translator_note" id="translator_note0798"><h4>訳註</h4><p>たとえば、Internet Explorer11+NVDAの組み合わせでは、contentプロパティで指定された「外部リンク」というテキストを全く読み上げません。この場合、そのリンクが外部リンクであることは分かりませんが、リンクを利用すること自体はできますので、その意味で破綻していないと言っています。</p></div>
<h2 id="section5">パラグラフの記述</h2><p>アクセシブルでわかりやすいコンテンツを実際に<em>書く</em>方法に触れずに、インクルーシブなパラグラフデザインについて語ることは許されないでしょう。コピーライティングは、様式や構図と同じくらいデザインを必要としますが、ビジュアルデザインが優位にある文化の中で、後回しにされがちです。実のところ、コピーライティングより重要性の低い、見た目の美しさや装飾が決定されるまで保留されてしまいます。</p><p>私は、<a href="http://alistapart.com/blog/post/content-first-design"><span class="link">コンテンツファーストデザイン</span></a>の信者です。
1章「はじめに」で概説した原則で述べたように、他のすべてのデザイン活動は、コンテンツやその構成を単に支えるものとして行うべきです。</p><p>難しいのは、アクセシブルなインタラクションの状態や色のコントラストといった対応とは異なり、アクセシブルな言葉遣いは簡単には評価できないということです。とは言え、パラグラフテキストに適用できる汎用的なガイドラインがいくつかあります。</p><ul><li>パラグラフ、文章、単語は短くする。「私はともに過ごすイヌ科の哺乳類を購入した」が「私は犬を買った」に勝ることはありません。</li><li><a href="https://ja.wikipedia.org/wiki/%E5%8F%97%E5%8B%95%E6%85%8B"><span class="link">受動態の文</span></a>に気をつける。多くの場合、より直接的な表現に書き換えることができます。回りくどく言う必要はありません。「ハリーがポークパイを食べた」と言えるのに、「ポークパイがハリーに食べられた」とする必要はありません。</li><li> 重複は避ける。たいていの場合、別の方法で同じことを二回言っても価値はありません。繰り返しはやめましょう（悪い例を実演してみました）。</li><li>文章やパラグラフの長さに変化をつける。単調さが軽減し、読む人を飽きさせません。</li></ul><p>本書で述べる多くのパターンに、優れたコピーデザインの重要性を理解することが含まれています。たとえば4章「ブログ記事」では、<a href="https://en.wikipedia.org/wiki/Flesch%E2%80%93Kincaid_readability_tests"><span class="link">Flesch-Kincaidスケール</span></a>を指標としたコンテンツの読みやすさのテストについて触れています。ここではまず、<em>コンテンツ以外のすべては補強である</em>、ということを覚えておいてください。したがって、プロトタイプおよび実用最小限のプロダクトは、<em>実際の</em>、できれば十分に練られたコピーを含み、ユーザーがテストできる状態になっているべきです。根本から正しいものを作ろうとするのであれば、タイポグラフィでもレイアウトでもカラースキームでも<em>なく</em>、しっかりとしたコンテンツを作ってください。</p><h2 id="section6">まとめ</h2><p>地味なパラグラフテキストのデザインには、みなさんが最初にイメージしていたよりも、おそらくたくさんのことが含まれています。書体、行送り、カラム幅、行端揃え、コントラスト、フォーカス状態の表示などを学ぶことで、非常に多様なユーザーに合ったパラグラフを作るための、正しい第一歩を踏み出しました。視力制限、ディスレクシア、アーレン症候群であったり、識字能力に問題があったり、ITリテラシーが低い人々に影響すると分かっている特定の問題に対処することで、快適に読んだり、操作したりできる体験をほぼすべての人に提供できます。</p><h3>避けるべきこと</h3><ul><li>伝達することではなく、印象づけることを目的にデザインした言葉遣いや書体</li><li>長すぎる、または短すぎるカラム幅</li><li>デフォルトの白地に黒ではない、十分に高いコントラスト</li><li><code>outline:none;</code>を使用してフォーカススタイルを削除</li></ul>
<div class="translator_note" id="translator_note0829"><h4>訳註</h4><p>本文の「コントラスト」の箇所ではデフォルトの白地に黒は避けてコントラストを調整することを推奨しています。なぜか避けるべきことのリストに入っていますが、間違いと思われます。</p></div>
</div>

</body></html>
