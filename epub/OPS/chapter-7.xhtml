<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<html xml:lang="ja" xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8" /><title>1章：はじめに</title><link rel="stylesheet" href="css/book.css" type="text/css"/><meta name="EPB-UUID" content="f9202370-6e5d-44d5-b924-02b34d51163d"/></head><body><div class="body"><h1>1章：はじめに</h1><p>あなたと私（筆者）があるパーティーで出会ったと想像してみてください。会話を始めてまもなく、あなたが私の職業をたずねました。私はひとこと「デザイナーです」と答えましたが、あなたが私に「<em>何の</em>デザイナーなの？」と聞く前に、共通の友人が私をヒジで突いたのです。
</p><p>友人「ちょっといいかな？」</p><p>友人はあなたにわびを言うと、私を連れていってしまいました。あなたは正直、少しほっとしています。なぜなら、得意げに「デザイナー」を名乗るタイプの人は、たいてい、ちょっと自尊心が高くて面倒な人だからです。それでもあなたはしばらくの間、私の仕事について思いを巡らせます。</p><p>――ブランドもののゆで卵立てをデザインしているのかな？<br />――それともポストモダニズム的な水着を縫っているとか？<br />――ヘリコプターのミサイルシステムを作っていたりして？</p><p>ひと口にデザイナーと言っても実に<em>さまざま</em>です。</p><p>それからパーティーが終わるまで、あなたと私が再会することはありませんでした。翌日、あなたは友人と電話で話しているときに、昨夜は会話を中断させて申し訳なかったと謝罪されます。あなたは、しばらく考えてから思い出します。</p><p>あなた「ああ、デザイナーの彼ね。いいよ、気にしないで。それはそうと、彼はいったい何を<em>デザイン</em>しているの？」</p><p>友人「彼はWebデザイナーなんだよ」</p><p>あなた「へえ、<em>そうなんだ</em>」</p><p>友人「うん」</p><p>この答えに対するあなたの反応は、形を持たずに広がっていく公開の情報空間――私たちがWebと呼ぶもの、とあなたの関係によって大きく変わってきます。もしあなたがWebを<em>作る側</em>というより利用する側に近いなら、おそらく<em>Webデザイナー</em>という答えで十分でしょう。</p><p>あなた「なるほど、Webのあれやこれやをデザインしているわけね。Webサイトとかそういうやつ」</p><p>しかし、この本を読んでいるあなたは、きっとそうではないはずです。Webを作る側の人間ならきっと、Webという文脈において<em>デザイン</em>という言葉がひんぱんに物議を醸し、争いを招き、しばしば意見が正反対に分かれることもご存じでしょう。Webにどこかの段階で寄与している人の数は計り知れず、才能やスキルも実にさまざまです。では、いったいその中の誰がデザイナーなのでしょうか？ デザイナーとは何をする人なのでしょうか？</p><p>私たちは長いあいだ、この問いに対する答えを<em>間違え</em>続けてきました。Webというメディアを誤解して不適切に扱った結果、自ら苦労を増やして、ユーザーにも損害を与えてきたのです。</p><h2>Webデザインを考え直す</h2><p>業界における最も根深い間違いは、Webに対してほぼ相容れない<em>印刷物</em>のデザイン原則を当てはめていることです。印刷デザイナーの領域とは、純粋にビジュアルデザインの領域です。既に定義された、あるいは予測可能なスペースの中で、決められた素材と、確実に再現できる解像度や色を扱います。印刷物のデザインとは静的で不変のものを作ることです。</p><p>こうした特性はWebとは<em>まったく</em>相容れないのに、私たちは、印刷物のデザインに対してピクセルパーフェクトを求めるような無意味な行いに無駄なエネルギーを注いだり、自分たちで勝手に定めたデザイナーと開発者という曖昧な2つのグループにWebの作り手を分類することをやめられずにいます。まるでコンテンツ編集者やプロジェクトマネージャーは存在しないかのようです。</p><p>本来、デザインの仕事とは、<em>熟慮すること</em>です。そして、問題に対するベストな解決策を追求することです。それが「見た目の美しさ」という範囲だけでデザインをとらえることで、Webの大半は本来の意図から外れてしまっています。これは、低いアクセシビリティ、貧弱なパフォーマンス、そして全体的な有用性の低下につながります。</p><p>本書の目的は、Webに適したデザインの考え方を養うことです。その思考は、以下のようなWebデザインの原則における（驚くほど最近の）進化をふまえたものとなります。</p><ul><li>Webはコードで構成されていて、かつ、デザインが必要である。したがって、適切な素材を用いれば、<em>コードを使って</em>デザインをすることができる。これこそが最善策である。</li><li>コンテンツ――Webを通じて<em>書く</em>、あるいは<em>表現</em>するもの――はデザインの考え方に基づかねばならない。もっと言えば、他のすべてのデザイン上の判断はそれを促進するようにすべきである。</li><li>Webページは不変の成果物ではない。動的なコンテンツの変化に寛容でなければならない。コンテンツは、パターンとして再利用可能な個別のコンポーネントとして運用すべきである。</li><li><em>あらゆる人間</em>がWebやアプリケーションの潜在ユーザーであり、能力、嗜好、状況のインクルーシビティは最も重要である。異なる人々が集う場では、インクルーシブなインターフェイスこそが常に堅牢であるといえる。</li></ul><h2>インクルーシブデザイン</h2><p>この本のテーマと目的からすると、最後の原則が最も重要です。インクルーシブなパターンについて考える前に、まずインクルーシブデザインについて定義する必要があります。これは個々のスキルの話というより、本当に考え方の話になるので、例を挙げて説明しましょう。</p><p>このJSONのプロパティは住所を表しています。</p><pre><code class="language-javascript"><span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token string">"84, Beacon St, Boston, MA 02108, United States"</span></code></pre><p>さて、Handlebarsのようなテンプレートライブラリでこの住所を画面に表示したいときは、<code>{{this.address}}</code> のように書きます。では、住所の国の部分だけを参照したいときはどうすればよいでしょう？このような形式（単一の文字列）のデータの場合、たとえばヘルパーを書いて「United States」の部分を抽出するという方法が考えられます。</p><pre><code class=" language-javascript">Handlebars<span class="token punctuation">.</span>registerHelper<span class="token punctuation">(</span><span class="token string">'getCountry'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> address<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>これは<em>ハック的な</em>やり方だと言う人もいるでしょう。残念ながら、もろい上に複雑な応急処置です。ハック的であることは、<em>悪いデザイン</em>の証拠です。このヘルパー関数は処理を遅くしますが、それ以前に、そもそも信頼できないものです。なぜなら、住所は必ずしも国で終わるとは限らないからです。たとえばイギリスの住所は普通、郵便番号が最後にきます。</p><pre><code class="language-javascript"><span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token string">"85-87, Gwydir St, Cambridge, England, CB1 2LG"</span></code></pre><p>この住所のプロパティ（address）はオブジェクトにして、以下のように、オブジェクトのプロパティとして住所の各部を格納する方が堅牢かもしれません。</p><pre><code class="language-javascript"><span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">"building"</span><span class="token punctuation">:</span> <span class="token string">"85-87"</span><span class="token punctuation">,</span>
    <span class="token string">"street"</span><span class="token punctuation">:</span> <span class="token string">"Gwydir St"</span><span class="token punctuation">,</span>
    <span class="token string">"city"</span><span class="token punctuation">:</span> <span class="token string">"Cambridge"</span><span class="token punctuation">,</span>
    <span class="token string">"country"</span><span class="token punctuation">:</span> <span class="token string">"UK"</span><span class="token punctuation">,</span>
    <span class="token string">"zipOrPostcode"</span><span class="token punctuation">:</span> <span class="token string">"CB1 2LG"</span>
<span class="token punctuation">}</span></code></pre><p>これなら<code>address.country</code>で国にアクセスできます。</p><p>やり方としてはこちらの方がよいように思えます。しかし、本当にそうでしょうか？さまざまな国の住所を当てはめてみると、形式があまりにバラエティに富んでいて、融通のきかないプロパティ群ではとても対応できないことがわかるでしょう。単純に1つの文字列として格納するほうが理にかなっています。国の抽出はできなくなりますが、それはそういうものです。</p><p>ともあれ、このようにデータの構造を考え、最適解を導き出すための試行錯誤をすることがデザインなのです。Adobeのライセンスを買ったり、Sketchをコピーしたりしなくても<em>デザイン</em>はできるのです。実際、先に挙げた正しい解決策は、さまざまな形式の住所を含められる<em>インクルーシブデザイン</em>になっています。一貫性のある、統一された形で住所を扱うことができれば良いのですが、それは現実的ではありません。それよりも、さまざまなものを受け入れられるようにすることのほうが大事です。</p><p>前の段落の「データの構造」を「インターフェイス」に置き換え、「住所」を「人々」に入れ替えてみてください。そうすれば、それがそのまま、いわゆる<strong>インクルーシブインターフェイスデザイン</strong>の話になります。</p><p>インクルーシブなインターフェイスをデザインすることは、堅牢なデータスキーマをデザインするようなものです。これは、排他的で時代遅れのインターフェイスを作ることと比べ、複雑なことでも、難しいことでもありません。単に違うというだけです。本書では、一般的なWebインターフェイスのパターンについて、インクルーシビティの観点で見ていきます。本書を読めば、慣習を適用したり応用したりする方法をすぐに学ぶことができ、より幅広い人に閲覧してもらったり、ユーザーのフラストレーションを軽減したりできるようになるでしょう。</p><h2>インクルーシブなボタン</h2><p>もうひとつ、よくあるシンプルなインターフェイスパターンの例を見てみましょう。ここでは、インタラクティブ要素である「スタート」と書かれたボタンを、3種類のデザイナーの視点で見てみます。Webというメディアに対する少しの知識が、よりシンプルかつインクルーシブな解決策を導き出すことに注目してください。</p><h3>グラフィックデザイナーにとってのボタン</h3><p>最初にとりあげるのは、グラフィックデザイナーです。彼らは解像度300dpi未満のファイルは絶対に扱いませんが、実用的な色彩理論の知識を持っています。また、タイポグラフィとイラストに関するスキルも豊富です。彼らにとってボタンは視覚的な成果物であり、Adobe IllustratorやSketchで作るものです。本物のボタンのように見えるか、全体のブランディングにフィットしているかを常に考えています。そのボタンをどうやってWebページに実装するか、どうやって動作させるかは全く考えていません。</p><h3>コードを書くデザイナーにとってのボタン</h3><p>2番めにとりあげるデザイナーは、最初のデザイナーとほとんど同じスキルをもっていますが、1つ大きな違いがあります。彼らは、Webページ内にボタンを表示し、JavaScriptのイベントリスナーをアタッチできるだけのHTML、CSS、JavaScriptの知識を持っています。</p><p>彼らは以下のようなHTMLを書きます。</p><pre><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span>"button"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></code></pre><p>そしてCSSは以下のようになります。button.pngは「スタート」と書かれたPNG画像です。</p><pre><code class=" language-css"><span class="token selector">.button </span><span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 70px<span class="token punctuation">;</span>
    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url('../images/button.png')</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre><p>JavaScriptはおそらくjQueryか、もしかするとAngularJSのAPIを使って書くことになるでしょう。Web API （「バニラ」JavaScript）で書くと、おおむね次のようになります。</p>
<div class="translator_note" id="translator_note0204"><h4>訳註</h4><p>「バニラ」JavaScriptとは、フレームワークやライブラリを使用せず、ブラウザが提供している素の機能をそのまま使って書くことです。ジョークとして「バニラJSが最速のJavaScriptフレームワーク」のように言われることもあり、Vanilla JSというジョークサイトもあります（一見、JavaScriptフレームワークを提供しているように見えますが、どの機能を選択しても得られるJSのファイルサイズは0です）。ここでは、jQueryなどのライブラリを使用せずに、HTML5のWeb APIだけを使って書くことを示しています。</p><h5>参考</h5><ul><li><a href="http://vanilla-js.com/">Vanilla JS</a></li></ul></div>
<pre><code class=" language-javascript">button<span class="token punctuation">.</span>addEventListener<span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// クリックでイベント発火
</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>コードを書くデザイナーは、アイデアをWebページで実現するために必要な範囲でコーディングを学んでいました。状況を選べば、そのコードは特定のユーザーのために有効に働くこともあるかもしれません。しかし残念ながら、イベントリスナーは別として、彼らが実際にやっているのはグラフィックデザインをコードに落とすことだけです。<em>コードによるデザイン</em>ではありません。ほとんどの場合、グラフィックデザインをWebインターフェイスデザインに直接置き換えることはできません。このことをよく知っているのが次のインクルーシブデザイナーです。
</p><h3>インクルーシブデザイナーにとってのボタン</h3><p>インクルーシブデザイナーは、コードを書くデザイナーのボタンを、潜在ユーザーを想定したさまざまな観点から検討します。そうすると、この実装の問題点が次々と見えてきます。</p><p>問題のひとつは、Webページを読みやすいように拡大するユーザーにとって重要なことです。このようなユーザーは少なくありません。使用している画像はベクターではないため、画像のサイズを変えると画質が下がり、ぼやけてしまいます。なお、これはユーザーがページ全体を拡大した場合の話です。ユーザーが独自にブラウザのフォントサイズを調整しても、画像（相対単位ではなく、ピクセルでサイズ指定されたもの）が拡大されて読みやすくなることはありません。</p><p>もうひとつの問題は、モバイルブラウザで帯域幅を節約するために、画像の読み込みをオフにした場合に起こります。このボタンは背景画像だけで作られているため、画像の読み込みをオフにすれば見えなくなってしまうでしょう。また、前景と背景の見分けがつきにくいユーザーは、<a href="http://windows.microsoft.com/en-US/windows7/Turn-on-High-Contrast"><span class="link">Windowsのハイコントラストモード</span></a>をオンにするかもしれません。この場合も、条件によって<a href="http://terrillthompson.com/blog/182"><span class="link">背景画像が表示されなくなることがあります</span></a>。</p><p>問題はこれだけではありません。<code>&lt;div&gt;</code>要素は、ボタンのために作られた<code>&lt;button&gt;</code>要素とは異なり、（このままでは）キーボードでフォーカスしたり操作したりできません。Webページの移動や操作の際、キーボードを好んで使う人もいます。キーボードを<em>使わなければならない</em>人もいます。マウスを使うには手を精密に動かす必要がありますが、それができない人もいるのです。
</p><p>スクリーンリーダーユーザーの中には、重度の視覚障害のある人や、障害がなくても、合成音声でWebページを読み上げるとわかりやすくなるという人などが含まれます。コードを書くデザイナーのボタンデザインでは、こうしたユーザーは置き去りになります。また、デスクトップスクリーンリーダーのユーザーのほとんどはキーボードも使用するため、前述した問題も生じます。付け加えれば、<code>&lt;div&gt;</code>要素はセマンティック的には特に意味がないため、非視覚的には、これが実際にボタンであるという情報を一切提供しません。</p><p>また、「スタート」というラベルがCSSの背景画像で表現されているため、これもやはり支援技術からは利用できません。このことは、このボタンのラベルを他の言語に翻訳できない原因にもなり、世界中のユーザーを排除することにつながります。非常に多くの人々を逃しているということです！</p><p>インクルーシブデザイナーはこうした問題を予測できます。経験上、人は同じでないこと、しかもその違いも実にさまざまであることを知っているからです。しかし、恐れたり面倒に思ったりすることは全くありません。彼らは、一般的な慣習を利用すれば、わずかな労力で問題を解決できることを知っています。言い換えれば、どういう時にデザインをするべきで、どういう時に<em>既にデザインされた</em>ものを採用するべきかわかっているのです。ここで採用すべきは単純なHTMLのボタンの要素、HTMLの仕様で標準として提供されているものです。サイズが変更でき、翻訳でき、フォーカスでき、相互運用でき、スタイルが指定でき、スタイルの上書きができ、メンテナンスでき、変幻自在で、そして<em>シンプル</em>です。</p><pre><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>スタート<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></code></pre><p>インクルーシブデザインの解決策は、目的に合った正しいHTML要素を選ぶ、というようなシンプルなものばかりではありません。それでも、シンプルな標準の要素と慣習的な構造を<em>組み合わせる</em>のはそう難しいことではありませんし、見た目の美しさをじゃまするものでもありません。そして <code>&lt;button&gt;</code> は、あらゆる手段でユーザーに伝わるインクルーシブなものになるのです。</p><blockquote><p>色を表す16進コードの組み合わせは140,737,479,966,720通りあります。もちろん、その組み合わせのすべてがアクセシブルなわけではありません。しかし、すべての色の組み合わせのわずか1%だけがアクセシブルなのだとしても、およそ1億4千万通りの組み合わせから選べることになります。今後の人生で出くわす自転車置き場をすべて別の色に塗ってもまだ余るほどです。「<a href="https://blog.marvelapp.com/the-veil-of-ignorance/"><span class="link">The Veil Of Ignorance</span></a>」、アダム・モース（Adam Morse）</p></blockquote><div class="translator_note" id="translator_note0242"><h4>訳註</h4><p>「自転車置き場の議論」というフレーズは、重要でない議論のたとえとしてよく使われます。ここでは単に、アクセシブルになる前景色と背景色の組み合わせがごくわずかだとしても、その組み合わせは膨大であり、選択肢が多数残されているという話をしています。</p><h5>参考</h5><ul><li><a href="https://www.freebsd.org/doc/ja_JP.eucJP/books/faq/misc.html#idp75598440">FreeBSD 2.X、3.X、4.X についての FAQ - 12.15. なんでバイク小屋 (bikeshed) の色にまで気を使わなければいけないんですか?</a></li></ul></div><p>インターフェイスデザインの課題に対し、<em>インクルーシブな</em>解決策は無数にありますが、経験を積めば、自然と適切な解決策を選べるようになります。本書で取り上げているパターンは、手本として使えるように用意したものですが、そのほとんどは実践で使うことができます。新たな問題が生じれば、新たなパターンを確立する必要がありますが、本書を読んだあなたは、パターンを確立する方法を身に着けていることでしょう。あなたはインクルーシブデザイナーになっているのです。
</p></div>
</body></html>
