<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<html xml:lang="ja" xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8" /><title>メニューボタン</title><link rel="stylesheet" href="css/book.css" type="text/css"/><meta name="EPB-UUID" content="f9202370-6e5d-44d5-b924-02b34d51163d"/></head><body><div class="body"><h1>メニューボタン</h1><p>ときには（前章におけるナビゲーション領域のように）メニューを隠して、ユーザーをコンテンツに集中させたいことがあります。その場合、ユーザーが好きなときにメニューを表示できるように、ボタンを用意します。メニューボタンが単純明快で議論も不要なら、前章のパターンに収めることもできたかもしれません。しかし残念ながら、取り組むべき多くの課題や懸念があります。メニューアイコンの表示方法、理解しやすいボタンにする方法、アクセシブルなラベルのつけ方、メニューの開閉状態の伝え方、人間工学に沿ったタッチ操作。これらすべてを考慮しなければなりません。</p><p>ただ、まず最初に言っておくべきことがあります。――ドロップダウンメニューと同じく――メニューボタンも、それが必要不可欠でないかぎりは使わないでください。経験則として、メニューが5項目未満であれば、単に項目を並べておくのがよいでしょう。ユーザーがいつでも使えるようにしておきましょう。デスクトップのビューポートなら、ナビゲーションメニューを隠す理由はほとんど<em>ありません</em>。項目の数にかかわらずです。機能をユーザーから隠し、わざわざ操作しないと表示されないようにするのは、どうしようもないときの最終手段と考えてください。</p><p>必要なメニュー項目がほんの数個であれば、メニューボタンは、何の問題も解決しません。ルイ・A（Louie A）は<a href="https://lmjabreu.com/post/why-and-how-to-avoid-hamburger-menus/"><span class="link">「Why and How to Avoid Hamburger Menus」</span></a>の中で、情報アーキテクチャを見直すとメニューボタンを使わずにすむことがよくあると指摘しています。とはいえ、アプリケーションのビューやアクションを片手で数えられるまでに減らせるとは限りませんし、メニューボタンはいたるところで使われているため、やはりインクルーシブな実装方法を考えておく必要があるでしょう。</p><h2>外観</h2><p>アイコンは、目が見えているユーザーの理解を深めたり早めたりします。その研究例のひとつとして、<a href="http://psychsocgerontology.oxfordjournals.org/content/53B/4/P240.full.pdf"><span class="link">「Icons Improve Older and Younger Adults Comprehension of Medication Information」</span></a>では、情報の要点を示すのにアイコンを使用したところ、薬の用法・用量に対する理解が早まったという結果が報告されています。非テキスト方式によるコミュニケーションは、言語の壁を越え、インターフェイスの国際化をしやすくし、あまり字が読めない人の助けにもなります。</p><p><img src="images/happy.png" alt="スマイリーの顔文字の横に、さまざまな言語による「ハッピー」という意味の言葉が並んでいる。"/><br/><em>スマイリーの顔は、どんな言語よりも多くの人に「ハッピー」を伝えられる。</em></p><p>アイコンには、理解されやすいものとそうでないものがあります。そしてそれは、<a href="https://en.wikipedia.org/wiki/Sign_system"><span class="link">サインシステム</span></a>におけるアイコンの位置づけの問題にもつながります。「ナビゲーション領域」のパターンでは、ナビゲーションの選択肢を列挙するためにリストが広く使われていることを確認しました。3本線（☰）のハンバーガーアイコン、あるいはナビコンと呼ばれるものは、リストを表現した形です。リストそのものの存在や、ナビゲーションとの関係性を知っているからこそ、その意味を理解することができます。</p><p>そう考えると、このアイコンはかなり幅広く理解されるはずです。とはいえ、さらに重要なのは、そのメニューが実際にリストの見た目になっているかどうかということです。リスト項目をアイコン自体の横縞と同じ形や背景色にすれば、そのアイコンは真の意味でのアイコンとなります（物理的な外観を表しているという意味で）。ただし、例によって慣習はインクルージョンの友です。ですから、典型的な3本線のシンボルに線を足したり、線の向きを変えたりすることは避けるべきです。</p><blockquote><p>「クリエイティビティはできの悪いデザイナーに任せましょう。ここは人と違うことをやる場所ではないのです。慣習があるならば、それを使います。」
— マーク・ボルトン（Mark Boulton）<a href="http://www.markboulton.co.uk/journal/icons-symbols-and-a-semiotic-web"><span class="link">「Icons, Symbols and a semiotic Web」</span></a></p></blockquote><p>3本の水平線という簡略化されたアイコンで、誰もがナビゲーションを想起できるとは限りません。このことは<a href="http://exisweb.net/mobile-menu-abtest"><span class="link">ジェームズ・フォスター（James Foster）の研究</span></a>でも認められています。A/Bテストの結果、アイコンとともに「メニュー」という文字を配置したほうが理解されやすいことがわかりました。</p><p>また、ボタンらしい形にした方が（枠線による輪郭のおかげで）よりメニューボタンとして理解されやすいことも判明しました。一般的に、インターフェイス上のすべてのボタンはボタンらしく<em>見える</em>べきであり、そうでなければ、<a href="http://www.jnd.org/dn.mss/affordances_and.html"><span class="link">知覚されたアフォーダンス</span></a>が失われてしまいます。つまり、押せそうに見えないボタンになります。知覚されたアフォーダンスは、インタラクションデザインにおける認知アクセシビリティの根本理念です。</p><p><img src="images/menu_icon_with_text.png" alt="三本線アイコンの横に「メニュー」という文字があるものと、同じ内容だがアイコンと文字の周りに枠線があるもの。"/><br/><em>アイコンとテキストの周りを線で囲むとボタンのように見えます。</em></p><p>アイコンと「メニュー」という文字があれば、モバイルインターフェイスに精通したユーザーの理解を早めながら、初心者を遠ざけることもなく、ユーザビリティとインクルーシビティの両方を高められます。</p><h2>アイコンの表示方法</h2><p>アイコンを表示しようとするとき、表示方法の選択肢が多すぎて決めかねるのも無理はありません。img要素、背景画像、Unicode文字、アイコンフォント、SVG――好きに選びましょう！いや、ダメです。これらの選択肢の中には、思ったほど堅牢でない、インクルーシブでないものも含まれています。では、それぞれの是非を見ていきましょう。</p><h3>背景画像</h3><p>今では、背景画像も<code>background-size</code>プロパティでサイズを変更できるようになり、レスポンシブデザインにおける有用性は向上しました。しかし、1章「はじめに」の<code>&lt;button&gt;</code>の例でも少し触れましたが、Windowsで<a href="http://webaim.org/blog/high-contrast/"><span class="link">ハイコントラストモード</span></a>に切り替えると背景画像は表示されなくなります。「メニュー」というテキストも提供していれば、ぶち壊しにはなりません（ハイコントラストモードにしたとき、背景色とともにテキストの色も反転するため、引き続き読めるのです）。この追加テキストがなかったら、ボタンは視覚的には全く見えなくなります。</p><h3>前景画像</h3><p>画像をimg要素として前景に置く場合でも、<em>.png</em>画像の背景を透過して黒い3本線を引いていれば同じような問題が起きます。ハイコントラストモードでブラウザの背景を黒にすると、黒い背景に黒い3本線となります。もちろん、アイコンの背景を透明ではなく白にするという方法も考えられますが、そうすると背景を黒にしたときに、今度は白いボックスの中に3本の黒い横縞が描かれることになり、意図した表現とは少し違ってきます。</p><p><img src="images/menu_high_contrast.png" alt="白い背景に黒い3本線メニューアイコンを、ページ背景が白いページで表示した外観と、黒いページで表示したときの外観。"/><br/><em>ハイコントラストモードの黒背景では、アイコンは白枠で囲まれて異なる見え方になるうえに、「メニュー」というテキストとも分離して見える。</em></p><h3>アイコンフォントのグリフ</h3><p>幸い、アイコンフォントはテキストなので、テキストと同じような<em>ふるまい</em>をします。ハイコントラストモードで「メニュー」テキストの色を反転させると、アイコンフォントの色も反転します。もうひとつのメリットは、SVGと同様、画質の劣化なく拡大縮小できることです。</p><p>ただし、セレン・D（Seren D）の<a href="https://speakerdeck.com/ninjanails/death-to-icon-fonts"><span class="link">「Death To Icon Fonts」</span></a>にも書かれているように、Webページで使われているフォントをユーザーが独自に変更している場合、アイコンフォントは問題を起こします。ユーザーが読みやすいフォントを選べるようにすることは、インクルージョンにおいて重要です。特にディスレクシアによる読字障害がある場合などはなおさらです。スタイルシートも、このような設定ができることを考慮しておくべきです。問題が起きるのは、ユーザー指定のフォントがアイコンに使われている文字をサポートしていない場合で、汎用の「グリフ未定義」のボックスに置き換えられてしまいます。</p>
<div class="translator_note" id="translator_note1993"><h4>訳註</h4><p>「グリフ未定義」のボックスは白い長方形であることが多く、その見た目から日本では一般的に「豆腐」と呼ばれます。ちなみに、GoogleのNotoフォントの名前は"no more tofu"に由来します。</p><h5>参考</h5><ul><li><a href="https://www.google.com/get/noto/">Google Noto Fonts</a></li></ul></div>
<p><img src="images/menu_glyph_not_defined.png" alt="三本線のメニューアイコンの代わりに、グリフ未定義を示す長方形アイコンが表示されたメニューボタン。"/><br/><em>よく見かける長方形のボックスは、そのグリフがサポートされておらず、フォールバックになっていることを示しています。</em></p><p>他のあらゆるWebフォントと同様、アイコンフォントも読み込みに失敗する可能性があるリソースです。そうなると、そこらじゅう豆腐だらけ、というステキなデザインになります。Opera Miniは当然ながらWebフォントを読み込みません。フォールバック用のシステムフォントが定義されているなら、それが表示されるはずです。しかし、アイコンフォントは通常のシステムフォントが定義していない、独自のUnicode符号位置を利用していることがほとんどです。ちなみに、Operaのブルース・ローソン（Bruce Lawson）による<a href="https://dev.opera.com/articles/making-sites-work-opera-mini/"><span class="link">「Making websites that work well on Opera Mini」</span></a>というすばらしい記事があります。WebサイトがOpera Miniをサポートできていることは、ハイパフォーマンスであることを示すよい物差しとなります。</p>
<div class="translator_note" id="translator_note1998"><h4>訳註</h4><p>Opera Miniは、通信データ量を減らすことに重点を置いたブラウザです。一般のブラウザとは異なり、コンテンツをいったん専用サーバで読み込み、軽量化や圧縮の処理を行ってから端末に送る仕組みになっています。この際、サイト側のフォント指定も消され、端末のデフォルトのフォントが使われるようになるため、「当然ながら」Webフォントにも対応していないということになります。</p><h5>参考</h5><ul><li><a href="http://www.opera.com/ja/help/mini/other">その他のプラットフォーム用 Opera Mini に関するよくある質問</a></li></ul></div>
<p>Filament Groupのザック・レザーマン（Zach Leatherman）によれば、<a href="https://www.filamentgroup.com/lab/bulletproof_icon_fonts.html"><span class="link">OSが独自の目的でUnicodeの私用領域を<span class="italic-link">本当に</span>使うこともある</span></a>ようです。これはつまり、メニューのアイコンフォントの読み込みに失敗したら、フォールバックとして猫の顔が表示される可能性もあるということです。想像してみるに、これはひょっとすると認知に悪影響を与える可能性があるのではないでしょうか。</p><h3>Unicode</h3><p>アイコンフォントをダウンロードする代わりに、標準のUnicode記号でアイコンを表したらどうでしょうか？フォントスタックのふるまいやパフォーマンスという点では、こちらのほうが優れています――メニューアイコンにいかにもよく似たUnicode記号、<a href="http://www.fileformat.info/info/unicode/char/2630/index.htm"><span class="link">U+2630</span></a>もあることですし。</p><p>ただし、いくつか問題があります。1つめは、すべてのデバイスがUnicodeの幅広い文字集合を十分にサポートしているわけではなく、この記号「trigram for heaven」を表示できない可能性があるということです。2つめは、Unicodeの符号位置として<a href="https://en.wikipedia.org/wiki/Private_Use_Areas#Private_Use_Areas"><span class="link">私用領域</span></a>にマッピングされるアイコンフォントとは異なり、この文字は支援技術によって解釈されるかもしれないということです。何も手を入れなければ、一部のスクリーンリーダーがこの記号を「トリグラムフォーヘブン」などと読み上げる可能性があります。英語のユーザーであれ、中国語のユーザーであれ、これはスクリーンリーダーのユーザーをむしろ混乱させるでしょう。</p>
<div class="translator_note" id="translator_note2008"><h4>訳註</h4><p>U+2630 TRIGRAM FOR HEAVEN「☰」は「八卦」をあらわす文字のひとつです。八卦の他の例には、U+2633 TRIGRAM FOR THUNDER「☳」などがあります。なお、2017年8月現在、NVDA2017.3jpでは「☰」を全く読み上げません。iPhoneのVoiceOverでは、「☰MENU」という文字列を単に「メニュー」と読み、「☰」単独であれば「トリグラムフォーヘブン」と読み上げます。lang="ja" の場合でも、lang="zh" の場合でも読みは変わりませんでした。</p><p>「中国語のユーザーであれ」と言っているのは、原著者がこの文字を中国語の文で普通に使われる文字だと考えたからでしょう。一般に使われる文字は普通に読み上げられるため、別の混乱を招きます。たとえば、「MENU」という単語の前にアイコン代わりに「三」という漢字を置けば、日本語や中国語では「サンメニュー」と読まれてしまいます。</p></div>
<p>読み上げられないようにするには、<code>aria-hidden="true"</code>を指定した要素内にアイコンを配置する必要があります。しかし、CSSの疑似要素でアイコンを表示する場合、この方法は使えません。CSSの疑似要素は通常、スクリーンリーダーで読み上げられます。「読み上げないで」というプロパティはまだほとんどサポートされていません（ただし<a href="https://www.w3.org/TR/css3-speech/#speaking-props-speak"><span class="link">進んではいます</span></a>）。</p><pre><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation">=</span>"true"</span><span class="token punctuation">&gt;</span></span>☰<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
    Menu
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></code></pre><h3>SVGスプライト</h3><p>SVGスプライトは、急速にアイコン表示の事実上標準の解決策となりつつあります――それには正当な理由があります。Googleによる<a href="http://gizmodo.com/how-could-googles-new-logo-be-only-305-bytes-while-its-1728793790"><span class="link">305バイトのロゴ実装</span></a>が証明したように、アセットを非常に小さくできます。劣化せずに拡大縮小でき、フォントカラーの変更に合わせて色を変えることもできます。</p><p>SVGスプライトをクロスブラウザブラウザ対応させる場合は、ページ内に直接埋め込むのがベストです。こうすることで、個別のHTTPリクエストも省けます。以下のようなものを<code>&lt;body&gt;</code>内に直接記述します。</p><pre><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation">=</span>"display: none;"</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>symbol</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"navicon"</span> <span class="token attr-name">viewBox</span><span class="token attr-value"><span class="token punctuation">=</span>"0 0 20 20"</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation">=</span>"m0-0v4h20v-4h-20zm0 8v4h20v-4h-20zm0 8v4h20v-4h-20z"</span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>symbol</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">&gt;</span></span></code></pre><p>この非表示の<code>&lt;svg&gt;</code>は参照用で、メニューアイコンを<code>&lt;symbol&gt;</code>として定義し、アイコンを形づくるパスを含めています。非表示にするために、インラインで<code>display: none;</code>のスタイルを指定していることに注目してください。外部CSSを使って非表示にすると、CSSファイルが読み込めなかった場合に、このSVGが表示されることになります。実際には、<code>&lt;symbol&gt;</code>要素自体はレンダリングされませんが、そこには謎の空白ができて、デザインが崩れてしまうことになるでしょう。</p><p>この<code>&lt;symbol&gt;</code>をメニューボタン内で使用するには、<code>&lt;use&gt;</code>要素で<code>id</code>を参照します。</p>
<div class="translator_note" id="translator_note2031"><h4>訳註</h4><p>xlink:hrefのようにXLinkの名前空間接頭辞をつけるのはSVG1系の書き方です。SVG2の仕様ではuse要素にhref属性が定義されており、xlink:hrefを使うことは非推奨とされています。</p><h5>参考</h5><ul><li><a href="https://www.w3.org/TR/2016/CR-SVG2-20160915/struct.html#UseElementHrefAttribute">Scalable Vector Graphics (SVG) 2 - 5.6. The ‘use’ element</a></li><li><a href="https://www.w3.org/TR/2016/CR-SVG2-20160915/linking.html#XLinkRefAttrs">Scalable Vector Graphics (SVG) 2 - 16.1.6. Deprecated XLink URL reference attributes</a></li></ul></div>
<pre><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>use</span> <span class="token attr-name"><span class="token namespace">xlink:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span>"#navicon"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>use</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">&gt;</span></span>
    menu
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></code></pre><p>CSSでは、アイコンのデフォルトのサイズである（参照先SVGの<code>viewBox</code>で定義されている）20 × 20pxを「メニュー」というテキストに合わせて拡大縮小するように変更します。</p><pre><code class=" language-css"><span class="token selector">button svg </span><span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre><p>アイコンにbutton要素のフォントカラーを――ハイコントラストモードがオンオフいずれの場合でも――適用するには、CSSで<code>currentColor</code>の値を使うと良いでしょう。ここでは、これを<code>&lt;path&gt;</code>の<code>fill</code>プロパティとして設定します。</p><p>SVGが最も堅牢なソリューションであることは明らかでしょうし、すでに<a href="http://caniuse.com/#feat=svg"><span class="link">広くサポートされています</span></a>。</p><pre><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation">=</span>"display: none;"</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>symbol</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"navicon"</span> <span class="token attr-name">viewBox</span><span class="token attr-value"><span class="token punctuation">=</span>"0 0 20 20"</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation">=</span>"m0-0v4h20v-4h-20zm0 8v4h20v-4h-20zm0 8v4h20v-4h-20z"</span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation">=</span>"currentColor"</span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>symbol</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 他にも&lt;symbol&gt;要素がたくさん --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">&gt;</span></span></code></pre><h2>ラベルづけ</h2><p>インタラクティブな要素はすべて、アクセシブルな名前 (accessible name) をつけて、支援技術で解釈したり伝えたりできるようにするべきです。これは<a href="https://www.w3.org/TR/UNDERSTANDING-WCAG20/ensure-compat-rsv.html"><span class="link">WCAG 2.0の達成基準4.1.2<span class="italic-link">「名前（name）・役割（role）及び値（value）」</span></span></a>に関連します。</p><p>最もシンプルなラベルは、見えていると同時に構文解析も可能なもので、先の例の「メニュー」というテキストノードのようなテキストコンテンツが基本となります。前述したとおり、ボタンに「メニュー」というテキストを含めることには認知面のメリットがあります。また、何らかの理由でアイコンが表示されなかった場合でも、<code>&lt;button&gt;</code>のわかりやすさが保たれます。</p><p>それでもやはり、アイコン単体で使いたい場合もあるでしょう。その場合は、スクリーンリーダーユーザーにも確実に「メニューボタン」と伝わるようにすることが重要です。ここで紹介する方法は、他にもメディアプレイヤーの再生・停止ボタンなど、あらゆるタイプのアイコンボタンに使えます。本書の多くのレッスンはさまざまなパターンに応用でき、このように新しいパターンに生かすことも可能なのです。</p><h3>非表示の<code>&lt;span&gt;</code></h3><p>この方法では<code>&lt;span&gt;</code>にCSSハックを用いて、「メニュー」というテキストラベルを隠しつつ、スクリーンリーダーには拾われるようにします。その実現のために、おなじみの<code>.visually-hidden</code>クラスを利用することができます（4章「ブログ記事」を参照）。</p><p>先のSVGの実装例に適用する場合は、以下のようになるでしょう。</p><pre><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>use</span> <span class="token attr-name"><span class="token namespace">xlink:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span>"#navicon"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>use</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span>"visually-hidden"</span><span class="token punctuation">&gt;</span></span>menu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></code></pre><h3><code>aria-label</code>属性</h3><p>もうひとつ予備的な方法として、<a href="https://www.w3.org/TR/wai-aria/states_and_properties#aria-label"><span class="link"><code>aria-label</code></span></a>属性を使用する方法があります。このグローバルプロパティは要素に代替テキストを指定するもので、<code>alt</code>属性とよく似ていますが、<code>&lt;img&gt;</code>タグ以外にも使えます。<code>&lt;button&gt;</code>要素に直接、<code>aria-label</code>を指定することもできます。</p><pre><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation">=</span>"menu"</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>use</span> <span class="token attr-name"><span class="token namespace">xlink:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span>"#navicon"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>use</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></code></pre><p><code>aria-label</code>のメリットのひとつは、要素にテキストノードがある場合、それを上書きするということです。先ほど紹介したUnicode記号によるアイコン表示方法を採用していたなら、「トリグラムフォーヘブン」と読まれる可能性があるところを、「メニュー」と読まれるように置き換えることができます。</p>
<div class="translator_note" id="translator_note2068"><h4>訳註</h4><p>ある要素にテキストノードが含まれると同時にaria-labelやaria-labelledbyなども指定されている場合、それらのどれもが「アクセシブルな名前((accessible name)」の候補となりますが、どれを採用するかの優先順位は決まっていて、aria-labelledby、aria-label、テキストノード、の順になります。より詳しく知りたい方は、WAI-ARIA 1.1の5.2.7 Accessible Name Calculationと、そこから参照されているAccessible Name and Description: Computation and API Mappings 1.1を参照してください。</p><h5>参考</h5><ul><li><a href="https://www.w3.org/TR/wai-aria-1.1/#namecalculation">WAI-ARIA 1.1 5.2.7 Accessible Name Calculation</a></li><li><a href="https://www.w3.org/TR/accname-aam-1.1/">Accessible Name and Description: Computation and API Mappings 1.1</a></li></ul></div>
<pre><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation">=</span>"menu"</span><span class="token punctuation">&gt;</span></span>
    ☰
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></code></pre><p>たとえば、▶は「さんかくけい」、<strong>×</strong>は「かける」と読み上げられますが、この場合も同様に<code>aria-label</code>を使ってボタンのラベルを「再生」や「閉じる」に修正できます。とはいえ、これまで解説してきたとおり、可能な限りすべてのアイコンにSVGを使ってください。</p><p>Dev.Operaに私が書いた<a href="https://dev.opera.com/articles/ux-accessibility-aria-label/"><span class="link"><code>aria-label</code>のUXに関する記事</span></a>があるので参考にしてください。</p><h2>古いブラウザ</h2><p><a href="http://caniuse.com/#feat=svg"><span class="link">SVGは広く一般的にサポートされています</span></a>。Internet Explorer 9～11は<code>xlink:href</code>を使って外部ファイルを参照できないとされていますが――この実装はインラインSVGなので問題ありません。しかし、Internet Explorer 9未満や、その他の古いブラウザでは、インラインSVGのフォールバックが必要です。これはSVGの<code>&lt;switch&gt;</code>要素と<code>&lt;foreignObject&gt;</code>要素を使って実現できます。</p><pre><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation">=</span>"menu"</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>switch</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>use</span> <span class="token attr-name"><span class="token namespace">xlink:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span>"#navicon"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>use</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreignObject</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span>"path/to/navicon.png"</span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span>""</span> <span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreignObject</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>switch</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></code></pre><p>上の例では、<code>&lt;use&gt;</code>要素がサポートされていればSVGを表示し、サポートされていなければフォールバックPNGを表示するように<em>切り替え</em>ます。フォールバック画像の<code>alt</code>属性の値が空であることに注目してください。これはスクリーンリーダーが画像を認識しないようにするためです。<code>aria-label</code>で「メニュー」というラベルが提供されているため、<code>alt</code>は不要です。しかし、<code>alt</code>属性自体をまるごと削除してしまうと、スクリーンリーダーは、無意味な、ユーザーをいらだたせるだけの画像ファイル名を読み上げることがあります。<code>alt=""</code>だけが頼りです。</p>
<div class="translator_note" id="translator_note2090"><h3>訳註</h3><p>逆に言えば、aria-labelに対応していない環境を想定するならaltが必要になるはずです。インラインSVGに対応していない環境というのは相当古く、aria-labelにも対応していない可能性が高いと考えられます。そう考えると、ここではaltは指定しておくほうが得策かもしれません。なお、少し前に本文で述べられているように、aria-labelに対応している環境ではbuttonの中のテキストよりもaria-labelが優先されるため、この例でaltの値とaria-labelの両方が読まれることはありません。</p></div>
<p><code>&lt;img&gt;</code>によるフォールバックの問題は、ブラウザがSVGをサポートしていても、ほぼ確実にフォールバック用の画像がダウンロードされてしまい、無駄にパフォーマンスを低下させてしまうことです。これについては、アルトゥール・アンピロゴフ（Artur Ampilogov）が<a href="http://developersdev.blogspot.co.uk/2014/10/svg-fallback-pure-css-can-i-use-part-5.html"><span class="link">背景画像を用いた回避方法</span></a>を紹介しています。</p><h2>操作</h2><p>さて、実際にボタンを使うときの話をしましょう。インクルーシブなUXを生み出すためには、まず<code>&lt;button&gt;</code>と、それによって開かれるメニューの置き方に気をつける必要があります。</p><pre><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation">=</span>"site"</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>use</span> <span class="token attr-name"><span class="token namespace">xlink:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span>"#navicon"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>use</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">&gt;</span></span>
        menu
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">hidden</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span>"#main"</span><span class="token punctuation">&gt;</span></span>home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span>"/about"</span><span class="token punctuation">&gt;</span></span>about<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span>"/products"</span><span class="token punctuation">&gt;</span></span>products<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span>"/contact"</span><span class="token punctuation">&gt;</span></span>contact us<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span>"/login"</span><span class="token punctuation">&gt;</span></span>login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">&gt;</span></span></code></pre><ul><li>上の例は、JavaScriptが実行された後の状態だと思ってください。メニューは無事に非表示となり、ボタンが表示されています（JavaScriptによってメニューの<code>&lt;ul&gt;</code>に<code>hidden属性</code>が追加されたからです）。</li><li>この<code>&lt;button&gt;</code>はナビゲーションランドマークの<em>中</em>に配置されているため、スクリーンリーダーのユーザーはショートカットでランドマークに移動できるようになります。もしボタンがナビゲーションランドマークの外にあると、ユーザーは空っぽのランドマークにたどり着くことになり、そこにはメニューを出現させる手段もありません。</li><li>ソースの順序では、メニューは<code>&lt;button&gt;</code>のすぐ<em>後</em>に配置されます。これによって、メニューを開いた後、次にフォーカスがあたる要素はメニューの最初の項目になります。メニューは<code>hidden</code>で隠されているため、メニューが閉じているときはその中身にはフォーカスできません。見えない要素は操作対象ではないため、絶対にフォーカスできるようにしてはなりません。</li></ul><p>ちなみに、（デザイン上の制約、企業の政治的な問題、その他、立ちふさがる何らかの事情によって）メニューボタンの直後にメニューを配置することが不可能な場合は、その2つの要素を<code>aria-controls</code>で関連づけることもできます。しかし、<a href="http://www.heydonworks.com/article/aria-controls-is-poop"><span class="link">「Aria-controls Is Poop」</span></a>にも書いたように、これは避けるべきです。この属性はJAWSでしか読み上げられないうえに、その実装も不完全で満足いかないものです。「use JAWS key + ALT + M to move to controlled element」とアナウンスされますが、移動したあとに戻ってくる方法はありません。</p><p>ユーザーをメニュー（あるいはページ内の離れた場所にある他の要素）まで<em>運ぶ</em>方法としては、ページ内リンクが最善です。</p><pre><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span>"#nav-menu"</span><span class="token punctuation">&gt;</span></span>navigation menu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- ここにその他もろもろのDOM要素 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation">=</span>"site"</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"nav-menu"</span> <span class="token attr-name">tabindex</span><span class="token attr-value"><span class="token punctuation">=</span>"-1"</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span>"#main"</span><span class="token punctuation">&gt;</span></span>home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span>"/about"</span><span class="token punctuation">&gt;</span></span>about<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span>"/products"</span><span class="token punctuation">&gt;</span></span>products<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span>"/contact"</span><span class="token punctuation">&gt;</span></span>contact us<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span>"/login"</span><span class="token punctuation">&gt;</span></span>login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">&gt;</span></span></code></pre><p>上記の<code>tabindex="-1"</code>属性は、シーケンシャルフォーカスナビゲーションの問題への対策です。詳しくは6章「ナビゲーション領域」を参照してください。</p><p>ユーザーがランドマークに到着するまでメニューを非表示にしておきたい場合は、<code>:target</code>疑似クラスを使用します。あらかじめ<code>hidden</code>属性を取り除いた上で、かわりに以下のCSSを適用しましょう。</p><pre><code class=" language-css"><span class="token selector">#nav-menu ul </span><span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">#nav-menu:target ul </span><span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre><p><code>href="#nav-menu"</code>のリンクをクリックすると、ページのURLに <code>#nav-menu</code>フラグメント識別子が追加され、ランドマークがターゲットとなり、<code>display: block;</code>が適用されます。</p><p>さて、話を戻しましょう。先ほどの例は、ボタンとメニュー項目がくっついていて、ボタンを使うのにふさわしいケースでした。ユーザーは、それを使って思うがままにメニューを閉開できます。JavaScriptとWAI-ARIAを使えば、メニューの開閉状態の変化を、視覚に頼らない方法で伝えることができます。</p><h3>状態を伝える</h3><p>Webインターフェイスを、<a href="https://www.paciellogroup.com/blog/2015/01/the-browser-accessibility-tree/"><span class="link">アクセシビリティツリー</span></a>に依存する支援技術のユーザーにもインクルーシブなものにするためには、インターフェイスの状態を伝えることが重要になります。前述のとおり、アクセシビリティツリーはDOMに役割(role)、プロパティ、値、状態(state)などの情報を加え、支援技術に提供できるようにしたものです。</p><p>スクリーンリーダーはJavaScriptによって引き起こされたDOMの変更に反応できない、というのはよくある誤解です。一般的なスクリーンリーダーは変更を監視し、変更があればその都度バッファ（アクセシビリティツリーを元に、DOMをプログラム内部で処理できるようにしたもの）を更新します。要素の追加や削除があれば、バッファは更新されます。テキストノードや属性に変更があったときも同様です。</p><p>WAI-ARIAは<code>true</code>と<code>false</code>の値を持つ状態(state)属性を提供しており、これによって状態の有効／無効を伝えることができます。ここでは、<a href="https://www.w3.org/TR/wai-aria-1.1/#aria-expanded"><span class="link"><code>aria-expanded</code></span></a>が解決策となるでしょう。スクリーンリーダーに、明示的に「折りたたみ」（<code>false</code>）もしくは「展開」（<code>true</code>）と読み上げさせることができます。最初はメニューが開いていないので、<code>false</code>が適用されます。</p>
<div class="translator_note" id="translator_note2147"><h4>訳註</h4><p>2017年8月現在、iOS10のVoiceOverはexpanded="false" の状態を「隠されました」、aria-expanded="true" の状態を「拡大」と読みます。</p></div>
<pre><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation">=</span>"site"</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">aria-expanded</span><span class="token attr-value"><span class="token punctuation">=</span>"false"</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>use</span> <span class="token attr-name"><span class="token namespace">xlink:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span>"#navicon"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>use</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">&gt;</span></span>
        menu
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">hidden</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span>"#main"</span><span class="token punctuation">&gt;</span></span>home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span>"/about"</span><span class="token punctuation">&gt;</span></span>about<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span>"/products"</span><span class="token punctuation">&gt;</span></span>products<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span>"/contact"</span><span class="token punctuation">&gt;</span></span>contact us<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span>"/login"</span><span class="token punctuation">&gt;</span></span>login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">&gt;</span></span></code></pre><p>メニューボタンにフォーカスした際、スクリーンリーダーは「サイト ナビゲーション ランドマーク メニュー  ボタン  折りたたみ」といった具合に読み上げるでしょう――その領域のメニューシステムに関する情報のすべてを。</p><h3>重要なJavaScript</h3><p>メニューの状態が切り替わったことをアクセシブルに伝えるためには、JavaScriptの機能が必要になります。メニューの操作はきわめて重要な機能なので、私はバニラJavaScriptで実装してページ最下部に直接書くようにしています。</p><p>前述したように、JavaScriptの読み込みに失敗したり、ユーザーがJavaScriptをオフにした場合でも、メニューは表示され、使用することはできるようになっています。この実装方法では、さらにスクリプトの読み込みに失敗する可能性も下げることができます。ドキュメント自体がロードされた時点で、すでにJavaScriptの全てのコードがロードされているからです――jQueryなどの他の依存ライブラリの読み込みを待つ必要がありません。</p><pre><code class=" language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ボタンとメニューのノードを取得
</span>    <span class="token keyword">var</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">'[aria-label="site"] button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> menu <span class="token operator">=</span> button<span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">;</span>

    <span class="token comment">// 初期の（メニューが閉じているときの）状態を設定
</span>    button<span class="token punctuation">.</span>setAttribute<span class="token punctuation">(</span><span class="token string">'aria-expanded'</span><span class="token punctuation">,</span> <span class="token string">'false'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    button<span class="token punctuation">.</span>hidden <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    menu<span class="token punctuation">.</span>hidden <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    button<span class="token punctuation">.</span>addEventListener<span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// メニューの表示／非表示を切り替える
</span>        <span class="token keyword">var</span> expanded <span class="token operator">=</span> this<span class="token punctuation">.</span>getAttribute<span class="token punctuation">(</span><span class="token string">'aria-expanded'</span><span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'true'</span><span class="token punctuation">;</span>
        this<span class="token punctuation">.</span>setAttribute<span class="token punctuation">(</span><span class="token string">'aria-expanded'</span><span class="token punctuation">,</span> String<span class="token punctuation">(</span><span class="token operator">!</span>expanded<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        menu<span class="token punctuation">.</span>hidden <span class="token operator">=</span> expanded<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3>堅牢な表示方法</h3><p>ここでは、CSSによる配置やアニメーションといった、手の込んだことは一切しなかった点に注目してください。このメニューは、<code>hidden</code>属性の切り替えによって、単に表示されたり隠されたりしているだけです。これには3つのメリットがあります。</p><ul><li>このメニューの仕組みは、CSSにまったく依存しません。そのため、CSSの読み込みに失敗しても機能します。</li><li>メニューはドキュメントのフローの一部として表示されます。そのため、メニューの高さがビューポートの高さを超えていてもスクロールできますし、メニューがコンテンツを覆い隠してしまうこともありません。CSSを使って絶対配置した場合には、このようなことは保証できません。</li><li>前述したように、<code>hidden</code>属性（<code>display: none;</code>に似ています）を親要素に指定することで、インタラクティブな子要素はすべてフォーカスできなくなります。<code>height: 0;</code>を指定しておいてメニューの高さを広げて表示するという方法では、この効果は得られません。つまり、キーボードユーザーは、メニューが閉じているときも、目に見えない要素にTabキーで移動させられるはめになることがあります。</li></ul><p>ほどよいアニメーション効果はユーザーの理解の助けとなりますが、それは慎重にデザインされていればの話です。ユーザーに印象づけるためのアニメーション――特にCSSによる配置に頼ったもの――を追加したくなる魔の誘惑は、冷静に見切ってください。<a href="http://www.heydonworks.com/article/the-precarious-x-in-ux"><span class="link">「The Precarious X In UX」</span></a>にも書きましたが、<em>多くのデザイナー</em>はインターフェイス自体の細部の美しさに夢中になりがちです。しかし実在するほとんどのユーザーはただ目的を達成したいだけなのです。インクルーシブデザイナーにとっては、それに応えることが最優先なのです。</p><blockquote><p>「すこし意外な事実をお伝えしましょう。実は、人々は製品を使いたいわけではないのです。ユーザーがインターフェイスを操作したり、つまみを回したり、レバーを引いたり、ボタンをタップしたりするのに時間を費やすことは、すべて時間の浪費なのです。むしろ人々にとって<strong>より関心があるのは最終的な結果</strong>と、迅速で、手間がかからず、可能な限り最も効率的な方法でその結果を得ることです。」
— ゴラン・ポイク（Goran Peuc）<a href="https://www.smashingmagazine.com/2016/01/nobody-wants-use-your-product/"><span class="link">「Nobody Wants To Use Your Product」</span></a></p></blockquote><h2>タッチターゲット</h2><p>前にも述べたとおり、コンテンツを隠してユーザーが操作しないと表示されないようにするのは、最後の手段です。したがって、ビューポートの幅が十分に広ければ、メニューは常に表示させておくべきでしょう。幅が狭い場合、タッチ操作が行われる可能性が高くなります――モバイルやハンドヘルドデバイスの寸法に至っている場合は特に。ハンバーガーメニューを採用するなら、タッチ操作のしやすさについて、よく検討する必要があります。リウマチのせいで手先を器用に動かせないユーザーにも使える、インクルーシブなものにしたいところです。</p><p>インタラクティブ要素のタッチターゲットが小さいと、操作が必要以上に難しくなります。では、最小限のサイズの目安は何でしょう？デバイス解像度の種類は爆発的に増えているため、あらゆる状況で使えるサイズを規定することはほとんど不可能です。</p><p>AppleとAndroidは、タッチターゲットの大きさについて異なるアドバイスをしています。Appleは44 × 44ポイント（ピクセル密度とは独立したApple特有の測定単位）、Androidは48 × 48pxを推奨しています。<em>おおよそ</em>これ以上のサイズであれば、視覚的なフォーカスフィードバックがユーザーの指によって隠れることはありません。そうでなければ、アンソニー・トーマス（Anthony Thomas）の<a href="http://uxmovement.com/mobile/finger-friendly-design-ideal-mobile-touch-target-sizes/"><span class="link">「Finger-Friendly Design: Ideal Mobile Touch Target Sizes」</span></a>に書かれているような不安定なジェスチャーを強いられることになるでしょう。</p>
<div class="translator_note" id="translator_note2203"><h3>訳註</h3><p>実際にはAndroidのタッチターゲットの推奨値は48×48dpとされており、dp(Density-independent Pixels) という解像度非依存の単位で指定されています。</p><h4>参考</h4><ul><li><a href="https://material.io/guidelines/usability/accessibility.html#accessibility-style">Accessibility - Usability - Material design guidelines</a></li><li><a href="https://developer.android.com/guide/topics/resources/more-resources.html?hl=ja#Dimension">More Resource Types | Android Developers</a></li></ul></div>
<blockquote><p>「ユーザーは、小さなターゲットを指の先端でタップします。タッチターゲットには、目標を正確にタップできているかどうかがわかる視覚的なフィードバックがあるからです。しかし、ユーザーが指の向きを変えねばならないのでは、動きが遅くなる上に、ターゲットをタップしづらくなってしまいます」</p></blockquote><p>パトリック・H・ラーク（Patrick H Lauke）は、<a href="https://www.w3.org/WAI/GL/mobile-a11y-tf/wiki/Summary_of_Research_on_Touch/Pointer_Target_Size"><span class="link">W3C Mobile Accessibility Taskforceのタッチおよびポインターにおけるターゲットサイズの調査</span></a>を引き受けました。</p><p>モバイルサイズのナビゲーション領域ではリンクどうしが近接するため、タッチターゲットサイズの問題はより深刻です。指の腹が複数の要素にまたがると、どちらの要素がアクティブになるかわかりません。こんなギャンブルには誰も関わりたくないでしょう。</p><p><img src="images/fat_finger.png" alt="指で正確に狙うには高さが不十分なメニュー項目群。"/><br/><em>「あー、もう！また押し間違った！垂直パディングってものを知らないのか？」</em></p><p>BBCの<a href="http://www.bbc.co.uk/guidelines/futuremedia/accessibility/mobile/design/spacing"><span class="link">「Mobile Accessibility Guidelines」</span></a>では、この問題の改善方法として、要素間に「反応しないスペース」を入れることを推奨しています。しかし、ナビゲーション領域の場合は、この方法だといささか不可解な、壊れたような見た目になってしまうでしょう。モバイルビューポートではナビゲーションを1列に――1行に1つのリンクで――設定し、それぞれのリンクが大人の指の腹よりも大きな高さとなるよう、十分なゆとりを持った垂直パディングを設定することをおすすめします。</p><h2>まとめ</h2><p>このパターンでは明示的な例としてメニューボタンをとりあげましたが、これは実際に、アイコンをともなったボタンコントロール全般に応用することができます。アクセシブルなラベルの必要性、Windowsのハイコントラストモードでの問題、タッチ操作のしやすさを心に留めておくことで、メニューボタンを――そして、そのボタンによって表示されるメニューも――さまざまなユーザー設定、環境、デバイス、支援技術に対してインクルーシブなものにすることができました。</p><h3>避けるべきこと</h3><ul><li>アイコンの表示に背景画像を使用する。</li><li>アクセシブルな名前 (accessible name) やラベルを省略する。</li><li>小さなタッチ（またはヒット）領域。</li><li> アクセシブルな状態 (state) を伝えていない。</li></ul></div>
</body></html>