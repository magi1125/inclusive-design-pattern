<?xml version='1.0' encoding='UTF-8' ?>
<html xml:lang="ja" xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="application/xhtml+xml; charset=UTF-8"/><title>テスト駆動マークアップ</title><link rel="stylesheet" href="css/book.css" type="text/css"/><meta name="EPB-UUID" content="f9202370-6e5d-44d5-b924-02b34d51163d"/></head><body><div class="body"><h1>テスト駆動マークアップ</h1><p><a href="https://en.wikipedia.org/wiki/Test-driven_development"><span class="link">テスト駆動開発（TDD）</span></a>では、コードの信頼性を担保しながら開発を進めるために、開発者は頻繁にイテレーションを行います。まずテストを書いて期待される結果を定義し、それを満たすように機能を作ることで、ビルドに成功したものが想定通り動作することを保証できます。「いったいぜんたい何が起きているんだ？」というスリルを求める人は、TDDを少し退屈に感じるかもしれませんが、これが堅実なアプローチなのです。</p><p>アプリケーション開発では通常、関数に対してテストを書き、予期した結果を返すか確認します。たとえば、自作の<code>add.js</code>というNode.jsモジュールで<em>add()</em>関数をテストする場合、<a href="https://mochajs.org"><span class="link">Mocha</span></a>と、アサーションライブラリ<a href="http://chaijs.com/"><span class="link">Chai</span></a>を使って以下のようにできます。</p><pre><code class=" language-javascript"><span class="token keyword">var</span> expect <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">'chai'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>expect<span class="token punctuation">;</span>
<span class="token keyword">var</span> add <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">'../lib/add.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

describe<span class="token punctuation">(</span><span class="token string">'Addモジュール'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    describe<span class="token punctuation">(</span><span class="token string">'add() 関数'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        it<span class="token punctuation">(</span><span class="token string">'3に1を加えた際、4になるべき'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>should<span class="token punctuation">.</span>equal<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>あとは<code>npm test</code>（または何らか設定したエイリアス）を実行すれば、この関数が期待通りに動いてくれるかがわかるでしょう。</p><p>実に結構なことではありますが、これは命令型言語であるJavaScriptのために設計されたものです。では、HTMLのような宣言型言語に対してテストが書けたらどうでしょう？テストを書くことで、<em>マークアップの構造</em>の正しさを保証できるはずです。マークアップの適切な構成はWebアクセシビリティに大いに寄与するため、TDDの手法を適用することで、インクルーシブでないパターンが作られることを防げるでしょう。</p>
<div class="translator_note" id="translator_note3678"><h2>訳註</h2><p>XML SchemaやSchematronなど、マークアップの構造を検証するための専用の仕組みも存在しますが、それらを扱うにはそれなりの知識が必要です。ここで紹介されている方法には、フロントエンドエンジニアが既存の知識だけで対応できるというメリットがあります。</p></div>
<p>実は、このタスクにぴったりの言語があることがすでにわかっています。都合の良いことに、それ自体が宣言型言語であり、さらに幸いなことに、付加的なライブラリに依存することもありません。言うまでもなく、CSSのことです。</p><h2>セレクタのロジック</h2><p>CSSは宣言型言語ですが、セレクタの構造の中にはロジックが存在しています。セレクタは、HTMLの構造にマッチさせるために使われる、条件ベースの式です。CSSセレクタはこの用途に非常に適しており、<a href="http://emmet.io/"><span class="link">Emmet</span></a>などのマークアップを<em>書く</em>ためのツールも、セレクタに似た構文を採用しています。CSSセレクタがロジックを内包していることは、JavaScriptの構文でセレクタの処理を再現しようとしてみるとよくわかります。たとえば、無効になっていないすべてのボタンにマッチさせたい場合は、以下のように記述します。</p><pre><code class=" language-css"><span class="token selector">button:not(:disabled) </span><span class="token punctuation">{</span> … <span class="token punctuation">}</span></code></pre><p>これをJavaScriptで書き直すと、以下のようになります。</p><pre><code class=" language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>nodeName <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'button'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>element<span class="token punctuation">.</span>disabled<span class="token punctuation">)</span> <span class="token punctuation">{</span> … <span class="token punctuation">}</span></code></pre><p>通常、CSSセレクタは期待されるパターンにマッチさせるのに使いますが、破綻した、不正なパターンを対象にすることもできます。そうしたパターンが存在する場合、エラースタイルを適用して問題をハイライトすることができます。</p><pre><code class=" language-css"><span class="token selector">[undesired pattern] </span><span class="token punctuation">{</span>
    <span class="token comment">/* エラースタイルなど
    outline: 0.5em solid red;
    */</span>
<span class="token punctuation">}</span></code></pre><p>あとは、ハイライトされた要素を調べた際に、その問題点の説明が伝わるようにすればよいのです。タブインターフェイスのパターンを題材として、どのような動作になるのかを確認してみましょう。</p><h2>テスト駆動のタブインターフェイス</h2><p>ARIAで強化されたアクセシブルなタブインターフェイスについては、私の著書<a href="https://shop.smashingmagazine.com/products/apps-for-all"><span class="link">『Apps For All: Coding Accessible Web Applications』</span></a>（日本語版：『コーディングWebアクセシビリティ - WAI-ARIAで実現するマルチデバイス環境のWebアプリケーション』ボーンデジタル刊）で詳しく説明しています。また、<a href="http://heydonworks.com/practical_aria_examples/#tab-interface"><span class="link">解説つきのデモ</span></a>も利用できます。このようにまとめられたパターンや、想定される動作についてあまりご存じない方は、上記のどちらかの資料を参照してください。</p><p>以下に示すコード例は、タブインターフェイスの初期状態をマークアップしたものです。このタブインターフェイス内の要素に対して、プロパティとリレーションシップを検証するテストを書き、想定通りに構成されているか確認しましょう。タブインターフェイスのように比較的複雑なパターンの場合、構造の一部をうっかり間違えたり、抜かしたり、不適切な形にしてしまいやすいものです。テストを書くことは、そうした問題を防ぐ良い機会になります。</p><pre><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span>"tab-interface"</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span>"tablist"</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span>"presentation"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span>"#panel1"</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"tab1"</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span>"tab"</span> <span class="token attr-name">aria-selected</span><span class="token attr-value"><span class="token punctuation">=</span>"true"</span><span class="token punctuation">&gt;</span></span>1番めのタブ<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span>"presentation"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span>"#panel2"</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"tab2"</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span>"tab"</span> <span class="token attr-name">tabindex</span><span class="token attr-value"><span class="token punctuation">=</span>"-1"</span><span class="token punctuation">&gt;</span></span>2番めのタブ<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span>"presentation"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span>"#panel3"</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"tab3"</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span>"tab"</span> <span class="token attr-name">tabindex</span><span class="token attr-value"><span class="token punctuation">=</span>"-1"</span><span class="token punctuation">&gt;</span></span>3番めのタブ<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span>"tabpanel"</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"panel1"</span> <span class="token attr-name">aria-labelledby</span><span class="token attr-value"><span class="token punctuation">=</span>"tab1"</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- タブパネル1のコンテンツ--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span>"tabpanel"</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"panel2"</span> <span class="token attr-name">aria-labelledby</span><span class="token attr-value"><span class="token punctuation">=</span>"tab2"</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- タブパネル2のコンテンツ --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span>"tabpanel"</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"panel3"</span> <span class="token attr-name">aria-labelledby</span><span class="token attr-value"><span class="token punctuation">=</span>"tab3"</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- タブパネル3のコンテンツ--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></code></pre><h3>テストの内容</h3><p>それでは上から見ていきましょう。これらのタブは、各タブをグループ化するための<code>tablist</code>ロールを持つ要素内にあるときのみ、支援技術で正しく機能することがわかっています。以下のセレクタは、<code>class="tab-interface"</code>コンテナ内の<code>&lt;ul&gt;</code>要素を見つけて、<code>role="tablist"</code>属性がない場合はそれをハイライト表示します。</p><pre><code class=" language-css"><span class="token selector">.tab-interface ul:not([role="tablist"]) </span><span class="token punctuation">{</span>
    <span class="token property">outline</span><span class="token punctuation">:</span> 0.5em solid red<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre><p>これで、適切に配置された<code>tablist</code>セマンティクスが存在しない場合、リスト要素に見苦しい赤枠が出現するようになります。</p><p><a href="https://www.w3.org/TR/wai-aria/roles#tablist"><span class="link"><code>tablist</code>ロールの仕様</span></a>で定められているように、tablist内には、<code>role="tab"</code>の形で明示的に<code>tab</code>ロールを持つ「所有要素」が<em>必要</em>です。この属性を各<code>&lt;li&gt;</code>要素に直接指定する実装方法もありますが、<code>&lt;a&gt;</code>要素を使用するのが私の好みです。そうすれば、この構造をリンクリストの形にデグレードすることも容易だからです。リンクリストとナビゲーションの詳細については、6章「ナビゲーション領域」を参照してください。</p><p><code>&lt;a&gt;</code>要素には<code>tab</code>ロールを指定すると決めたので、それに対応するテストを書き加えましょう。</p><pre><code class=" language-css"><span class="token selector">.tab-interface ul:not([role="tablist"]),
[role="tablist"] a:not([role="tab"]) </span><span class="token punctuation">{</span>
    <span class="token property">outline</span><span class="token punctuation">:</span> 0.5em solid red<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre><p>JavaScriptでタブインターフェイスのセマンティクスを加えると、リストのセマンティクスが余計になるため、各<code>&lt;li&gt;</code>要素に<code>role="presentation"</code>を指定して、リストのセマンティクスを消します。前のテストと同じロジックの後ろに、このテストのセレクタを書き足しましょう。</p>
<div class="translator_note" id="translator_note3736"><h4>訳註</h4><p>role="presentation"は、要素が本来持っている暗黙のセマンティクスを消すための指定です。これを指定すると、role属性の指定がないdivやspanのように、特定のセマンティクスを持たない扱いになります。なお、これはセマンティクスを消しているだけで、要素そのものを消しているわけではありません。要素の内容はスクリーンリーダーで読み上げられます。</p><p>"presentation"という表記は、一見「装飾のためのもの」とも読めるため、スクリーンリーダーに無視されると誤解する人もいるようですが、実際にはそのような効果はありません。WAI-ARIA 1.1では、"presentation"という値がこのような誤解を招いているため、同じ意味を持つ "none" という値を定義して、将来的にはこちらに移行していきたいという議論をしています。</p><h5>参考</h5><ul><li><a href="https://www.w3.org/TR/wai-aria-1.1/#presentation">Accessible Rich Internet Applications (WAI-ARIA) 1.1 - presentation (role)</a></li><li><a href="https://www.w3.org/TR/wai-aria-1.1/#none">Accessible Rich Internet Applications (WAI-ARIA) 1.1 - none (role)</a></li></ul></div>
<pre><code class=" language-css"><span class="token selector">.tab-interface ul:not([role="tablist"]),
[role="tablist"] a:not([role="tab"]),
[role="tablist"] li:not([role="presentation"])
</span><span class="token punctuation">{</span>
    <span class="token property">outline</span><span class="token punctuation">:</span> 0.5em solid red<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre><p>タブインターフェイスの適切なふるまいとしては、常にタブが1つだけ選択され、そのことが<a href="http://w3c.github.io/aria/aria/aria.html#aria-selected"><span class="link"><code>aria-selected</code></span></a>によってアクセシブルに明示されている必要があります。この選択されているタブだけを、ユーザーが<em>Tab</em>キーでフォーカスできるようにします。その他のタブにはすべて<code>tabindex="-1"</code>属性を指定し、矢印キーでのみ選択可能にするべきです。これを確認するには、さらに2つのテストセレクタが必要です。2つめのセレクタは、1つめのセレクタを反転したものになります。</p><pre><code class=" language-css"><span class="token selector">.tab-interface ul:not([role="tablist"]),
[role="tablist"] a:not([role="tab"]),
[role="tablist"] li:not([role="presentation"]),
[role="tablist"] a[aria-selected][tabindex="-1"],
[role="tablist"] a:not([aria-selected]):not([tabindex="-1"])
</span><span class="token punctuation">{</span>
    <span class="token property">outline</span><span class="token punctuation">:</span> 0.5em solid red<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre><p><code>tabpanel</code>の<code>aria-labelledby</code>属性値が誤っているパターンを見つけることさえできます。以下の例ではテストセレクタを追加し、適切なロールが設定されたタブパネルに「tab」で始まる<code>aria-labelledby</code>属性がない場合にマッチさせています。属性セレクタ内で、<em>～で始まる</em>、を意味する<code>^</code>修飾子を使って<code>[aria-labelledby^="tab"]</code>のように書くと、このようなファジーなマッチングが可能になります。</p><pre><code class=" language-css"><span class="token selector">.tab-interface ul:not([role="tablist"]),
[role="tablist"] a:not([role="tab"]),
[role="tablist"] li:not([role="presentation"]),
[role="tablist"] a[aria-selected][tabindex="-1"],
[role="tablist"] a:not([aria-selected]):not([tabindex="-1"]),
[role="tabpanel"]:not([aria-labelledby^="tab"])
</span><span class="token punctuation">{</span>
    <span class="token property">outline</span><span class="token punctuation">:</span> 0.5em solid red<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre><p>もちろん、<code>aria-labelledby</code>そのものが存在しないケースも、このセレクタで検知します。</p><p>最後に、すべてのタブパネルに<code>tabpanel</code>ロールが指定されていることを確かめましょう。ここでは、タブパネル群はリストの後に出現することになっています。このテストでは<a href="https://developer.mozilla.org/en/docs/Web/CSS/General_sibling_selectors"><span class="link">間接セレクタ</span></a>の<code>~</code>を使って、<code>tablist</code>の後ろに<code>tabpanel</code><em>ではない</em><code>&lt;div&gt;</code>があるかどうかを調べます。</p><pre><code class=" language-css"><span class="token selector">.tab-interface ul:not([role="tablist"]),
[role="tablist"] a:not([role="tab"]),
[role="tablist"] li:not([role="presentation"]),
[role="tablist"] a[aria-selected][tabindex="-1"],
[role="tablist"] a:not([aria-selected]):not([tabindex="-1"]),
[role="tabpanel"]:not([aria-labelledby^="tab"]),
[role="tablist"] ~ div:not([role="tabpanel"])
</span><span class="token punctuation">{</span>
    <span class="token property">outline</span><span class="token punctuation">:</span> 0.5em solid red<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre><p><code>tablist</code>とタブパネル群のあいだにコンテンツがあると、インターフェイスがバラバラになって混乱を招きます。先のテストに加えて、<code>tabpanel</code>ロールを持つ<code>&lt;div&gt;</code>が、<code>tablist</code>の直後に続く兄弟要素になっていることを確かめます。このテストセレクタでは、<a href="https://developer.mozilla.org/en/docs/Web/CSS/Adjacent_sibling_selectors"><span class="link">隣接セレクタ</span></a>（または隣接兄弟セレクタ）の<code>+</code>を使います。</p><pre><code class=" language-css"><span class="token selector">.tab-interface ul:not([role="tablist"]),
[role="tablist"] a:not([role="tab"]),
[role="tablist"] li:not([role="presentation"]),
[role="tablist"] a[aria-selected][tabindex="-1"],
[role="tablist"] a:not([aria-selected]):not([tabindex="-1"]),[role="tabpanel"]:not([aria-labelledby^="tab"]),
[role="tablist"] ~ div:not([role="tabpanel"]),
[role="tablist"] + div:not([role="tabpanel"])
</span><span class="token punctuation">{</span>
    <span class="token property">outline</span><span class="token punctuation">:</span> 0.5em solid red<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre><h3>エラーメッセージ</h3><p>これまでは、望ましくないパターンにマッチする要素に赤のアウトラインを表示してきました。しかし、エラーに関する説明がなければあまり役に立ちません。私が作った実験的なCSSテスト用ブックマークレットである<a href="http://heydonworks.com/revenge_css_bookmarklet/"><span class="link">revenge.css</span></a>では、アクセシビリティ関連のよくあるマークアップエラーをテストセレクタで特定し、疑似コンテンツを使ってエラーメッセージを提供していました。たとえば以下のセレクタでは、不適切な構成のリストに対して、大胆にメッセージを表示します。</p><pre><code class=" language-css"><span class="token selector">ol &gt; *:not(li)::after,
ul &gt; *:not(li)::after </span><span class="token punctuation">{</span>
    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'&lt;ul&gt;または&lt;ol&gt;の直接の子になれるのは&lt;li&gt;だけです。'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre><p>ただし、このエラーを画面に表示することには問題がともないます。このスタイルはサイト側のCSSと相互に影響するため、サイト側で疑似要素にスタイルをつけると、エラーのスタイルを上書きしてしまうことがあります。エラーメッセージの見た目や読みやすさを台無しにすることがないように、きわめて慎重にならなければなりません。連続する兄弟要素のエラー（前の例で検出している、<code>&lt;li&gt;</code>が誤って別のものに置き換わってしまった場合など）がある場合は、エラーを表示するスペースも問題になります。</p><p><a href="https://ffoodd.github.io/a11y.css/"><span class="link">A11y.css</span></a>――<a href="https://twitter.com/ffoodd_fr"><span class="link">ゲール・プパール（Gaël Poupard）</span></a>による、より高度なCSS製アクセシビリティテストツール――は、各疑似要素で指定したメッセージをドキュメント先頭に配置し、マウスカーソルを合わせると表示されるようにすることで、この問題を克服しています。</p>
<div class="translator_note" id="translator_note3771"><h4>訳註</h4><p>a11y.cssは2017年3月のバージョン3.3.0から表示方法を変更しており、要素のそばに直接メッセージを表示するようになりました。マウスカーソルを合わせると表示されるという方法ではタッチデバイスで見られないという問題もあったようです。</p><h5>参考</h5><ul><li><a href="https://github.com/ffoodd/a11y.css/releases/tag/v3.3.0">a11y.css v3.3.0 - New way to display messages</a></li></ul></div>
<p>しかし、なぜわざわざエラーメッセージをすべてページ上に表示する必要があるのでしょうか？代わりに、開発者ツールのCSSインスペクタをJavaScriptコンソールのように使って、そこにエラーメッセージを提供することもできます。どの要素を調査すべきか開発者に示すため、赤いアウトラインは残します。</p><p>このケースでは、単に<code>display:none;</code>で疑似コンテンツのメッセージを隠せばよいでしょう。</p><p><img src="images/dev_tools_1.png" alt="開発ツールのCSS宣言ブロックのスクリーンショット。contentの宣言の上にdisplay:none;宣言が指定されている。"/><br/><em>開発者ツールのCSS宣言ブロックのスクリーンショット。content宣言の上に<code>display:none;</code>宣言が指定されています。</em></p><p>些細な問題が2つほどあります。1つめの問題は、同じ要素に2つのエラーがある場合です。CSSインスペクタの中では、カスケードの最終結果以外のすべてがグレーアウト（打ち消し線がついたスタイルで表示）されてしまいます。これは、最後のエラー以外は当てはまらないかのような、誤解を招く見え方になります。2つめの問題は、<code>display:none;</code>はエラーメッセージのおまけにすぎない――すなわち、無用なノイズだという点です。</p><h4>ERRORプロパティ</h4><p>まずはっきりさせておきます！――CSSには<code>ERROR</code>プロパティなどというものはありませんし、追加される予定もありません。しかし、認識されないCSSプロパティを使ってCSSインスペクタにエラーログを残す方法には、いくつかのメリットあります。まず、冗長だった疑似コンテンツと<code>display:none;</code>プロパティの記述が不要になり、それぞれのCSSエラーの記述が以下のように短くなります。</p><pre><code class=" language-css"><span class="token selector">.tab-interface ul:not([role="tablist"]) </span><span class="token punctuation">{</span>
    <span class="token property">ERROR</span><span class="token punctuation">:</span> タブインターフェイスである<span class="token ignore">&lt;</span>ul<span class="token ignore">&gt;</span>にはtablist WAI-ARIAロールを指定しなければなりません。
<span class="token punctuation">}</span></code></pre><p>エラーをシングルクォーテーションで囲んで文字列としてカプセル化する必要がなくなっていることに注目してください。さらに、認識されないプロパティは詳細度の計算の対象になりません。ブラウザによりますが、これはグレーアウトされなくなるか、あるいは<em>すべて</em>の<code>ERROR</code>宣言がグレーアウトになるということです。これで問題が少し改善されます。私が気に入っているのは、Chromeが認識されないプロパティをハイライトするために、その頭に小さな警告サイン（⚠）をつけてくれることです。エラーをハイライトするのに役立つサインが自動的に取り入れられて、以下ような感じになります。</p><p><img src="images/dev_tools_2.png" alt="Chrome開発ツールのCSS宣言ブロック。エラー宣言が打ち消し線スタイルで表示されている。"/><br/><em>Chrome開発ツールのCSS宣言ブロック。エラー宣言が打ち消し線スタイルで表示されています。</em></p><p>残念ながら、上書きされた宣言と同様に、認識されない宣言にも図のように打ち消し線のスタイルが適用されます。だからといって、ぶち壊しにはなるわけではないというのが私の考えです。大文字のプロパティ名<code>ERROR</code>は、宣言をかなり明確に際立たせてくれます。とはいえ、<a href="https://twitter.com/dansketchpad"><span class="link">ダン・スミス（Dan Smith）</span></a>の助けを借りて、<a href="https://github.com/Heydon/css-error-property-style/blob/master/README.md"><span class="link">ちょっとしたChrome拡張</span></a>を用意してみました。これで打ち消し線を取り除き、赤地に白文字というエラーらしい見た目に置き換えることができます。</p><p><img src="images/dev_tools_3.png" alt="エラー宣言に、背景色に白文字というスタイルが適用されている。警告サインも依然として表示されている。"/><br/><em>エラー宣言に、赤地に白文字というスタイルが適用されています。警告サインも依然として表示されています。</em></p><p>認識されないプロパティを含むあらゆる宣言に対して、このスタイルが適用される点に注意してください。ただし、ありがたいことに、この拡張機能では<code>.has-ignorable-error</code>クラスを除外しているおかげで、もっとも一般的な認識されないプロパティ――ブラウザプレフィックス――にはこのスタイルが適用されないようになっています。</p>
<div class="translator_note" id="translator_note3800"><h5>訳註</h5><p>以下のコードはこの拡張機能の中で使用されているCSSで、Chromeの開発者ツール内の表示に適用されるスタイルです。</p></div>
<pre><code class=" language-css"><span class="token selector">.overloaded.not-parsed-ok.inactive:not(.has-ignorable-error) </span><span class="token punctuation">{</span>
    <span class="token property">text-decoration</span><span class="token punctuation">:</span> none <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token property">background</span><span class="token punctuation">:</span> red <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #fff <span class="token important">!important</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.overloaded.not-parsed-ok.inactive:not(.has-ignorable-error) .webkit-css-property </span><span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #fff <span class="token important">!important</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre><h3>1つにまとめる</h3><p>タブインターフェイスのパターンが<em>tab-interface.css</em>というファイルになるとしたら、命名規則に従い、<em>tab-interface.test.css</em>というファイルを付随させます――以下のような内容です。</p><pre><code class=" language-css"><span class="token selector">.tab-interface ul:not([role="tablist"]) </span><span class="token punctuation">{</span>
    <span class="token property">ERROR</span><span class="token punctuation">:</span> <span class="token string">"支援技術に認識されるために、タブインターフェイスである&lt;ul&gt;にはtablist WAI-ARIAロールを指定しなければなりません。"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">[role="tablist"] a:not([role="tab"]) </span><span class="token punctuation">{</span>
    <span class="token property">ERROR</span><span class="token punctuation">:</span> <span class="token string">"支援技術にタブとみなされるために、tablist内の&lt;a&gt;要素にはそれぞれtab WAI-ARIAロールを指定しなければなりません。"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">[role="tablist"] li:not([role="presentation"]) </span><span class="token punctuation">{</span>
    <span class="token property">ERROR</span><span class="token punctuation">:</span> <span class="token string">"WAI-ARIA presentationロールを指定して&lt;li&gt;のセマンティクスを取り除いてください。タブインターフェイスである場合、これらのセマンティクスは不適切です。"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">[role="tablist"] a[aria-selected][tabindex="-1"] </span><span class="token punctuation">{</span>
    <span class="token property">ERROR</span><span class="token punctuation">:</span> <span class="token string">"aria-selectedタブの-1というtabindex値を削除して、ユーザーがフォーカスできるようにし
てください。ユーザーはこのタブだけにはフォーカスを移動できる必要があります。"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">[role="tablist"] a:not([aria-selected]):not([tabindex="-1"]) </span><span class="token punctuation">{</span>
    <span class="token property">ERROR</span><span class="token punctuation">:</span> <span class="token string">"選択されていないタブはすべて、tabindex値を-1とし、左右の矢印キーを使う方法でのみフォーカス可能にするべきです。"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">[role="tabpanel"]:not([aria-labelledby^="tab"]) </span><span class="token punctuation">{</span>
    <span class="token property">ERROR</span><span class="token punctuation">:</span> <span class="token string">"各tabpanelには、「tab」で始まり、その後ろに対応するタブ番号が続くaria-labelledby属性を指定するべきです。これは、このインターフェイスにおけるタブシステムの運用規則です。"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">[role="tablist"] ~ div:not([role="tabpanel"]) </span><span class="token punctuation">{</span>
    <span class="token property">ERROR</span><span class="token punctuation">:</span> <span class="token string">"各タブパネルを、それをコントロールするtablistと正しく関連付けるために、明示的にtabpanel WAI-ARIAロールを指定する必要があります。"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">[role="tablist"] + div:not([role="tabpanel"]) </span><span class="token punctuation">{</span>
    <span class="token property">ERROR</span><span class="token punctuation">:</span> <span class="token string">"tablist直後の最初の要素は、tabpanel WAI-ARIAロールが指定されたタブパネルであるべきです。スクリーンリーダーユーザーが、選択したタブから開いたタブパネルへと直接移動できなければなりません。"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.tab-interface ul:not([role="tablist"]),
[role="tablist"] a:not([role="tab"]),
[role="tablist"] li:not([role="presentation"]),
[role="tablist"] a[aria-selected][tabindex="-1"],
[role="tablist"] a:not([aria-selected]):not([tabindex="-1"]),[role="tabpanel"]:not([aria-labelledby^="tab"]),
[role="tablist"] ~ div:not([role="tabpanel"]),
[role="tablist"] + div:not([role="tabpanel"])
</span><span class="token punctuation">{</span>
    <span class="token property">outline</span><span class="token punctuation">:</span> 0.5em solid red<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre><p>もちろん、このままの形でも、技術的にビルドに<em>失敗</em>することはありません。これは単にフロントエンド開発者に見えるよう、エラーを視覚的にハイライトするだけです。とはいえ、この<em>.test.css</em>ファイルは、間違いなく、本番環境には含めないほうがよいものです。<em>.test.css</em>の命名規則は、本番用ビルドのフォルダにコピーされないようにするのに役立ちます。</p><h2>1つですべてを賄う必要はない</h2><p>このテスト駆動マークアップのアプローチと、標準的な自動アクセシビリティテストとの違いははっきりしています。<a href="https://ffoodd.github.io/a11y.css/"><span class="link">a11y.css</span></a>などのCSSベースのブックマークレットを使っても、あるいは<a href="http://tenon.io/"><span class="link">tenon.io</span></a>などの高度なAPIを使っても、明らかになるのは一般的なエラーです。このような自動テストは、特にWCAGに準拠する場合には重要です。しかし、自分なりにカスタマイズしたパターンや構造のために独自のテストを書けば、期待する形式になっているかどうか、よりきめ細かく、詳細にテストすることができます。</p><p>タブインターフェイスの実装はさまざまです。たとえば、タブとタブパネルのリレーションシップを、<code>aria-labelledby</code>ではなく<code>aria-controls</code>を使って構築することもできます。ここで書いたテストは、<em>私</em>の実装――私ならではのパターン――が所定の構造になっていることを確認するためのものです。追加のJavaScriptフックやCSSフック（<code>data</code>属性や<code>class</code>属性）が必要が場合、それらをテストすることもできます。</p><p>インクルーシブデザインパターンの独自ライブラリを開発する際は、ここで紹介したようなテストをいくつか書いてみることをおすすめします。パターンが時間の経過とともに、そして同僚や仲間たちの手を経るなどして進化していく中で、完全性が保たれていることを確認できます。エラーが発生すれば、なぜその構造を選択したのか、その構造がいかにインクルーシブであるのかを――そのエラーメッセージを通じて――説明する、絶好の機会になります。</p></div>
</body></html>