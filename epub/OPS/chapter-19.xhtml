<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<html xml:lang="ja" xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8" /><title>8章：インクルーシブ・プロトタイピング</title><link rel="stylesheet" href="css/book.css" type="text/css"/><meta name="EPB-UUID" content="f9202370-6e5d-44d5-b924-02b34d51163d"/></head><body><div class="body"><h1>8章：インクルーシブ・プロトタイピング</h1><p>本書ではいくつかの問題に対し、インクルージョンを念頭においた解決策を数多く提供しています。中には（<em>ナビゲーション領域</em>のパターンのように）そのままプロジェクトで使えそうなものもあるでしょうが、これらは本当に単なる例にすぎません。あなたがデザイン上の問題に遭遇し、問題解決のために独自のパターンを編みだそうとする際に、これらの例は<em>インクルーシブ思考</em>の実践を助けてくれるでしょう。プロダクトを堅牢にするためには、デザインプロセスの初期段階でインクルーシブ思考に時間を費やす必要があります。</p><p>プロジェクトにおける<a href="http://www.uxapprentice.com/discovery/"><span class="link">発見フェーズ</span></a>で潜在的ユーザーについて学び、その結果を活かして、アプリでどのようなタスクを実行できるようにするかを考え始めます。具体的には、動詞をためていくのです。作成する、ソートする、編集する、購入する、読む、返信する、動かす、取り込む、描く、アップロードする。</p><p>絶対に守らなければならないことは、ルック＆フィールがどうなるかよりも先に、まずアクションがどのように行われるかを考えるということです。見た目の美しさや楽しさについて考えるのは、この段階ではまだハイレベルすぎます。必要なのはユーザビリティのためのプロトタイプであり、このプロトタイピングで得られた体験がインクルーシブであればあるほど、より多くの人がプロダクトを使いやすいと感じることになるでしょう。</p><h2>ペーパープロトタイピング</h2><p>私がデザイナーや開発者として取り組んだプロジェクトは多数ありますが、成功したプロジェクトではほぼすべて、デザインプロセスの初期段階でインタラクティブ・ペーパープロトタイピングを行っていました。たとえば、<a href="https://greatbritishpublictoiletmap.rca.ac.uk/"><span class="link">Great British Public Toilet Map</span></a>のプロジェクトでは、まず<a href="https://www.neontribe.co.uk/"><span class="link">Neontribe社</span></a>のオフィスにあるトイレの絵を描いて切り抜くことから始めました。</p><p>スケッチと混同しないでください。ペーパープロトタイピングは、紙から<em>インタラクティブな</em>プロトタイプを作成することです。即席デモ版のアプリケーションを――手動で操作する人の助けを借りて――テストユーザーが試せるようにします。</p><p>ペーパープロトタイピングには、コードで実装された本物そっくりのデモよりも優れている点がいくつもあります。</p>
<ul>
<li><strong>紙ならほぼ誰でも取り組むことができる</strong>。<br />コードによるプロトタイプでは、フロントエンド開発のスキルがある程度必要になります。紙で作業すると決めれば、バックエンド開発者や、デザインスキルに自信のないメンバーも含め、他のチームメンバーもトライできるようになります。重要なのは、関係者やテストユーザーを試行錯誤に巻き込むこともできるという点です。</li>
<li><strong>試行錯誤が簡単</strong>。<br />ペーパープロトタイプはたいてい、ただ紙にペンで描いたものをスティッキータックでくっつけたものです。スティッキータックを使ってコンポーネントのパーツをくっつけているだけなので、パーツをあちこちに移動するのは簡単です。新しいパーツが必要になったら、予備の紙片とマーカーペンを取り出すだけ。これならテストセッションの最中でも作業でき、その場に居合わせるすべての人を巻き込むことができます――フロントエンド開発者がノートPCを落ち着きなくいじっているあいだ、手持ちぶさたで待っているよりもはるかによいでしょう。
<div class="translator_note" id="translator_note2273"><h3>訳註</h3><p>スティッキータック (Sticky Tack) はアメリカAmscan社の製品で、ちぎって使うタイプの固形粘着剤です。セロハンテープなどと異なり、簡単に貼ったりはがしたりすることができます。日本ではコクヨから「ひっつき虫」という名で類似商品が出ています。</p><h4>参考</h4><ul><li><a href="http://www.amscan.co.uk/our_products_selection/party_decorations/scene_setters/sticky_tack_value_pack_includes_clip_strip_12_pkg/">Sticky Tack Value Pack Includes Clip Strip</a></li><li><a href="http://www.kokuyo-st.co.jp/stationery/hittsuki/">何度も使えるソフト接着剤　ひっつき虫｜コクヨ ステーショナリー</a></li></ul></div></li>
<li><strong>洗練されていない</strong>。<br />忠実度の高いモックアップやプロトタイプの問題点は、完成したように見えることです。ユーザーには思いやりがあるので、多大な労力をかけたように見えるものに対しては、正直なフィードバックがなかなかもらえないのです。そもそも紙で作られていれば、リアルなアプリケーションでないことが明らかなので、細かい見た目に関するフィードバックを最小限に抑えられます。議論の焦点を、そのアイデアで問題がうまく解決できるかどうか、という点に当て続けることができます。</li>
</ul>
<h3>必要なもの</h3><p>さて、ペーパープロトタイピングを始めることになったと想像してください。まず、どんな道具が必要なのか、なぜ必要なのかご説明しましょう。</p>
<ul>
<li>大判の紙（A2サイズを推奨）</li>
<li>ハサミ</li>
<li>スティッキータック</li>
<li>耐水性マーカーペン</li>
<li>アセテートフィルム<div class="translator_note" id="translator_note2288"><h4>訳註</h4><p>アセテートフィルムは、アセチルセルロース樹脂で作られた透明なフィルムシートで、かつては写真フィルムに使用されていました。現在では液晶ディスプレーの部材として使用されているようです。</p><p>ホワイトボード用のペンで書いたり消したりすることが可能な、透明で薄いフィルム状のものがあれば良いので、たとえばクリアファイルを切って利用するなどしても良いでしょう。</p></div></li>
<li>ホワイトボード用のペン</li>
</ul>
<h4>大判の紙</h4><p>アプリケーションが小さな携帯端末用であれ、大きな設置型スクリーン用であれ、いずれにせよプロトタイプは大きなものから始めるほうがよいでしょう。ビューポート（紙製アプリケーションの各パーツが貼りつけられる紙面）が大きければ、テストの場にいる多くの人々が同時に、アプリケーションが使われている様子を見ることができます。全員が参加しているように感じることができ、より多くのよいメモを取ることができます。当然ながら、プロトタイプを載せるのに十分な大きさのテーブルも必要です！</p><h4>ハサミ</h4><p>本物のアプリケーションと同様、プロトタイプのビューポートは小さなセクションやコンポーネントに分けられます。大判の紙のいくつかを小さく切って、台紙の上に配置する必要がでてくるでしょう。裁断機があれば便利ですが、すべての辺が平行でなくても大丈夫です。多少（妥当な範囲で！）いびつに見えるプロトタイプのほうが、敷居が低くてとっつきやすくなります。</p><h4>スティッキータック</h4><p>スティッキータックを使うことで、紙製アプリケーションをモジュール化することができます。アプリの操作結果を示すときや、レイアウトの試行錯誤の際に、コンポーネントをすばやく動かせます。コンポーネントの一部を動かしたり置き換えたりする可能性がある場合は、その部分を別の紙に切り分けて、粘着剤で適切な箇所に貼りつけるようにしましょう。</p><h4>耐水性マーカーペン</h4><p>当然ですが、ラベルを書いたり、ボタンの輪郭線を引いたり、他にもさまざまなマーキングをする必要がありますので、複数のペンが必要になります。ただし、使う色は数色に絞りましょう――これはアートではありません。私はたいてい、黒のペンを2～3本ほど用意し、あとはエラー用に赤、成功のメッセージ用に緑、リンクやボタン用に青を使います。</p><h4>アセテートフィルム</h4><p>アプリケーションを作っている場合、おそらく何らかの入力フィールドができることになるでしょう。アセテートフィルムは入力フィールドのプロトタイピングに最適です。ペーパープロトタイプにテストユーザーが一時的に書き込めるようになるからです。間違いを修正することもできますし、書かれたものを即座に消せますので、すぐに次のテストセッションをはじめることができます。</p><h4>ホワイトボード用のペン</h4><p>もちろん、アセテートフィルムに書き込むときに使います (上記参照)。プロトタイプの作成時には使用しませんが、以下で説明するように、テストの最中に必要になります。テストセッションに持っていく一本に、インクが残っていることを確かめておきましょう！</p><p><img src="images/tacking.png" alt="左：四隅にスティッキータックが貼りつけられた長方形の紙。右：それを大きい紙に貼りつけている様子。"/><br/><em>コンポーネントの四隅にスティッキータックを貼りつけたら（1）、より大きな親コンポーネントの上に配置します（2）。後からいつでもはがして移動できます。</em></p><h3>ペーパープロトタイプによるテスト</h3><p>ペーパープロトタイプによるテストは少し独特な儀式であり、覚えておくべきことや、準備しておくべきことがいくつかあります。</p>
<ol>
<li><strong>予備をたくさん用意する。</strong>よいテストセッションでは試行錯誤が大いに盛りあがる傾向があります。その盛り上がりを支えるためには、大量の予備の紙、たくさんのペン、ハサミを行き渡らせることが肝要です。</li>
<li><strong>シナリオを書く。</strong>テストユーザーの前に突然プロトタイプを置いても、ポカンとするだけで何もできないでしょう。そのアプリケーションで解決できるはずの一連のタスクを実行してもらうように、シナリオを用意してください。プライバシーへの配慮のため、このシナリオは、個人の実体験に基づかない架空のものにすることが重要です。</li>
<li><strong><em>コンピューター役</em>を任命する。</strong>プロトタイプを作った誰かが、それを動かさなければなりません。テストユーザーによる（演じられた）入力に反応するということです。たとえば、テストユーザーがボタンを押したら、コンピュータはそれに反応してアプリケーションの状態を変えなければなりません。ボタン押して何かを削除したのなら、その紙のコンポーネントをはがして脇にどけることになるでしょう。</li>
<li><strong>明確な指示を与える。</strong>テストユーザーに、このインターフェイス内のインタラクティブだと思える項目はどれでも触って良いと伝えてください。重要なのは、プロトタイプを使っているとき何を考えているか大声で話すよう指示することです。これは、どこにユーザビリティの問題があり、何を克服する必要があるか理解するうえで大切なのです。</li>
<li><strong>落ち着かせる。</strong>ユーザーは自分が試されていると感じてしまいがちです。ユーザーをテストしているのではなく、このアプリケーションをテストしているのだと明確にしてください。操作方法がわからなくても、それはあなたの落ち度ではなく、デザイナーのミスだと事前に言っておきます。</li>
</ol>
<p><img src="images/test_usability.png" alt="左：スマートフォンの上に、チェックマークが描かれた重いおもりが不安定に吊るされている。右：ユーザーの上に、バツマークが描かれた重いおもりが不安定に吊るされている。その下には、「Test usability, not users（ユーザーではなく、ユーザビリティをテストする）」と書かれている。"/><br/><em><a href="http://lilydart.com/"><span class="caption-link">ユーザビリティのエキスパート、リリー・ダート（Lily Dart）</span></a>のために私が作ったTシャツのデザイン。彼女が、私の元勤務先<a href="https://www.neontribe.co.uk/"><span class="caption-link">Neontribe社</span></a>のコンサルタントだったときのことです。「Test usability, not users.（ユーザーではなく、ユーザビリティをテストする）」というのは彼女のモットーです。</em></p><h4>テストセッションのレイアウト</h4><p>テストを準備している様子がイメージしやすくなるように、注釈つきのイラストを用意しました。</p><p><img src="images/paper_aerial.png" alt="テストセッションを上から見た図。参加者はテーブルを囲んで座っている。左にコンピューター役をする人、右にテストユーザーが2人いる。プロトタイプを操作するテストユーザーは1人だけ。下部中央にメモ係が座っている。"/></p>
<ol>
<li>コンピューター役をする人。</li>
<li>プロトタイプのこまごまとしたパーツ（別の画面や、今はまだ表示されていない機能など）。</li>
<li>テスト対象のアプリケーション。</li>
<li>プロトタイプを操作するテストユーザー。</li>
<li>操作に参加しない、2人目のテストユーザー。誰かがいっしょに座っているだけでユーザーは心強く感じますし、会話が促されます。</li>
<li>メモ係。コンピューターとテストユーザーの間という、中立的な位置に座っていることに注目してください。ここに座ると、テストユーザーは観察されていることをあまり意識しなくなるでしょう。</li>
</ol>
<h2>紙からコードへ</h2><p>ペーパープロトタイプによるテストのセッションを何度か行った後には、破り捨てられた大量の紙片と、アプリケーションをより良くするためのアイデアが残されているはずです。破られずに生き残ったいくつかの紙片について、どのような方法でコード化してモジュールとして実装するのか、これがプロダクトを最終的にインクルーシブにするために重要となります。<a href="https://www.smashingmagazine.com/2015/04/an-in-depth-overview-of-living-style-guide-tools/"><span class="link">生きたスタイルガイド（Living Style Guide）</span></a>を作り出す際に、本書で学んできたインクルーシブなコーディングの実践手法を活用するとよいでしょう。</p><p>大規模なチームでは、最善案を模索するための建設的な競争から、コラボレーション効果が生まれることもあります。<a href="http://alistapart.com/article/from-pages-to-patterns-an-exercise-for-everyone"><span class="link">「From Pages To Patterns: An Exercise For Everyone」</span></a>という記事の中で、シャーロット・ジャクソン（Charlotte Jackson）は、コンポーネントがどんな名前であるべきなのかを合意したら、一直線にコーディングに移るべきだとすすめています。シャーロットの提唱する方法は以下のようにシンプルです。</p>
<ul>
<li>各自それぞれひとつのコンポーネントを担当する。</li>
<li>HTMLとCSSでコード化する。制限時間を設け、完璧にしたいという魔の誘惑に抵抗する。デザインが変更されたらコードを破棄してもかまわない。</li>
<li> コードを比較して議論する。</li>
<li> これを繰り返す。</li>
</ul>
<p>このやり方を本当に最大限に活用するために、インクルーシブデザインの観点から提案したいことが2つあります。1つめですが、さまざまな解決策を比較できるよう、複数人（または複数のチーム）で同じコンポーネントに取り組むことをおすすめします。2つめですが、アクセシビリティを検討の前提条件にすべきです。キーボードでアクセスできない、構造が不適切である、スクリーンリーダーが理解できない、といった解決策はアウトです。</p><p>プロトタイプをコード化する最も早い方法は、<code>&lt;input&gt;</code>、<code>&lt;select&gt;</code>、<code>&lt;a&gt;</code>、<code>&lt;button&gt;</code>といった標準のHTML要素を使用することです。これらの要素は、コンポーネントを機能させるために必要な動作を提供してくれます。問題に直面するのは決まって、コンポーネントを過剰にカスタマイズしようとしたときです。まずは紙からHTMLへと一直線に進み、効率的なコーディングと、インクルーシブな体験の基礎を築きます。この基礎をベースにして、CSSやJavaScriptで体験をリッチにしていくことができます。</p><p>結局のところ、HTMLがなければ、そこに貼りつけるCSSやJavaScriptを<em>存在させる</em>ことさえできません。どのみちHTMLを書くわけですから、どうせならいちばん最初にHTMLを用意したほうがいいですよね。</p></div>
</body></html>
