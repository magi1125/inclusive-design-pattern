<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<html xml:lang="ja" xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8" /><title>10章：フィルターウィジェット</title><link rel="stylesheet" href="css/book.css" type="text/css"/><meta name="EPB-UUID" content="f9202370-6e5d-44d5-b924-02b34d51163d"/></head><body><div class="body"><h1>10章：フィルターウィジェット</h1><p>9章「商品リスト」は、商業的な面に目を向け、商品を陳列するためのパターンについて考察しました。どのように個々の商品コンポーネントをマークアップし、どのようにそれら全体をグループ化するかということは、いずれも、インクルーシブデザインと深い関係がありました。さらに、検索エンジンの検索結果など、自身のサイト<em>以外</em>のインターフェイスにも、アクセシブルな情報を潤沢に含めることができるようにしました。</p><p>しかし、ユーザーがコンテンツのリストを並べ替えたり、表示を制御したりするツールについては、まだ扱っていませんでした。フィルターツールは、検索結果の機能の軸を増やします。表示をユーザーがコントロールできるようになり、見ている情報に優先順位をつけやすくなります。<em>ユーザーに制御させる</em>、というのは、先に紹介したヘニー・スワンの原則の2番目の項目でした。</p>
<ol>
<li>ユーザーに選択肢を与える。</li>
<li><strong>ユーザーに制御させる。</strong></li>
<li>なじみやすさを念頭に置いてデザインする。</li>
<li>価値を付加する機能を優先する。</li>
</ol>
<p>前述したナビゲーション領域と同様、フィルターウィジェットも<em>メタ</em>的であり、ページのコンテンツを変更する機能を提供するコンテンツとなります。これをインクルーシブにするためには、目の不自由なユーザーやキーボードユーザー、パフォーマンスの潜在的な問題、見た目の明確さについて考慮する必要があります。</p><p>このパターンではプログレッシブエンハンスメントを基礎としています。CSSとJavaScriptなしでも機能するように作ってから、これら2つの技術をそれぞれ少しずつ適用して、インクルーシブに体験を改善していきます。</p><h2>見た目の例</h2><p><img src="images/filter.png" alt="並べ替えというラベル、オプション（新着順、人気順、価格の安い順、価格の高い順）、および並べ替えるボタンが黒い枠の中に横並びで表示されている。選択されたフィルターは青の枠で囲まれている。"/></p><p>選択されたコントロールが色に依存しない方法でハイライトされており、これによって、色覚異常やロービジョンのユーザーにも、どのオプションが選択されているか判別できることに注目してください。</p><h2>マークアップ</h2><p>一部の複雑なJavaScriptウィジェット、例えば<a href="http://heydonworks.com/practical_aria_examples/#tab-interface"><span class="link">タブインターフェイス</span></a>などは、キーボードやスクリーンリーダーに対してアクセシブルにするために、WAI-ARIAによるセマンティクスの追加と、（JavaScriptによる）キーボードバインディングのカスタマイズを必要とします。ただし、<a href="https://www.w3.org/TR/aria-in-html/#first-rule-of-aria-use"><span class="link">Using ARIAのFirst rule of ARIA use</span></a>には、以下のように書かれています。</p><blockquote class="blockquote-regular"><p>必要なセマンティクスや動作が<strong>組み込まれた</strong>ネイティブのHTML要素や属性が存在する場合は、要素の転用とARIAのロール、ステート、プロパティの追加でアクセシブルにする代わりに、<strong>ネイティブのものを使用します</strong>。</p></blockquote><p>ブラウザによって実現されている標準のインタラクティブ機能の方が、JavaScriptによって作られたものよりもパフォーマンスに優れ、堅牢です。標準の機能が使えるならそれを使うべきで、使えるかどうか調査する価値はあります。</p><p>たいていの問題は、HTMLに標準で用意されているフォーム関連要素のふるまいをうまく利用することで解決できます。都合のよいことに、これらの要素には特有のセマンティクス、キーバインディング、ふるまいが最初から組み込まれています。JavaScriptが利用できる（できるかもしれない）からといって、それを使って<a href="http://www.heydonworks.com/article/reinventing-the-hyperlink"><span class="link">車輪の再発明</span></a>をするべきということではないのです。</p><p>ともあれ、並び替えウィジェットを用意しましょう。並び替えのオプションはそれぞれユニークなラベルを持ち、どれか1つだけが選択できるようになっています。これらのオプションは1つのグループとしてまとめられ、共通のラベルがつけられています。この構造は、<code>&lt;fieldset&gt;</code>、<code>&lt;legend&gt;</code>、ラジオボタンを使って作成できます。9章「商品リスト」に引き続き、商品を扱っていると想定するなら、ウィジェットは以下のようになるでしょう。</p><pre><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span>"form"</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span>"sorter"</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span>"get"</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">&gt;</span></span>並べ替え<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>"radio"</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>"sort-method"</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"most-recent"</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span>"most-recent"</span> <span class="token attr-name">checked</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span>"most-recent"</span><span class="token punctuation">&gt;</span></span>新着順<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>"radio"</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>"sort-method"</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"popularity"</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span>"popularity"</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span>"popularity"</span><span class="token punctuation">&gt;</span></span>人気順<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>"radio"</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>"sort-method"</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"price-low-high"</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span>"price-low-high"</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span>"price-low-high"</span><span class="token punctuation">&gt;</span></span>価格の安い順<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>"radio"</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>"sort-method"</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"price-high-low"</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span>"price-high-low"</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span>"price-high-low"</span><span class="token punctuation">&gt;</span></span>価格の高い順<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>"submit"</span><span class="token punctuation">&gt;</span></span>並べ替える<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span></code></pre><h4>コードの補足</h4>
<ul>
<li><code>&lt;form&gt;</code>に<code>form</code>というARIA roleを指定しているのは意外に思うかもしれませんが、これによってウィジェットが1つの領域になり、スクリーンリーダーでショートカットを使ってナビゲーションできるようになります。このウィジェットの基本機能はJavaScriptなしでも動作しますが、その場合はページが再読み込みされ、ユーザーはページの先頭に戻されてしまいます。この指定があれば、フォームにすぐに戻ってくることができます。<div class="translator_note" id="translator_note2865"><h4>訳註</h4><p>ARIA in HTMLでは、form要素は暗黙のformロールを持ち、明示的にrole="form"を指定すべきではないとされています。しかし実際には、多くのスクリーンリーダーの実装は、role属性のないform要素をランドマークとしては扱いません。そのため、role属性を明示的に指定するとランドマークとして扱われ、ランドマークにジャンプする機能で移動できるようになります。</p><p>なお、ほとんどのスクリーンリーダーは、フォームコントロールにジャンプする機能を備えています。role="form"の指定がない場合でも、フォームに飛ぶ機能を利用すれば比較的容易に戻ることができるでしょう。</p><h5>参考</h5><ul><li><a href="https://www.w3.org/TR/html-aria/#docconformance">ARIA in HTML - 2. Document conformance requirements for use of ARIA attributes in HTML</a></li></ul></div>
<div class="translator_note" id="translator_note2866"><h4>訳註</h4><p>JavaScriptが無効の場合にはGETメソッドでフォームを送信する動作となるため、別URLへの遷移となり、ページが再読み込みされます。するとスクリーンリーダーのユーザーは、またページの先頭から読み始めることになります。</p></div></li>
<li>この<code>&lt;form&gt;</code>は「並べ替え」ラベル以下のラジオボタンをグループ化する<code>&lt;fieldset&gt;</code>を1つ含み、その後に送信ボタンが続きます。ラジオボタンの<code>&lt;input&gt;</code>にフォーカスがあたると、<code>&lt;legend&gt;</code>の内容が読まれ、続いて<code>&lt;input&gt;</code>に対応する<code>&lt;label&gt;</code>が読み上げられます。初期状態では、先頭のオプション（「新着順」）がチェックされた状態になっています。ブラウザの標準動作では、このチェックされた<code>&lt;input&gt;</code>だけが<em>Tab</em>キーでフォーカス可能です。フォーカスすると、「並べ替え グループ、新着順 ラジオボタン、チェックされています、全4個中1個」のように読み上げられるでしょう。「並べ替え」はグループのラベル、「新着順」は要素のラベル、「チェックされています」は要素の状態（state）、「ラジオボタン」は要素の役割（role）を表しています。4という数字は、同じ<code>name="sort-method"</code>を共有するラジオボタンの総数です。</li>
<li>ブラウザは、異なるオプションを選択する機能を（上下左右の）矢印キーに担わせています。たとえば右矢印キーを押すと、次の<code>name="sort-method"</code>属性を持つラジオボタン――「人気順」にフォーカスが移り、選択されます。スクリーンリーダーでは「並べ替え グループ、人気順 ラジオボタン、チェックされています、全4個中1個」のように読み上げられるでしょう。ちなみに、「並べ替え」はどのラジオボタンを選択しても読み上げられます。このウィジェットからいったん離れて他の要素を見てまわっても、ここに戻れば「並べ替え」と読まれます。これにより、現在選択されているオプションがどれであっても、これが並べ替え機能であることがすぐにわかります。</li>
<li>この段階では、<code>get</code>メソッドでフォームを送信してサーバー側でページを再表示しています。クライアント側のJavaScriptには依存していません。たとえば、人気順のオプションを選択してフォームを送信すると、<code>?sort-method=popularity</code>というクエリパラメータがついた状態でページが表示されます。後の「JavaScriptによる拡張」セクションで、JavaScriptを用いて体験を改善していきます。</li>
</ul>
<h2>CSSによる拡張</h2><p>この並び替えウィジェットは、慣習的で広くサポートされているマークアップによってデザインされているため、すでにキーボードユーザーとスクリーンリーダーユーザーにとってアクセシブルになっています。また、JavaScriptに依存することなく操作可能で、推測しやすく、なじみのあるフォームになっています。</p><p>標準のラジオボタンは、本質的にインクルーシブではありますが、スタイルの調整が難しいという問題があります。これが、標準のラジオボタンを使わずに、まったくアクセシブルではない<code>&lt;div&gt;</code>や<code>&lt;span&gt;</code>ベースの解決策や、比較的複雑で問題が起こりやすいWAI-ARIAの実装を選んでしまう主な原因になっています。</p><p>しかし、「<a href="http://www.sitepoint.com/replacing-radio-buttons-without-replacing-radio-buttons/"><span class="link">Replacing Radio Buttons Without Replacing Radio Buttons</span></a>」にも書きましたが、実際に<code>&lt;input type="radio"&gt;</code>要素に直接スタイルを適用<em>しなければならない</em>わけではありません。ラジオボタンを隠し、代わりに<code>&lt;label&gt;</code>にスタイルをつければよいのです。</p><p>以下の構造では、<code>for</code>と<code>id</code>によって関連づけが行われており、<code>&lt;label&gt;</code>をクリックする（もしくは押す）と、関連づけられた<code>&lt;input&gt;</code>を操作したことになります。つまり、<code>&lt;label&gt;</code>は<code>&lt;input&gt;</code>のクリック領域を拡張します。</p><pre><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>"radio"</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>"sort-method"</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"most-recent"</span> <span class="token attr-name">checked</span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span>"most-recent"</span><span class="token punctuation">&gt;</span></span>新着順<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span></code></pre><p>こうすることで、タッチユーザーに対して、より大きく、より人間工学的に優れたヒットエリアを提供できます。それだけでなく、CSSを使って<code>&lt;input&gt;</code>の<code>:focus</code>と<code>:checked</code>の状態を表現することもできます。隣接セレクタを使って、状態をラベルに<em>そのまま引き継いでいる</em>ことに注目してください。</p><pre><code class=" language-css"><span class="token selector">[type="radio"] + label </span><span class="token punctuation">{</span>
    <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>
    <span class="token comment">/* その他、基本のスタイル */</span>
<span class="token punctuation">}</span>

<span class="token selector">[type="radio"]:focus + label </span><span class="token punctuation">{</span>
    <span class="token comment">/* フォーカス時のスタイル */</span>
<span class="token punctuation">}</span>

<span class="token selector">[type="radio"]:checked + label </span><span class="token punctuation">{</span>
    <span class="token comment">/* 選択時のスタイル */</span>
<span class="token punctuation">}</span></code></pre><p>これで、インタラクションや視覚的なフィードバックをすべてラベルに引き受けてもらうことができたので、融通の利かない見苦しいラジオボタンを安心して隠すことができます。</p><pre><code class=" language-css"><span class="token selector">.sorter [type="radio"] </span><span class="token punctuation">{</span>
    <span class="token property">position</span><span class="token punctuation">:</span> absolute <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 1px <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 1px <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span>0 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span>0 <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token property">clip</span><span class="token punctuation">:</span> rect(1px, 1px, 1px, 1px)<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<div class="translator_note" id="translator_note2896"><h3>訳註</h3><p>通常、著者側のCSSで !important を指定することは避けるべきです。このコードにある大量の !important は、「見苦しいラジオボタン」を徹底的に隠してやろうという著者のジョークでしょう。</p><p>なお、CSS Basic User Interface Module Level 4ではappearance: noneの指定でOSやブラウザ側のルールに沿ったUIのスタイリングを抑制する仕様が検討されており、将来的にはこちらを使うのが主流になるかもしれません。</p><h4>参考</h4><ul><li><a href="https://www.w3.org/TR/2015/WD-css-ui-4-20150922/#appearance-switching">CSS Basic User Interface Module Level 4 - 8.1. Switching appearance</a></li></ul></div>
<p>要約すると、HTMLとCSSで実現できることを、JavaScriptとWAI-ARIAで埋め合わせてはいけない、ということです。マーク・オットー（Mark Otto）の「<a href="http://wtfforms.com/"><span class="link">WTF, forms?</span></a>」では、このようなCSSによる拡張を、チェックボックス、<code>&lt;select&gt;</code>要素、ファイル入力（input type="file"）に対して行う方法を紹介しています。</p><h2>JavaScriptによる拡張</h2><p>このパターンはすでに必要な機能を全て備えており、かつ堅牢です。ただ、少しばかり<em>ぎこちない</em>といえるでしょう。ユーザーがJavaScriptを利用できる場合は、可能な限り体験を拡張すべきです。ただし、JavaScriptが利用できるからといって、調子に乗って、すべてを捨てて書き直すべきだということではありません。もう土台はしっかりしています。すでにJavaScriptなしで問題なく動いている部分を、JavaScriptで作り直す必要は全くありません。</p><p>現状では、ユーザーが別のフィルターオプションを選択して並べ替えボタンを押すと、そのたびにページが再読み込みされます。これがスクリーンリーダーユーザーとキーボードユーザーにとって何を意味するか、もうおわかりでしょう。操作していた箇所にたどり着くために、このページの情報をもう一度全部聞かされたり、ドキュメントの前置き部分をすべて通過してきたりしなければなりません。あるいは、その両方ということもあります。</p><p>可能な限り、<a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest"><span class="link">XHR</span></a>を利用してリストを再表示することを心がけるべきです。そうすることで、ページをリロードせずに新しいコンテンツを追加することができます。キーボードに頼っているユーザーは、操作していた（フォーカスが残ったままの）ウィジェットから、そのままコンテンツの操作を続けることできます。</p><h3>読み込み待ち</h3><p>コンテンツが処理中であり、表示に時間がかかることをユーザーに伝えるのは、以下のような、どこでも見かける読み込み中アイコンの役どころです。</p><p><img src="images/loading.png" alt="読み込み中であることを示す円形のグラフィックと、「商品リストを読み込み中…」というテキスト。"/></p><p>問題は、これを確認できるのは目が見えているユーザーだけだということです。コンテンツの読み込みが完了したことをスクリーンリーダーユーザーにも伝えるのは重要なことです。そうしないと、ユーザーは並べ替えボタンを押しても何も起きなかったのかと思い、さまよい続けることになりかねません。</p><p>WAI-ARIAの仕様は、このような状況のために<a href="https://www.w3.org/TR/wai-aria-1.1/#dfn-live-region"><span class="link">ライブリージョン</span></a>を提供しています。通常、コンテンツがスクリーンリーダーで読み上げられるのは、以下の場合のみです。</p><ul><li>要素が、ユーザーまたはプログラムによってフォーカスされているとき。</li><li>ユーザーがスクリーンリーダーのナビゲーションコマンドを使って、ある要素に移動したとき（たとえば、NVDAでは数字の「<em>9</em>」のキーを押すと次の行を読み上げます）。</li></ul><p>しかしライブリージョンを使った場合、単純に、その中身のコンテンツが変更されたタイミングで読み上げられるようになります。これはつまり、スクリーンリーダーユーザーをページ内の現在位置から移動させなくても状況を説明できるということです。並べ替えボタンを押した後、ライブリージョンに「商品リストを読み込み中。しばらくお待ちください。」というメッセージを入れます。</p><pre><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">aria-live</span><span class="token attr-value"><span class="token punctuation">=</span>"assertive"</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span>"alert"</span><span class="token punctuation">&gt;</span></span>
    商品リストを読み込み中。しばらくお待ちください。Loading products.
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></code></pre><p>そして、商品リストが読み込まれたら、ライブリージョンのコンテンツを変更して、ユーザーに以下のように知らせます。</p><pre><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">aria-live</span><span class="token attr-value"><span class="token punctuation">=</span>"assertive"</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span>"alert"</span><span class="token punctuation">&gt;</span></span>
    商品リストの読み込みが完了しました。23点の商品が一覧されています。23 products listed.
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></code></pre><h4>コードの補足</h4>
<ul>
<li><a href="http://w3c.github.io/aria/aria/aria.html#aria-live"><span class="link"><code>aria-live="assertive"</code></span></a>プロパティと<a href="http://w3c.github.io/aria/aria/aria.html#status"><span class="link"><code>alert</code></span></a>ロールは、いずれも同じ機能を提供するものです。両者はプラットフォームやスクリーンリーダー間の互換性を最大限にするために提供されています（一部の環境では、どちらか一方だけが認識されます）。</li>
<li>以下のようなJavaScriptによる単純なDOM操作で、ライブリージョンにメッセージを入れることができます。<code>liveElement.textContent = 'メッセージ'</code></li>
<li><code>aria-live="assertive"</code>や<code>alert</code>ロールを指定した場合は、ライブリージョンに新しいメッセージが入ると、スクリーンリーダーの現在の読み上げが中断されて、メッセージが読み上げられます。つまり、ユーザーがウィジェットから離れて別のコンテンツを読んでいても、商品リストの読み込みが完了したことが即座に通知されます。かわりに<code>aria-live=polite</code>や<code>status</code>ロールを使った場合は、スクリーンリーダーが読み上げ中のコンテンツを読み終えた後に、ライブリージョンのコンテンツが読み上げられます。</li>
<li>アプリケーションの通知の場合は、視覚的なメッセージの役割も兼ねるように、ライブリージョンにスタイルを適用して表示する必要があります。しかし、読み込み中アイコンを使う場合、それが表示されることで（そして、読み込みが完了すると消えることで）、既に必要な情報を伝えています。こうしたケースでは、ライブリージョンを隠して、非視覚的にのみ利用されるようにします。ここでも、<a href="http://snook.ca/archives/html_and_css/hiding-content-for-accessibility"><span class="link">スクリーンリーダーでアクセシブルな非表示方法</span></a>を使用します。</li>
<li>Dequeが提供する<a href="https://dequeuniversity.com/library/aria/content-feedback/liveregion-playground"><span class="link">Live Region Playground</span></a>では、ライブリージョンのさまざまな設定を試すことができます。Macユーザーであれば、SafariでLive Region Playgroundを開き、VoiceOverをオンにする（<em>Cmd</em>+<em>F5</em>）ことで簡単にテストを開始できます。</li>
</ul>
<h3>submitボタンをなくすべきか</h3><p>JavaScriptで商品リストを表示する場合、フォームを<code>get</code>で送信する機能は使いません。そのため、submitボタンのデフォルトの動作であるフォーム送信の機能を抑止して、ページが再読み込みされることを防ぐ必要があります。<code>submit</code>イベントの中でpreventDefault()を呼ぶことで実現できます。</p><pre><code class=" language-javascript"><span class="token keyword">var</span> sortForm <span class="token operator">=</span> document<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">'.sorter'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sortForm<span class="token punctuation">.</span>addEventListener<span class="token punctuation">(</span><span class="token string">'submit'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// XHRで処理するため、
</span>    <span class="token comment">// ブラウザがフォームを送信しないようにする</span>
    event<span class="token punctuation">.</span>preventDefault<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// ここでXHR処理
</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>これに対して、そもそもsubmitボタンが必要なのか、という疑問も出てくるでしょう。おそらく、JavaScriptでsubmitボタンを取り除き、changeイベントにXHRの機能を追加する方が、操作の結果が即座に反映されてよいと思われるのではないでしょうか。</p><pre><code class=" language-javascript"><span class="token keyword">var</span> sortForm <span class="token operator">=</span> document<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">'.sorter'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sortForm<span class="token punctuation">.</span>addEventListener<span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>type <span class="token operator">!</span><span class="token operator">==</span> <span class="token string">'radio'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    this<span class="token punctuation">.</span>submit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>ラジオボタンにスタイルをつけてボタンのような見た目にし、読み込み中アイコンで明確なフィードバックを提供しているので、この方針でも問題ないように思えます。しかし、本章の冒頭でも触れた、<em>ユーザーに制御させる</em>という原則を忘れてはいけません。明確な送信アクションを取り除くと、XHRが走ることを予想できないユーザーが出てくる可能性があります。ユーザーはコントロールを奪われたように感じ、インターフェイスに対する信頼が損なわれるかもしれません。</p><p>加えて注意すべきは、キーボードユーザーがこのウィジェットを操作する場合、ラジオボタンのオプション間を移動するために矢印キーを使わなければならないという点です。矢印キーを押すと、隣接するラジオボタンがフォーカスされるだけでなく、<em>選択</em>もされます。つまり、オプションの端から端まで移動すると、それだけで<code>change</code>イベントが合計3回発火することになります。</p><p><code>change</code>イベントを<code>click</code>イベントに置き換えることで、フィルターオプションを選んだ際のXHRの動作を、マウスユーザーとタッチユーザーだけに限定することができます。</p><pre><code class=" language-javascript"><span class="token keyword">var</span> sortForm <span class="token operator">=</span> document<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">'.sorter'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sortForm<span class="token punctuation">.</span>addEventListener<span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>type <span class="token operator">!</span><span class="token operator">==</span> <span class="token string">'radio'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    this<span class="token punctuation">.</span>submit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>しかしこの際、冗長になったsubmitボタンを隠してしまうと、クリックもタップもできないキーボードユーザーは困ることになるでしょう。<em>Enter</em>キーでこのフォームを送信できると気づいてくれることを信じるほかありません。また、一部のプラットフォーム（特にiOS）では、submitボタンが存在しないとフォームを送信できなくなるため、submitボタンをただ単に<em>取り除く</em>ことはできません。その場合、例の<code>.visually-hidden</code>クラスに加え、<code>tabindex="-1"</code>を指定して、ボタンが存在しながらも、ユーザーによってフォーカスできない状態にする必要があります。</p><pre><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>"submit"</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span>"visually-hidden"</span> <span class="token attr-name">tabindex</span><span class="token attr-value"><span class="token punctuation">=</span>"-1"</span><span class="token punctuation">&gt;</span></span>並べ替える<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></code></pre><p>これらの対策を行っても、ユーザーが実際にこうした挙動を理解するか、<em>好む</em>のかということは、ユーザーテストで確認すべき問題です。多様なユーザーにテストしてもらうことは、インクルーシブデザイン上の決定が適切かどうかを正確に評価する最も良い方法です。</p><blockquote><p>ユーザーテストの人員を幅広く募集する中に、障害を持つ参加者を含めること。数は少なくても、さまざまな障害や支援技術を含めることを目指す。―― Government Digital Services（イギリス）</p></blockquote><p>イギリス政府のマニュアルには、標準的なユーザーテストを補完するものとして、<a href="https://www.gov.uk/service-manual/user-centred-design/user-research/accessibility-testing.html"><span class="link">アクセシビリティテスト</span></a>のセクションが設けられています。予算が少なく、時間が限られている場合は、メインのテストの一部にさまざまな特性のユーザーを含めてしまいましょう。</p><h2>検索結果をもっと読み込む</h2><p>扱っている商品数が多い場合、検索語句やフィルターオプションによっては、かなりの数のアイテムと一致する可能性があります。一度ですべて取得して表示すると、パフォーマンス上の深刻なボトルネックの原因になると同時に、泣く子も黙るような恐ろしく長いページになることがあります。検索結果を読み込む量は少なめにしておき、ユーザーが必要としたときに追加で取得するほうがはるかに優れています。これを行う方法はいくつか考えられます。そのうちのひとつ――無限スクロール――には、インクルーシビティに関する重大な問題があります。</p><h3>無限スクロール</h3><p>この<a href="https://www.smashingmagazine.com/2013/05/infinite-scrolling-lets-get-to-the-bottom-of-this/"><span class="link">無限スクロール</span></a>というパターンは、現在のコンテンツの終わりに達した時点で、ユーザーによるスクロールの操作を、コンテンツの自動読み込みという動作に結びつけるものです。その狙いは、ユーザーに対して特別なアクションを求めることなく、コンテンツをストリームとして提供することです。ただし、きわめて慎重に実装されている場合を除き、無限スクロールは、さまざまな操作方法に対してストレスに満ちた体験をもたらす結果になりがちです。</p><p>たとえば、私はマウスを使っていますが、スクロールバーのハンドルをドラッグしてページをスクロールすることもあります。新しい検索結果が読み込まれると、コンテンツの量が増えたことにともない、ハンドルが上のほうに移動します。ハンドルがマウスカーソルの場所から移動したことに気づかずに、再度ドラッグしようとして、スクロールバーのトラック部分をクリックしてしまうことがあります。すると、ページが現在位置から急に下に飛ぶことになります。これは非常に直観に反する不快な体験ですし、まだ見ていないコンテンツを見逃してしまうこともあります。</p>
<div class="translator_note" id="translator_note3003"><h4>訳註</h4><p>ここで言うトラック部分とは、スクロールバー本体の中の、ハンドル (ノブ、ボックス) でもアローでもない部分です。ここをクリックすると1ページ分スクロールするという挙動になります。</p></div>
<p><a href="http://simplyaccessible.com/article/infinite-scrolling/"><span class="link">デレク・フェザーストン（Derek Featherstone）が書いている</span></a>ように、無限スクロールはキーボードユーザーにとってもストレスがたまる体験です。ストリームの中の項目にインタラクティブな要素（「今すぐ購入」ボタンなど）があると、フォーカス可能な要素がストリームに無限に追加されていきます。その結果、Tabキーでメインコンテンツを通り越すことが不可能になり、下のフッター内のインタラクティブな要素に移動することができなくなります。</p><p>デレクは2つの解決策を提示しています。彼はそのひとつをとても気に入っていて、2回も記載しています。</p>
<ol>
<li>無限スクロールは実装しないでください。</li>
<li>自動の無限スクロールを、ユーザーが明示的に操作する「検索結果をもっと読み込む……」というボタンやリンクに置き換えましょう。ユーザーが何度か読み込みを繰り返したら、自動読み込みをオンにするかを尋ねるプロンプトを表示します。</li>
<li>いや、本当に、とにかく無限スクロールは実装しないでください。</li>
</ol>
<h3>「もっと読み込む」ボタン</h3><p>「もっと読み込む」ボタン――それは<code>&lt;button&gt;</code>である<em>べき</em>です――は、現在表示されている検索結果の最後に置かれ、クリックすると、次の検索結果を読み込むためにXHRが送信されます。</p><pre><code class=" language-markup">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 最後から2番目の項目 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 最後の項目 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">data-load-more</span><span class="token punctuation">&gt;</span></span>もっと読み込む<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></code></pre><p>新しいコンテンツが表示されたら、<code>data-load-more</code>ボタンにあるキーボードフォーカスを、新たに読み込まれた項目の先頭へと移動しましょう。そうしないと、ユーザーが見ているビューポートは変化せずに、フォーカスが当たっている<code>data-load-more</code>ボタンが画面外に押し出され、フォーカスを見失ってしまいます。</p><p>ほとんどのブラウザの実装では、ボタンからフォーカスが外れた<em>だけ</em>では、別のどこかにフォーカスが移るわけではないことに注意してください。するとブラウザは「<em>フリークアウトモード</em>」とも呼ばれる状態となり、何をフォーカスしていいかわからず、デフォルトでドキュメント本体にフォーカスが当たることになります。その結果、キーボード（スクリーンリーダーも含む）のユーザーは、ページコンテンツの先頭に飛ばされることになります。</p><p>ここでの有効な対処方法は、新たに表示された商品の最初のタイトル（この場合は<code>&lt;h3&gt;</code>）にフォーカスを移すことです。こうすると、その商品がビューポートの一番上に来ます（これはあらゆるタイプの目が見えているユーザーに役立ちます）。また、スクリーンリーダーでは、新しいコンテンツの最初の商品名である<code>&lt;h3&gt;</code>テキストが読み上げられます。</p><p>JavaScriptの<code>focus()</code>メソッドでフォーカスできるようにするには、最初の商品の<code>&lt;h3&gt;</code>に<code>tabindex="-1"</code>を適用する必要がある点に注意してください。<code>tabindex="0"</code>とは違い、この指定を行った要素は、ユーザーが直接フォーカスすることはできません。このケースでは、<code>&lt;h3&gt;</code>はアクションの対象になる（インタラクティブな）要素ではないので、ユーザーがフォーカスすることは望ましくありません。<code>&lt;h3&gt;</code>にフォーカスを移すのは、ユーザーを適切なコンテキストに導き、読み上げをはじめさせるときだけです。そこから<em>Tab</em>キーを押すとアーティストのリンクに移動し、もう1回押すと「今すぐ購入」リンクに移動します。</p><pre><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">tabindex</span><span class="token attr-value"><span class="token punctuation">=</span>"-1"</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- タイトルをフォーカス可能にする --&gt;</span>
        ガソリンスタンドにたたずむ裸の男
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span>"/artist/kenny-mulbarton"</span><span class="token punctuation">&gt;</span></span>by <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cite</span><span class="token punctuation">&gt;</span></span>ケニー・マルバートン<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cite</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span>"/images/naked-forecourt-man.jpg"</span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span>"裸の男性が何食わぬ顔で給油ポンプにもたれかかっている、ハイコントラストの白黒写真。"</span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">&gt;</span></span>サイズ:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">&gt;</span></span>30cm × 90cm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">&gt;</span></span>価格:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">&gt;</span></span>35.95ユーロ<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">&gt;</span></span>評価:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span>"/images/rating_4_5.svg"</span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span>""</span><span class="token punctuation">&gt;</span></span>(5つ星のうち 4)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span>"/product/naked-man-in-garage"</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span>"call-to-action"</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span>"visually-hidden"</span><span class="token punctuation">&gt;</span></span>ガソリンスタンドにたたずむ裸の男を<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>今すぐ購入
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 新たに表示された商品の2番目 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- etc --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></code></pre><p>フィルターオプションを選択する場合と同様、XHRで処理されることになります。そのため、やはり同様に、読み込み中アイコンとライブリージョンを提供するべきです。このケースでは、「もっと読み込む」ボタンのテキストノードを読み込み中アイコンで置き換えることもできます。その場合、以下のような順で動作することになるでしょう。</p>
<ol>
<li>ユーザーが「もっと読み込む」ボタンをクリックする。</li>
<li>ボタンのテキストが「読み込み中」に代わり、クリックを受け付けないように設定される。クリックされた際、読み込み中の状態であることを検出したら（たとえば、ボタンの<code>textContent</code>に「読み込み中」が含まれていたら）、何もせずに<code>return</code>する。<div class="translator_note" id="translator_note3062"><h4>訳註</h4><p>読み込み中であるかどうかをボタンのテキストで判定すると、ボタンのテキストが変更されたときに問題が生じます。本書でも何度か自動翻訳の話題が出ていますが、翻訳によってテキストが差し替えられることもありえますので、ボタンのテキストを見る実装は望ましくないでしょう。</p></div></li>
<li>目には見えないライブリージョンが「追加の商品リストを読み込み中」と読み上げる。</li>
<li>XHRが処理される。</li>
<li>成功すると、コンテンツが表示される。</li>
<li>ライブリージョンが「商品リストが読み込まれました」と読み上げる。</li>
<li>ボタンから、新たに読み込まれた商品の最初の項目にフォーカスが移動する。ここで、6章「ナビゲーション領域」で説明したようなスムーズスクロールアクションを使うこともできる。</li>
<li>「もっと読み込む」ボタンの中身が元のテキストノードに戻り、<code>clickイベント</code>も再度処理されるようになる。</li>
</ol>
<p><img src="images/load_more.png" alt="左のボタンには「もっと読み込む」というテキスト、右のボタンには「読み込み中」というテキストと読み込み中アイコンが表示されている。右のボタンは無効になっているのでグレーアウトされている。"/><br/><em>「もっと読み込む」ボタンの初期状態（左）と押された後の状態（右）。</em></p><p>無限スクロールは、ユーザーのスクロールアクションを乗っ取り、予期せぬ動作をします。ユーザーのコントロールは奪われ、ユーザー体験が損なわれます。「もっと読み込む」ボタンは、明示的な、ラベルがつけられたアクションを提供し、ユーザーの都合のよいときに実行できるようにします。これは、ヘニー・スワンの原則の2番めの項目である<strong>ユーザーに制御させる</strong>にも合致しています。</p><h2>表示オプション</h2><p>一般的に、デザイナーは、ユーザーのニーズを見越し、彼らのために賢明な判断を下すことが自分の仕事だと考えています。それがデザインというものではないでしょうか？おそらくそのとおりです。しかし、私たちは次のような問題にも取り組まなければなりません。</p><ul><li>ユーザーの設定はさまざまに異なっている。</li><li>ユーザーはさまざまな状況に居合わせている。</li></ul><p>ユーザーのための判断の例として、<code>&lt;meta&gt;</code>タグのviewportに<code>user-scalable=no</code>を指定してズームを無効にするというものがあります。ユーザーに最適な文字サイズや表示倍率を決めて、それをユーザー自身が調節できないようにするこの指定は、まさにユーザーの<em>ために</em>判断されたものです。ユーザーが多様なのは必然であることを考えると、厚かましく無謀な行いです。</p>
<div class="translator_note" id="translator_note3087"><h3>訳註</h3><p>W3CのHTML5.2の仕様には、user-scalable=noの指定はアクセシビリティ、ユーザビリティの問題を起こすため、避けるべきであるという旨の注意書きがあります。近年ではブラウザ側で対応する動きも進んでおり、iOS10以降のSafariではuser-scalable=noの指定を無視するようになりました。</p><h4>参考</h4><ul><li><a href="http://www.w3.org/TR/2017/CR-html52-20170808/document-metadata.html#the-meta-element">HTML 5.2 - 4.2.5. The meta element</a></li><li><a href="https://developer.apple.com/library/content/releasenotes/General/RN-iOSSDK-10.0/index.html">iOS SDK Release Notes for iOS 10.0</a></li></ul></div>
<p>もちろん、デザイナーが個別に判断しなければならないこともあります。デザインのすべての部分が、ユーザーリサーチで直接裏づけられるわけではないからです。しかしその場合も、以下に従えば、判断に対する自信を高めることができます。</p><ul><li><strong>慣習</strong>：<br />広く採用されているパターン、モチーフ、言葉を使う。</li><li><strong>選択</strong>：<br />どのように利用するか、ユーザーが決められるようにする。</li></ul><p>このフィルターウィジェットのパターンの仕上げとして、フィルターが適用されたコンテンツの表示方法をユーザーが選択できるようにします。</p><h3>リストか、グリッドか？</h3><p>このフィルタリングインターフェイスに対する最後の拡張として、検索結果の表示方法をリスト形式とグリッド形式のどちらにするか、ユーザーが選べるようにしましょう。そうすれば、ユーザーは自分に合った認識しやすいレイアウトを選択できます。リスト形式はシンプルですが、どうしても縦に長くなります。グリッドはリストよりも全体を見渡すことができますが、多くの情報が圧縮されて一度にビューポートに詰め込まれます。</p><p>調整を加えたフィルターウィジェットは、たとえば以下のような見た目になるでしょう。</p><p><img src="images/filter2.png" alt="フィルターのフォームに、リスト形式とグリッド形式を選択させる表示オプションの行が新たに出現している。"/><br/><em>submitボタンは「適用する」としています。並び替えと表示設定の両方に当てはまる、より広範囲なアクションです。</em></p><p>拡張したマークアップは以下の通りです。</p><pre><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span>"form"</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span>"sorter"</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span>"get"</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">&gt;</span></span>並べ替え<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>"radio"</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>"sort-method"</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"most-recent"</span> <span class="token attr-name">checked</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span>"most-recent"</span><span class="token punctuation">&gt;</span></span>新着順<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>"radio"</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>"sort-method"</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"popularity"</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span>"popularity"</span><span class="token punctuation">&gt;</span></span>人気順<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>"radio"</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>"sort-method"</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"price-low-high"</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span>"price-low-high"</span><span class="token punctuation">&gt;</span></span>価格の安い順<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>"radio"</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>"sort-method"</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"price-high-low"</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span>"price-high-low"</span><span class="token punctuation">&gt;</span></span>価格の高い順<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">&gt;</span></span>表示方法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span>"list"</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>use</span> <span class="token attr-name"><span class="token namespace">xlink:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span>"#list-icon"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>use</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span>"visually-hidden"</span><span class="token punctuation">&gt;</span></span>リスト<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>"radio"</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>"display-as"</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"list"</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span>"list"</span> <span class="token attr-name">checked</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span>"grid"</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>use</span> <span class="token attr-name"><span class="token namespace">xlink:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span>"#grid-icon"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>use</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span>"visually-hidden"</span><span class="token punctuation">&gt;</span></span>グリッド<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>"radio"</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>"display-as"</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>"grid"</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span>"grid"</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>"submit"</span><span class="token punctuation">&gt;</span></span>適用する<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span></code></pre><h4>コードの補足</h4><ul><li>主要なフィルターオブションと区別するため、「表示方法」の機能は独立した<code>&lt;fieldset&gt;</code>の中に入れています。</li><li>リストとグリッドのアイコンにはインラインSVGを使用し、視覚的には非表示とした<code>&lt;text&gt;</code>要素を含めることで、各ラジオボタンにスクリーンリーダーでアクセスできるテキストラベルを提供しています。</li><li>表示方法のラジオボタンにフォーカスすると、スクリーンリーダーでは、まず<code>&lt;legend&gt;</code>が読み上げられ、次に<code>&lt;label&gt;</code>とその他の情報が読み上げられます。したがって、リスト項目がフォーカスされる（そして選択される）と、「表示方法 グループ、リスト ラジオボタン、チェックされています、全2個中1個」などと読み上げられます。</li><li>submitボタンのラベルを「並べ替える」から「適用する」に変更し、並べ替えと表示設定の両方に<em>適用</em>しました。ダジャレになってしまったことをお許しください。</li></ul><h3>自動的グリッド</h3><p>レイアウトがグリッドかリストかによらず、マークアップ上は常に商品をリスト（<code>&lt;ul&gt;</code>）として構成すべきです。実際にリストを<em>目で見ていない</em>ユーザーは、レイアウトに関係なくリストのセマンティクスによるメリットを得られます。また、クライアントサイドのDOM操作も少なくて済みます。変更すべきなのは親の<code>&lt;ul&gt;</code>のクラスだけです。レイアウトがシングルカラムの場合は<code>.list-display</code>、マルチカラムの場合は<code>.grid-display</code>とします。</p><p>「カラムはいくつが適切か？」という問いがあります。レスポンシブデザインの場合、スペースがどれだけあるかによって答えは変わります。一般に、カラム数はビューポートの幅に合わせます――ビューポートの幅が広いほどカラム数を増やせます。この場合、多くの手動のメディアクエリの記述が必要となり、レイアウト崩れの問題にも気を配る必要があります。</p><p>一方Flexboxを使えば、<code>flex-basis</code>を指定することで、要素ごとの理想的な幅を定義することができます。<code>flex-grow</code>と<code>flex-shrink</code>を有効にすることで、グリッドを構成する要素が、理想的な幅から伸びたり縮んだりするようになります。これにより、ビューポートの範囲が無限に広がったとしても、完全に規則的なグリッドを維持することができるのです。</p><pre><code class=" language-css"><span class="token selector">.grid-display </span><span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    <span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span>
    <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.grid-display li </span><span class="token punctuation">{</span>
    <span class="token property">flex-grow</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
    <span class="token property">flex-shrink</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span> <span class="token comment">/* 実際にはデフォルト値 */</span>
    <span class="token property">flex-basis</span><span class="token punctuation">:</span> 10em<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre><h4>コードの補足</h4><ul><li><code>flex-basis</code>の値がカギになります。これは、Flexboxアルゴリズムにおいて、個々の項目が理想とする幅です。各項目は幅10emになろうとしつつ、しかし利用可能なスペースを余さずに分け合うべく<em>伸縮（flex）</em>するでしょう（後述の<code>flex-grow</code>と<code>flex-shrink</code>の解説を参照）。</li><li><code>flex-basis</code>の値は、文字サイズに比例するようemで設定しています。つまり、カラムは文字サイズの変更に応じて幅が変わり、自動的にリフローされるということです。</li><li><code>flex-grow</code>の<code>1</code>という値は、あまったスペースを埋めるために、項目の幅が10emを超えて伸びることを意味します。</li><li><code>flex-shrink</code>の<code>1</code>という値（実際はこの値がデフォルトなので省略可能）によって、必要なときには項目の幅が狭くなり、レイアウトが破綻しないようになっています。</li><li><code>flex-wrap</code>が有効になっているため、他の項目を並べた横に幅10em以上のスペースがなく、要素が収まらないときは、次の行に折り返して表示されます。</li></ul><h4>適切なカラム幅の確保</h4><p>構築してきたのは、自動的に構成されるグリッドシステムです。ごく少ないコードで、<em>無限の</em>ビューポート範囲に対して、コンテンツを崩さずに表示できます。これは非常にインクルーシブなレイアウト方法です。</p><p>残った課題は、コンテンツの読みやすさを確保することです。3章「パラグラフ」の内容を覚えているでしょうか。そう、カラム幅を広くしすぎてはいけなかったはずです。いまのままでは、幅の広いビューポートで問題が起きる危険があります。特に、折り返しアルゴリズムによって、最後の行に最後の項目1つだけが配置された場合です。</p><p><img src="images/grid_with_long_item.png" alt="5カラムのグリッドに11の項目が表示されている。つまり、最後の項目はそれひとつで行全体を占めている。"/></p><p>以下のコードは、項目の<code>max-width</code>を20emに制限するように調整したものです。シンメトリーのため、センターライン上にコンテンツをまとめるのが私の好みです。そのため、flexコンテナで<code>justify-content: center;</code>と宣言しています。</p>
<div class="translator_note" id="translator_note3174"><h5>訳註</h5><p>この場合、最終行の要素だけ幅が異なるため、要素を左寄せにすると、単に幅がそろっていないように見えてしまいます。flex-growを指定して伸びるようにしつつ、最終行の要素を他の行の要素と同じ幅にするというのは簡単ではありません。そのため、シンプルに中央寄せにするという方法をおすすめしているのでしょう。</p></div>
<pre><code class=" language-css"><span class="token selector">.grid-display </span><span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    <span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span>
    <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>
    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.grid-display li </span><span class="token punctuation">{</span>
    <span class="token property">flex-grow</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
    <span class="token property">flex-basis</span><span class="token punctuation">:</span> 10em<span class="token punctuation">;</span>
    <span class="token property">max-width</span><span class="token punctuation">:</span> 20em<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre><p><img src="images/grids_with_max_widths.png" alt="5カラムのグリッドで、最後の行が1項目、2項目、3項目、4項目の場合。1～2項目の場合には、最後の項目は20emの幅となってセンタリングされる。3～4項目の場合、全体の幅を3分割、4分割した幅になる。"/></p><p>Flexboxのアルゴリズムは、うまく使えば非常にパワフルになります。実際に使うときには、この例で10emや20emとした値をコンテンツに合わせて調節する必要があるでしょう。</p><p><strong>【MEMO】</strong>IE10とIE11にはいやらしいバグがあり、flexコンテナをフォーカス可能にしたとき、子要素のほうにフォーカスが当たってしまう場合があります。<a href="http://allyjs.io/api/fix/pointer-focus-children.html"><span class="link">便利なa11y.jsライブラリで、このバグを修正できます。</span></a></p><h4>右から左へのグリッド</h4><p>2章「ドキュメント全体」で確認したとおり、Webページの言語を宣言することで、支援技術と翻訳ツールを最大限に活用できるようになります。海外のユーザーにも対応することは、インクルージョンにとって大きな一歩です。英語は左から右に読みますが、アラビア語など、右から左に読む言語もあります。ドキュメントのテキスト方向は、HTML要素に（<code>lang</code>属性とともに）<code>dir</code>属性を含めることで設定できます。</p><pre><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span>"ar"</span> <span class="token attr-name">dir</span><span class="token attr-value"><span class="token punctuation">=</span>"rtl"</span><span class="token punctuation">&gt;</span></span></code></pre><p>floatによるCSSレイアウトは、この設定の影響を受けません。つまり、floatしたコンテンツのレイアウトは、手動で逆転させなければなりません。</p><pre><code class=" language-css"><span class="token selector">.content </span><span class="token punctuation">{</span>
    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 60%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">[dir="rtl"] .content </span><span class="token punctuation">{</span>
    <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.sidebar </span><span class="token punctuation">{</span>
    <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 40%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">[dir="rtl"] .sidebar </span><span class="token punctuation">{</span>
    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre><p>Flexboxは、すばらしいことに、方向を自動的に処理してくれます。<code>dir</code>が<code>rtl</code>に設定されたドキュメント内のすべてのflexコンテナは、各行のコンテンツを期待通りに右から左に表示します。<code>flex-direction</code>プロパティの値を<code>row</code>から<code>row-reverse</code>にすることで、方向を切り替えることもできます。</p><p>ドキュメントが右から左の方向設定にもかかわらず、グリッドを左から右の設定で配置したい場合は、flexコンテナに対してCSSの<code>direction</code>プロパティを指定することで強制的に左寄せにできます。</p>
<div class="translator_note" id="translator_note3206"><h5>訳註</h5><p>flex-direcionをrow-reverseにした場合と、directionにltrを指定した場合とでは挙動が異なる場合があります。たとえば、text-alignの初期値はdirectionの影響を受けるため、directionで指定した場合にはテキストの配置も変化することがあります。</p></div>
<pre><code class=" language-css"><span class="token selector">.grid-display </span><span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    <span class="token property">direction</span><span class="token punctuation">:</span> ltr<span class="token punctuation">;</span>
    <span class="token comment">/* このltr指定はrow-reverseのように動作する */</span>
    <span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span>
    <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>
    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre><p><strong>【MEMO】</strong>この自動的な方向の逆転は<code>&lt;table&gt;</code>要素にも当てはまり、カラムの順序が入れ替わります。ですが、<code>&lt;table&gt;</code>要素をレイアウトには使用しません。支援技術に誤ったセマンティクスを提供することになるからです。</p><h2>動的なコンテンツへの柔軟な対応</h2><p>ここまでずっと、コンテンツのために構造をデザインしてきました。ここでも同様に、コンテンツに注目していくべきです。言葉遣いやトーンについては3章「パラグラフ」で説明したので、ここではコンテンツの長さの変動について考えてみましょう。</p><p>インターフェイスコンポーネントの静的モックアップが廃れた主な理由のひとつに、それが理想的なコンテンツを表しがちだから、という点があります。たとえば、特定の長さの人名、すべてがぴったり5行に収まる説明文などです。そしてフロントエンドが実装されたとき、変動するコンテンツがレイアウトに予期せぬ影響を与えて問題が発生します。</p><p>プロトタイプの段階で、商品グリッドインターフェイスがコンテンツの長さの変動を許容できるかを確認するためには、<a href="https://github.com/Heydon/forceFeed"><span class="link">forceFeed.js</span></a>などのツールを使うとよいでしょう。このスクリプトを使うと、指定したパラメータに沿ってランダムに生成されたコンテンツの配列が、レイアウト案の中に流し込まれます。</p><p>たとえば、インターフェイスがさまざまな長さの名前を許容できるかテストするには、以下のように、写真家リンクの<code>&lt;cite&gt;</code>にforceFeed.jsの<code>data-forcefeed</code>属性を追加します。</p><pre><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span>"/artist/kenny-mulbarton"</span><span class="token punctuation">&gt;</span></span>by <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cite</span> <span class="token attr-name">data-forcefeed</span><span class="token attr-value"><span class="token punctuation">=</span>"words|2"</span><span class="token punctuation">&gt;</span></span>ケニー・マルバートン<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cite</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span></code></pre><p>パラメータの<code>words</code>は、さまざまな長さの単語の配列を参照します。パラメータの<code>2</code>は、含めたいランダムな単語の数を表します。ほとんどの人名は2つの単語――苗字と名前――で構成されているので、2が妥当でしょう。これをページ内のすべての写真家の<code>&lt;cite&gt;</code>に対して実行するには、まずforceFeed.jsを読み込んでから、以下のスクリプトを書きます。ちなみに、ここでは説明を簡略にするために<em>lorem ipsum</em>の短いセットを使っていますが、自分の好きな単語を入れてもかまいません。</p><pre><code class=" language-javascript">window<span class="token punctuation">.</span>words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'lorem'</span><span class="token punctuation">,</span> <span class="token string">'ipsum'</span><span class="token punctuation">,</span> <span class="token string">'dolor'</span><span class="token punctuation">,</span> <span class="token string">'sit'</span><span class="token punctuation">,</span> <span class="token string">'amet'</span><span class="token punctuation">,</span> <span class="token string">'adipsing'</span><span class="token punctuation">,</span> <span class="token string">'consectetur'</span><span class="token punctuation">,</span> <span class="token string">'elit'</span><span class="token punctuation">,</span> <span class="token string">'sed'</span><span class="token punctuation">,</span> <span class="token string">'commodo'</span><span class="token punctuation">,</span> <span class="token string">'ligula'</span><span class="token punctuation">,</span> <span class="token string">'vitae'</span><span class="token punctuation">,</span> <span class="token string">'mollis'</span><span class="token punctuation">,</span> <span class="token string">'pellentesque'</span><span class="token punctuation">,</span> <span class="token string">'condimentum'</span><span class="token punctuation">,</span> <span class="token string">'sollicitudin'</span><span class="token punctuation">,</span> <span class="token string">'fermentum'</span><span class="token punctuation">,</span> <span class="token string">'enim'</span><span class="token punctuation">,</span> <span class="token string">'tincidunt'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> cites <span class="token operator">=</span> document<span class="token punctuation">.</span>querySelectorAll<span class="token punctuation">(</span><span class="token string">'cite'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>forEach<span class="token punctuation">.</span>call<span class="token punctuation">(</span>cites<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>cite<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cite<span class="token punctuation">.</span>addAttribute<span class="token punctuation">(</span><span class="token string">'data-forcefeed'</span><span class="token punctuation">,</span> <span class="token string">'words|2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

forceFeed<span class="token punctuation">(</span><span class="token punctuation">{</span>words<span class="token punctuation">:</span> window<span class="token punctuation">.</span>words<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>これらの単語の組み合わせによる許容度のテストは単純です。ページを何度もリロードし、ランダムな組み合わせの単語が、たとえば見苦しい折り返しなどによってレイアウトを破綻させていないかを確認します。</p><h3>商品タイトル</h3><p>forceFeed.jsにはもうひとつの特徴があります。このスクリプトでは、追加する項目の数について、<em>x</em>個から<em>n</em>個の<em>あいだ</em>、という指定の仕方ができます。これは、写真プリントのタイトルを動的なコンテンツとしてテストするのに役立ちます。forceFeed.jsを機能させるには、データを流し込む箇所をくくる要素が必要なことに注意してください。ここではスクリプトを使って、リンクの前にあるタイトルを<code>&lt;span&gt;</code>で囲んだとしましょう。</p><pre><code class=" language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">tabindex</span><span class="token attr-value"><span class="token punctuation">=</span>"-1"</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- タイトルをフォーカス可能にする --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">data-forcefeed</span><span class="token attr-value"><span class="token punctuation">=</span>"words|1|10"</span><span class="token punctuation">&gt;</span></span>ガソリンスタンドにたたずむ裸の男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span>"/artist/kenny-mulbarton"</span><span class="token punctuation">&gt;</span></span>by <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cite</span> <span class="token attr-name">data-forcefeed</span><span class="token attr-value"><span class="token punctuation">=</span>"words|1"</span><span class="token punctuation">&gt;</span></span>ケニー・マルバートン<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cite</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span></code></pre><p><code>words|1|10</code>のように数字を2つ指定すると、スクリプトは1つめの数字から2つめの数字の<em>あいだ</em>の数の配列項目をテキストノードとして配置します。単語数1～10という変動幅は、商品タイトルに予想される言葉としては妥当でしょう。後はページを再読み込みしながら、視覚的なレイアウトの破綻が起きにくくなるように、グリッドに調整を加えていきます。よくある問題は、項目間の高さに違いが出ることによって折り返しが発生する、コンテンツが折り返さずに枠からはみ出してしまう、といったものです。</p><h2>まとめ</h2><p>このパターンでは、2つのことがわかったのではないでしょうか。1つめは、HTMLで既に提供されているふるまいを、必要もないのに、安易にJavaScriptで作り直していることがよくあるということ。2つめは、まずセマンティックなHTMLを使用して、CSSをプログレッシブエンハンスメントとして使うやり方があるということ。加えて、コンテンツの表示方法をユーザーが<em>選択</em>し、<em>制御</em>できるようにすることの重要性について検討しました。また、動的に変動するコンテンツに対応できるデザインであることを確認するための、いくつかのテクニックを紹介しました。本書全体を通して説明してきたように、インクルーシブデザインは、どんなコンテンツが与えられても融通が利くビジュアルデザインである、ということも意味するのです。</p><h3>避けるべきこと</h3><ul><li>HTMLがすでに提供しているふるまいをJavaScriptで作る。</li><li>右から左に読む言語をサポートできないグリッドシステム。</li><li>無限スクロール。</li><li>理想的なコンテンツを使ったプロトタイピング。</li></ul></div>
</body></html>
